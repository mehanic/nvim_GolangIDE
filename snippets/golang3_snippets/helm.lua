-- local ls = require("luasnip") -- обязательно
-- local s = ls.snippet
-- local t = ls.text_node

-- return {

-- }


local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local rep = require("luasnip.extras").rep
local f = ls.function_node



return {
  
s("helm-service-sample-spec", {
  t({ "apiVersion: v1", "kind: Service", "metadata:" }),
  t({ "", "{{- if .Values." }), i(1, "component"), t(".service.annotations }}" ),
  t({ "  annotations:" }),
  t({ "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.annotations | indent 4 }}" ),
  t({ "{{- end }}" }),
  t({ "", "  labels:" }),
  t({ "", "{{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.labels }}" ),
  t({ "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.labels | indent 4 }}" ),
  t({ "{{- end }}" }),
  t({ "    app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
  t({ "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}" }),
  t("    component: \"{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
  t({ "    heritage: {{ .Release.Service }}" }),
  t("    release: {{ .Release.Name }}" ),
  t({ "  name: {{ template \"" }),
    f(function(args) return args[2][1] .. "." .. args[1][1] end, {1,2}),
  t(".fullname\" . }}" ),
  t({ "spec:" }),
  t({ "  clusterIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.clusterIP }}\"" ),
  t({ "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs }}" ),
  t({ "  externalIPs:" }),
  t({ "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs | indent 4 }}" ),
  t({ "  {{- end }}" }),
  t({ "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}" ),
  t({ "  loadBalancerIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}\"" ),
  t({ "  {{- end }}" }),
  t({ "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges }}" ),
  t({ "  loadBalancerSourceRanges:" }),
  t({ "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges | indent 4 }}" ),
  t({ "  {{- end }}" }),
  t({ "  healthCheckNodePort: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.healthCheckNodePort }}" ),
  t({ "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.internalTrafficPolicy }}" ),
  t({ "  internalTrafficPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.internalTrafficPolicy }}" ),
  t({ "  {{- end }}" }),
  t({ "  ports:" }),
  t({ "    - name: http", "      port: 80", "      protocol: TCP", "      targetPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".service.targetPorts.http }}" ),
  t({ "      {{- if (and (eq .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".service.type \"NodePort\") (not (empty .Values."), f(function(args) return args[1][1] end, {1}),
  t(".service.nodePorts.http))) }}" ),
  t({ "      nodePort: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.nodePorts.http }}" ),
  t({ "      {{- end }}" }),
  t({ "    - name: https", "      port: 443", "      protocol: TCP", "      targetPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".service.targetPorts.https }}" ),
  t({ "      {{- if (and (eq .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".service.type \"NodePort\") (not (empty .Values."), f(function(args) return args[1][1] end, {1}),
  t(".service.nodePorts.https))) }}" ),
  t({ "      nodePort: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.nodePorts.https }}" ),
  t({ "      {{- end }}" }),
  t({ "  {{- range $key, $value := .Values.tcp }}" }),
  t({ "    - name: \"{{ $key }}-tcp\"", "      port: {{ $key }}", "      protocol: TCP", "      targetPort: \"{{ $key }}-tcp\"" }),
  t({ "  {{- end }}" }),
  t({ "  {{- range $key, $value := .Values.udp }}" }),
  t({ "    - name: \"{{ $key }}-udp\"", "      port: {{ $key }}", "      protocol: UDP", "      targetPort: \"{{ $key }}-udp\"" }),
  t({ "  {{- end }}" }),
  t({ "  selector:" }),
  t("    app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}" ),
  t({ "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
  t({ "    release: {{ .Release.Name }}" }),
  t("  type: \"{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".service.type }}" ),
  t({ "" }),
  i(0),
}),


  s("helm-deployment-sample-spec", {
  t({ "apiVersion: apps/v1", "kind: Deployment", "metadata:" }),
  t({ "", "  name: {{ template \"" }),
    f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "spec:" }),
  t({ "", "  replicas: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".replicaCount }}"),
  t({ "", "  selector:" }),
  t({ "", "    matchLabels:" }),
  t("      app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "      component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "      release: {{ .Release.Name }}" }),
  t({ "", "  template:" }),
  t({ "", "    metadata:" }),
  t({ "", "      labels:" }),
  t("        app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "        component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "        release: {{ .Release.Name }}" }),
  t({ "", "    spec:" }),
  t({ "", "      containers:" }),
  t({ "", "        - name: {{ .Chart.Name }}" }),
  t({ "", "          image: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.repository }}:{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.pullPolicy }}"),
  t({ "", "          ports:" }),
  t({ "", "            - name: http", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.http }}"),
  t({ "", "            - name: https", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.https }}"),
  t({ "", "          livenessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".livenessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 10", "            timeoutSeconds: 2" }),
  t({ "", "          readinessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".readinessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 5", "            timeoutSeconds: 1" }),
  t({ "", "      restartPolicy: Always" }),
  t({ "", "" }),
  i(0),
}),


s("helm-statefulset-sample-spec", {
  t({ "apiVersion: apps/v1", "kind: StatefulSet", "metadata:" }),
  t({ "", "  name: {{ template \"" }),
    f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "spec:" }),
  t({ "", "  replicas: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".replicaCount }}"),
  t({ "", "  serviceName: {{ template \"" }), f(function(args) return args[2][1] end, {1, 2}), t(".fullname\" . }}"),
  t({ "", "  podManagementPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".podManagementPolicy | default \"OrderedReady\" }}"),
  t({ "", "  selector:" }),
  t({ "", "    matchLabels:" }),
  t("      app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "      component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "      release: {{ .Release.Name }}" }),
  t({ "", "  template:" }),
  t({ "", "    metadata:" }),
  t({ "", "      labels:" }),
  t("        app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "        component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "        release: {{ .Release.Name }}" }),
  t({ "", "    spec:" }),
  t({ "", "      containers:" }),
  t({ "", "        - name: {{ .Chart.Name }}" }),
  t({ "", "          image: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.repository }}:{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.pullPolicy }}"),
  t({ "", "          ports:" }),
  t({ "", "            - name: http", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.http }}"),
  t({ "", "            - name: https", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.https }}"),
  t({ "", "          volumeMounts:" }),
  t({ "", "            - name: data", "              mountPath: /data" }),
  t({ "", "          livenessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".livenessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 10", "            timeoutSeconds: 2" }),
  t({ "", "          readinessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".readinessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 5", "            timeoutSeconds: 1" }),
  t({ "", "      volumes:" }),
  t({ "", "        - name: data", "          emptyDir: {}" }),
  t({ "", "" }),
  i(0),
}),


s("helm-daemonset-sample-spec", {
  t({ "apiVersion: apps/v1", "kind: DaemonSet", "metadata:" }),
  t({ "", "  name: {{ template \"" }),
    f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "spec:" }),
  t({ "", "  selector:" }),
  t({ "", "    matchLabels:" }),
  t("      app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "      component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "      release: {{ .Release.Name }}" }),
  t({ "", "  template:" }),
  t({ "", "    metadata:" }),
  t({ "", "      labels:" }),
  t("        app: {{ template \""), f(function(args) return args[2][1] end, {1, 2}), t(".name\" . }}"),
  t({ "", "        component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
  t({ "", "        release: {{ .Release.Name }}" }),
  t({ "", "    spec:" }),
  t({ "", "      containers:" }),
  t({ "", "        - name: {{ .Chart.Name }}" }),
  t({ "", "          image: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.repository }}:{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".image.pullPolicy }}"),
  t({ "", "          ports:" }),
  t({ "", "            - name: http", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.http }}"),
  t({ "", "            - name: https", "              containerPort: {{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
  t(".containerPorts.https }}"),
  t({ "", "          volumeMounts:" }),
  t({ "", "            - name: data", "              mountPath: /data" }),
  t({ "", "          livenessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".livenessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 10", "            timeoutSeconds: 2" }),
  t({ "", "          readinessProbe:", "            httpGet:" }),
  t("              path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".readinessProbe.path }}"),
  t({ "", "              port: http", "            initialDelaySeconds: 5", "            timeoutSeconds: 1" }),
  t({ "", "      volumes:" }),
  t({ "", "        - name: data", "          emptyDir: {}" }),
  t({ "", "" }),
  i(0),
}),


s("helm-job-sample-spec", {
  t({ "apiVersion: batch/v1", "kind: Job", "metadata:" }),
  t({ "  name: {{ template \"" }),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, { 1, 2 }),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "spec:" }),
  t({ "", "  backoffLimit: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".backoffLimit | default 6 }}"),
  t({ "", "  template:" }),
  t({ "", "    metadata:" }),
  t({ "", "      labels:" }),
  t("        app: {{ template \""), f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}), t(".name\" . }}"),
  t({ "", "        component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "        release: {{ .Release.Name }}" }),
  t({ "", "    spec:" }),
  t({ "", "      restartPolicy: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".restartPolicy | default \"OnFailure\" }}"),
  t({ "", "      containers:" }),
  t({ "", "        - name: {{ .Chart.Name }}" }),
  t({ "", "          image: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".image.repository }}:{{ .Values."),
  f(function(args) return args[1][1] end, {1}),
  t(".image.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".image.pullPolicy }}"),
  t({ "", "          command: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".command | toJson }}"),
  t({ "", "          args: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".args | toJson }}"),
  i(0),
}),

s("helm-ingress-sample-spec", {
  t({ "apiVersion: networking.k8s.io/v1", "kind: Ingress", "metadata:" }),
  t({ "  name: {{ template \"" }),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "  annotations:" }),
  t("    {{- with .Values."), f(function(args) return args[1][1] end, {1}),
  t(".ingress.annotations }}"),
  t({ "", "    {{ toYaml . | indent 4 }}", "    {{- end }}" }),
  t({ "", "spec:" }),
  t({ "  ingressClassName: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".ingress.className | quote }}"),
  t({ "", "  rules:" }),
  t({ "    - host: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".ingress.host }}"),
  t({ "      http:", "        paths:" }),
  t({ "          - path: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".ingress.path }}"),
  t({ "            pathType: Prefix", "            backend:" }),
  t({ "              service:" }),
  t({ "                name: {{ template \"" }),
  f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "                port:", "                  number: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".service.port }}"),
  i(0),
}),

s("helm-role-sample-spec", {
  t({ "apiVersion: rbac.authorization.k8s.io/v1", "kind: Role", "metadata:" }),
  t({ "  name: {{ template \"" }),
  f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "rules:" }),
  t("  - apiGroups: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.apiGroups }}"),
  t({ "    resources: {{ toJson .Values." }), f(function(args) return args[1][1] end, {1}), t(".rbac.resources }}"),
  t({ "    verbs: {{ toJson .Values." }), f(function(args) return args[1][1] end, {1}), t(".rbac.verbs }}"),
  i(0),
}),

s("helm-rolebinding-sample-spec", {
  t({ "apiVersion: rbac.authorization.k8s.io/v1", "kind: RoleBinding", "metadata:" }),
  t({ "  name: {{ template \"" }),
  f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "subjects:" }),
  t("  - kind: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.subject.kind }}"),
  t("    name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.subject.name }}"),
  t("    apiGroup: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.subject.apiGroup }}"),
  t({ "", "roleRef:" }),
  t("  kind: Role"),
  t({ "  name: {{ template \"" }),
  f(function(args) return args[2][1] .. "." .. args[1][1] end, {1, 2}),
  t(".fullname\" . }}"),
  t("  apiGroup: rbac.authorization.k8s.io"),
  i(0),
}),

s("helm-clusterrole-sample-spec", {
  t({ "apiVersion: rbac.authorization.k8s.io/v1", "kind: ClusterRole", "metadata:" }),
  t("  name: {{ template \""),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""),
  i(2, "chartName"),
  t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".name }}\""),
  t({ "", "rules:" }),
  t("  - apiGroups: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.apiGroups }}"),
  t("    resources: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.resources }}"),
  t("    verbs: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".rbac.verbs }}"),
  i(0),
}),

s("helm-networkpolicy-sample-spec", {
  t({ "apiVersion: networking.k8s.io/v1", "kind: NetworkPolicy", "metadata:" }),
  t("  name: {{ template \""),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""),
  i(2, "chartName"),
  t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".name }}\""),
  t({ "", "spec:" }),
  t("  podSelector: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".podSelector }}"),
  t("  policyTypes: {{ toJson .Values."), f(function(args) return args[1][1] end, {1}), t(".policyTypes }}"),
  t("  ingress:"),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".ingress | indent 4 }}"),
  t("  egress:"),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".egress | indent 4 }}"),
  i(0),
}),

s("helm-gatewayclass-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: GatewayClass", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "gatewayClass"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  controllerName: {{ .Values."),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".controllerName }}"),
  t({ "", "  parametersRef:" }),
  t("    group: {{ .Values."),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".parametersRef.group }}"),
  t({ "", "    kind: {{ .Values." }),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".parametersRef.kind }}"),
  t({ "", "    name: {{ .Values." }),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".parametersRef.name }}"),
  i(0),
}), 

s("helm-gateway-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: Gateway", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "gateway"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  gatewayClassName: {{ .Values."),
  f(function(args) return args[1][1] end, {1}),
  t(".gatewayClassName }}"),
  t({ "", "  listeners:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".listeners | indent 4 }}"),
  t({ "", "  addresses:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".addresses | indent 4 }}"),
  i(0),
}),

s("helm-backendrefs-sample-spec", {
  t({ "backendRefs:" }),
  t("{{ toYaml .Values."),
  f(function(args) return args[1][1] end, {1}),
  t(" | indent 2 }}"),
  i(0),
}),

s("helm-httproute-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: HTTPRoute", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "httproute"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  parentRefs:"), 
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".parentRefs | indent 4 }}"),
  t({ "", "  rules:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".rules | indent 4 }}"),
  i(0),
}),

s("helm-tcproute-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: TCPRoute", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "tcproute"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  parentRefs:"), 
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".parentRefs | indent 4 }}"),
  t({ "", "  rules:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".rules | indent 4 }}"),
  i(0),
}),

s("helm-grpcroute-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: GRPCRoute", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "grpcroute"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  parentRefs:"), 
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".parentRefs | indent 4 }}"),
  t({ "", "  rules:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".rules | indent 4 }}"),
  i(0),
}),

s("helm-udproute-sample-spec", {
  t({ "apiVersion: gateway.networking.k8s.io/v1beta1", "kind: UDPRoute", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "udproute"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  parentRefs:"), 
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".parentRefs | indent 4 }}"),
  t({ "", "  rules:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".rules | indent 4 }}"),
  i(0),
}),

s("helm-runtimeclass-sample-spec", {
  t({ "apiVersion: node.k8s.io/v1", "kind: RuntimeClass", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "runtimeClass"),
  t(".name }}"),
  t({ "", "handler: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".handler }}"),
  t({ "", "scheduling:" }),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".scheduling | indent 2 }}"),
  i(0),
}),

s("helm-pod-lifecycle-sample-spec", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t("  name: {{ .Values."),
  i(1, "pod"),
  t(".name }}"),
  t({ "", "spec:" }),
  t("  containers:"),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".containerName }}"),
  t("    image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image }}"),
  t("    lifecycle:"),
  t("      postStart:"),
  t("        exec:"),
  t("          command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".lifecycle.postStart.command | indent 12 }}"),
  t("      preStop:"),
  t("        exec:"),
  t("          command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".lifecycle.preStop.command | indent 12 }}"),
  i(0),
}),

s("helm-pod-with-initcontainers-spec", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values." 
  }), i(1, "pod"), t({ ".name }}",
    "  labels:",
    "    app.kubernetes.io/name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".appName }}",
    "",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.command | indent 6 }}",
    "",
    "  initContainers:",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].command | indent 6 }}",
    "",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].command | indent 6 }}",
  }),
  i(0),
}),


s("helm-deployment-sidecar-sample-spec", {
  t({ "apiVersion: apps/v1", "kind: Deployment", "metadata:" }),
  t("  name: {{ .Values."), i(1, "deployment"), t(".name }}"),
  t("  labels:"),
  t("    app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t({ "", "spec:" }),
  t("  replicas: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".replicas }}"),
  t("  selector:"),
  t("    matchLabels:"),
  t("      app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t("  template:"),
  t("    metadata:"),
  t("      labels:"),
  t("        app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t("    spec:"),
  t("      containers:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.name }}"),
  t("        image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.image }}"),
  t("        command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".container.command | indent 10 }}"),
  t("        volumeMounts:"),
  t("        - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("          mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.mountPath }}"),
  t("      initContainers:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.name }}"),
  t("        image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.image }}"),
  t("        restartPolicy: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.restartPolicy }}"),
  t("        command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.command | indent 10 }}"),
  t("        volumeMounts:"),
  t("        - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("          mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.mountPath }}"),
  t("      volumes:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("        emptyDir: {}"),
  i(0),
}),

s("helm-deployment-sidecar-sample-spec", {
  t({ "apiVersion: apps/v1", "kind: Deployment", "metadata:" }),
  t("  name: {{ .Values."), i(1, "deployment"), t(".name }}"),
  t("  labels:"),
  t("    app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t({ "", "spec:" }),
  t("  replicas: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".replicas }}"),
  t("  selector:"),
  t("    matchLabels:"),
  t("      app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t("  template:"),
  t("    metadata:"),
  t("      labels:"),
  t("        app: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".appLabel }}"),
  t("    spec:"),
  t("      containers:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.name }}"),
  t("        image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.image }}"),
  t("        command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".container.command | indent 10 }}"),
  t("        volumeMounts:"),
  t("        - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("          mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.mountPath }}"),
  t("      initContainers:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.name }}"),
  t("        image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.image }}"),
  t("        restartPolicy: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.restartPolicy }}"),
  t("        command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".initContainer.command | indent 10 }}"),
  t("        volumeMounts:"),
  t("        - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("          mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.mountPath }}"),
  t("      volumes:"),
  t("      - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("        emptyDir: {}"),
  i(0),
}),

s("helm-endpointslice-sample-spec", {
  t({ "apiVersion: discovery.k8s.io/v1", "kind: EndpointSlice", "metadata:" }),
  t("  name: {{ .Values."), i(1, "endpointslice"), t(".name }}"),
  t("  labels:"),
  t("    kubernetes.io/service-name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".serviceName }}"),
  t("addressType: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".addressType }}"),
  t("ports:"),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".ports | indent 2 }}"),
  t("endpoints:"),
  t("{{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".endpoints | indent 2 }}"),
  i(0),
}),

s("helm-podspec-configmap", {
  t("spec:"),
  t("  containers:"),
  t("  - name: {{ .Values."), i(1, "container"), t(".name }}"),
  t("    image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image }}"),
  t("    command: {{ toYaml .Values."), f(function(args) return args[1][1] end, {1}), t(".command | indent 6 }}"),
  t("    volumeMounts:"),
  t("    - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volumeMount.name }}"),
  t("      mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volumeMount.mountPath }}"),
  t("  volumes:"),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("    configMap:"),
  t("      name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.configMapName }}"),
  t("      items:"),
  t("      - key: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.configMapKey }}"),
  t("        path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.configMapPath }}"),
  i(0),
}),

s("helm-podspec-emptydir", {
  t("spec:"),
  t({ "", "  containers:" }),
  t("  - name: {{ .Values."), i(1, "container"), t(".name }}"),
  t("    image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".image }}"),
  t("    volumeMounts:"),
  t("    - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volumeMount.name }}"),
  t("      mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volumeMount.mountPath }}"),
  t("  volumes:"),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("    emptyDir:"),
  t("      sizeLimit: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.sizeLimit }}"),
  t("      medium: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.medium }}"),
  i(0),
}),


s("helm-podspec-hostpath", {
  t("spec:"),
  t({ "", "  os:" }),
  t("    name: {{ .Values."), i(1, "pod"), t(".os | default \"linux\" }}"),
  t({ "", "  nodeSelector:" }),
  t("    kubernetes.io/os: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".nodeSelector | default \"linux\" }}"),
  t({ "", "  containers:" }),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.name }}"),
  t("    image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.image }}"),
  t("    volumeMounts:"),
  t("    - mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.mountPath }}"),
  t("      name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("      readOnly: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.readOnly | default true }}"),
  t({ "", "  volumes:" }),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("    hostPath:"),
  t("      path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.path }}"),
  t("      type: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.type | default \"Directory\" }}"),
  i(0),
}),

s("helm-pod-repo-volume", {
    t({ "spec:", "  containers:", "  - image: " }), i(1, "nginx"),
    t({ "", "    name: " }), i(2, "nginx"),
    t({ "", "    volumeMounts:", "    - mountPath: " }), i(3, "/mypath"),
    t({ "", "      name: " }), i(4, "git-volume"),
    t({ "", "  volumes:", "  - name: " }), f(function(args) return args[1][1] end, {4}),
    t({ "", "    gitRepo:", "      repository: \"" }), i(5, "git@somewhere:me/my-git-repository.git"),
    t({ "\"", "      revision: \"" }), i(6, "22f1d8406d464b0c0874075539c1f2e96c253775"),
    t({ "\"" }),
    i(0),
  }),

  s("helm-k8s-hostpath-volumes", {
    t({ "spec:", "  os: { name: " }), i(1, "linux"), t(" }"),
    t({ "", "  nodeSelector:", "    kubernetes.io/os: " }), f(function(args) return args[1][1] end, {1}),
    t({ "", "  containers:", "  - name: " }), i(2, "test-webserver"),
    t({ "", "    image: " }), i(3, "registry.k8s.io/test-webserver:latest"),
    t({ "", "    volumeMounts:" }),
    t({ "", "    - mountPath: " }), i(4, "/var/local/aaa"),
    t({ "", "      name: " }), i(5, "mydir"),
    t({ "", "    - mountPath: " }), i(6, "/var/local/aaa/1.txt"),
    t({ "", "      name: " }), i(7, "myfile"),
    t({ "", "  volumes:" }),
    t({ "", "  - name: " }), f(function(args) return args[1][1] end, {5}),
    t({ "", "    hostPath:", "      path: " }), f(function(args) return args[1][1] end, {4}),
    t({ "", "      type: DirectoryOrCreate" }),
    t({ "", "  - name: " }), f(function(args) return args[1][1] end, {7}),
    t({ "", "    hostPath:", "      path: " }), f(function(args) return args[1][1] end, {6}),
    t({ "", "      type: FileOrCreate" }),
    i(0),
  }),

  s("helm-podspec-imagevolume", {
  t("spec:"),
  t({ "", "  containers:" }),
  t("  - name: {{ .Values."), i(1, "pod"), t(".container.name }}"),
  t("    command: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.command | default [\"sleep\", \"infinity\"] }}"),
  t("    image: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".container.image | default \"debian\" }}"),
  t("    volumeMounts:"),
  t("    - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("      mountPath: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.mountPath | default \"/volume\" }}"),
  t({ "", "  volumes:" }),
  t("  - name: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.name }}"),
  t("    image:"),
  t("      reference: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.reference }}"),
  t("      pullPolicy: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volume.pullPolicy | default \"IfNotPresent\" }}"),
  i(0),
}),

s("helm-persistentvolume-local", {
  t({ "apiVersion: v1", "kind: PersistentVolume", "metadata:" }),
  t("  name: {{ .Values."), i(1, "pv"), t(".name }}"),
  t({ "", "spec:" }),
  t("  capacity:"),
  t("    storage: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".capacity | default \"100Gi\" }}"),
  t("  volumeMode: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".volumeMode | default \"Filesystem\" }}"),
  t("  accessModes:"),
  t("  - {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".accessMode | default \"ReadWriteOnce\" }}"),
  t("  persistentVolumeReclaimPolicy: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".reclaimPolicy | default \"Delete\" }}"),
  t("  storageClassName: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".storageClassName | default \"local-storage\" }}"),
  t("  local:"),
  t("    path: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".path | default \"/mnt/disks/ssd1\" }}"),
  t("  nodeAffinity:"),
  t("    required:"),
  t("      nodeSelectorTerms:"),
  t("      - matchExpressions:"),
  t("        - key: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".nodeAffinity.key | default \"kubernetes.io/hostname\" }}"),
  t("          operator: {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".nodeAffinity.operator | default \"In\" }}"),
  t("          values:"),
  t("          - {{ .Values."), f(function(args) return args[1][1] end, {1}), t(".nodeAffinity.value | default \"example-node\" }}"),
  i(0),
}),

s("helm-nfs-volume-spec-helm-func", {
  t({ "spec:", "  containers:" }),
  t({ "  - name: " }), i(1, "{{ .Values.containerName }}"),
  t({ "    image: " }), i(2, "{{ .Values.image }}"),
  t({ "    volumeMounts:" }),
  t({ "    - mountPath: " }), i(3, "{{ .Values.mountPath }}"),
  t({ "      name: " }), i(4, "test-volume"),
  t({ "  volumes:" }),
  t({ "  - name: " }), 
  f(function(args) return args[1][1] end, {4}),
  t({ "    nfs:" }),
  t({ "      server: {{ .Values.nfsVolume.server }}" }),
  t({ "      path: {{ .Values.nfsVolume.path }}" }),
  t({ "      readOnly: {{ .Values.nfsVolume.readOnly | default true }}" }),
  i(0),
}),

s("helm-portworx-volume-spec-helm-func", {
  t({ "spec:", "  containers:" }),
  t({ "  - name: " }), i(1, "{{ .Values.containerName }}"),
  t({ "    image: " }), i(2, "{{ .Values.image }}"),
  t({ "    volumeMounts:" }),
  t({ "    - mountPath: " }), i(3, "{{ .Values.mountPath }}"),
  t({ "      name: " }), i(4, "pxvol"),
  t({ "  volumes:" }),
  t({ "  - name: " }), 
  f(function(args) return args[1][1] end, {4}),
  t({ "    portworxVolume:" }),
  t({ "      volumeID: {{ .Values.portworx.volumeID }}" }),
  t({ "      fsType: {{ .Values.portworx.fsType | default \"ext4\" }}" }),
  i(0),
}),

s("helm-k8s-lamp-pod-helm-func", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.podName }}"),
  t({ "spec:", "  containers:" }),
  t({ "  - name: " }), i(2, "{{ .Values.mysql.containerName }}"),
  t({ "    image: " }), i(3, "{{ .Values.mysql.image }}"),
  t({ "    env:" }),
  t({ "    - name: MYSQL_ROOT_PASSWORD", "      value: " }), i(4, "{{ .Values.mysql.rootPassword }}"),
  t({ "    volumeMounts:" }),
  t({ "    - mountPath: /var/lib/mysql", "      name: " }),
  f(function() return "site-data" end, {}),
  t({ "      subPath: mysql" }),
  t({ "  - name: " }), i(5, "{{ .Values.php.containerName }}"),
  t({ "    image: " }), i(6, "{{ .Values.php.image }}"),
  t({ "    volumeMounts:" }),
  t({ "    - mountPath: /var/www/html", "      name: " }),
  f(function() return "site-data" end, {}),
  t({ "      subPath: html" }),

  t({ "  volumes:" }),
  t({ "  - name: " }),
  f(function() return "site-data" end, {}),
  t({ "    persistentVolumeClaim:" }),
  t({ "      claimName: " }),
  f(function(args) return args[1][1] .. "-data" end, {1}),
  i(0),
}),

s("helm-k8s-pod-subpathexpr-helm", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pod.name }}"),
  t({ "spec:", "  containers:" }),
  t({ "  - name: " }), i(2, "{{ .Values.container.name }}"),
  t({ "    image: " }), i(3, "{{ .Values.container.image }}"),
  t({ "    command: [ \"sh\", \"-c\", " }),
  i(4, "{{ .Values.container.command }}"),
  t({ " ]" }),
  t({ "    env:" }),
  t({ "    - name: POD_NAME" }),
  t({ "      valueFrom:" }),
  t({ "        fieldRef:" }),
  t({ "          apiVersion: v1" }),
  t({ "          fieldPath: metadata.name" }),
  t({ "    volumeMounts:" }),
  t({ "    - name: workdir1" }),
  t({ "      mountPath: /logs" }),
  t({ "      # The variable expansion uses round brackets (not curly brackets)." }),
  t({ "      subPathExpr: $(POD_NAME)" }),
  t({ "  restartPolicy: Never" }),
  t({ "  volumes:" }),
  t({ "  - name: workdir1" }),
  t({ "    hostPath:" }),
  t({ "      path: /var/log/pods" }),
  i(0),
}),

s("helm-k8s-pod-mountpropagation-helm", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pod.name }}"),
  t({ "spec:", "  volumes:" }),
  t({ "  - name: mnt", "    hostPath:", "      # tmpfs is mounted on /mnt/tmpfs", "      path: " }), i(2, "{{ .Values.volume.hostPath }}"),
  t({ "  containers:" }),
  t({ "  - name: " }), i(3, "{{ .Values.container.name }}"),
  t({ "    image: " }), i(4, "{{ .Values.container.image }}"),
  t({ "    args: [\"sleep\", \"infinity\"]" }),
  t({ "    volumeMounts:" }),
  t({ "      # /mnt-rro/tmpfs is not writable" }),
  t({ "      - name: mnt" }),
  t({ "        mountPath: /mnt-rro" }),
  t({ "        readOnly: true" }),
  t({ "        mountPropagation: None" }),
  t({ "        recursiveReadOnly: Enabled" }),
  t({ "      # /mnt-ro/tmpfs is writable" }),
  t({ "      - name: mnt" }),
  t({ "        mountPath: /mnt-ro" }),
  t({ "        readOnly: true" }),
  t({ "      # /mnt-rw/tmpfs is writable" }),
  t({ "      - name: mnt" }),
  t({ "        mountPath: /mnt-rw" }),
  i(0),
}),

s("helm-k8s-pv-recycler-helm", {
  t({ "spec:" }),
  t({ "  restartPolicy: Never" }),
  t({ "  volumes:" }),
  t({ "  - name: vol", "    hostPath:", "      path: " }), i(1, "{{ .Values.recycler.hostPath }}"),
  t({ "  containers:" }),
  t({ "  - name: pv-recycler" }),
  t({ "    image: \"" }), i(2, "{{ .Values.recycler.image | default \"registry.k8s.io/busybox\" }}\""),
  t({ "    command: [\"/bin/sh\", \"-c\", \"test -e /scrub && rm -rf /scrub/..?* /scrub/.[!.]* /scrub/*  && test -z \\\"$(ls -A /scrub)\\\" || exit 1\"]" }),
  t({ "    volumeMounts:" }),
  t({ "    - name: vol", "      mountPath: /scrub" }),
  i(0),
}),

s("helm-k8s-pv-helm", {
  t({ "apiVersion: v1", "kind: PersistentVolume", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pv.name }}"),
  t({ "spec:" }),
  t({ "  capacity:" }),
  t({ "    storage: " }), i(2, "{{ .Values.pv.storage }}"),
  t({ "  volumeMode: Filesystem" }),
  t({ "  accessModes:" }),
  t({ "    - ReadWriteOnce" }),
  t({ "  persistentVolumeReclaimPolicy: " }), i(3, "{{ .Values.pv.reclaimPolicy }}"),
  t({ "  storageClassName: " }), i(4, "{{ .Values.pv.storageClassName }}"),
  t({ "  mountOptions:" }),
  t({ "    - " }), i(5, "hard"),
  t({ "    - " }), i(6, "nfsvers=4.1"),
  t({ "  nfs:" }),
  t({ "    path: " }), i(7, "{{ .Values.pv.nfs.path }}"),
  t({ "    server: " }), i(8, "{{ .Values.pv.nfs.server }}"),
  i(0),
}),


s("helm-k8s-pvc-helm", {
  t({ "apiVersion: v1", "kind: PersistentVolumeClaim", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pvc.name }}"),
  t({ "spec:" }),
  t({ "  accessModes:" }),
  t({ "    - ReadWriteOnce" }),
  t({ "  volumeMode: Filesystem" }),
  t({ "  resources:" }),
  t({ "    requests:" }),
  t({ "      storage: " }), i(2, "{{ .Values.pvc.storage }}"),
  t({ "  storageClassName: " }), i(3, "{{ .Values.pvc.storageClassName }}"),
  t({ "  selector:" }),
  t({ "    matchLabels:" }),
  t({ "      release: \"" }), i(4, "{{ .Values.pvc.selector.release }}"), t({ "\"" }),
  t({ "    matchExpressions:" }),
  t({ "      - {key: environment, operator: In, values: [" }), i(5, "{{ .Values.pvc.selector.matchExpressions }}"), t({ "]}" }),
  i(0),
}),

s("helm-k8s-pod-pvc-helm", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pod.name }}"),
  t({ "spec:" }),
  t({ "  containers:" }),
  t({ "    - name: " }), i(2, "{{ .Values.container.name }}"),
  t({ "      image: " }), i(3, "{{ .Values.container.image }}"),
  t({ "      volumeMounts:" }),
  t({ "      - mountPath: \"" }), i(4, "{{ .Values.container.mountPath }}"), t({ "\"" }),
  t({ "        name: " }), i(5, "{{ .Values.volume.name }}"),
  t({ "  volumes:" }),
  t({ "    - name: " }), f(function(args) return args[1][1] end, {5}),
  t({ "      persistentVolumeClaim:" }),
  t({ "        claimName: " }), i(6, "{{ .Values.volume.claimName }}"),
  i(0),
}),

s("helm-k8s-pv-raw-block-device-helm", {
  t({ "apiVersion: v1", "kind: PersistentVolume", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "spec:" }),
  t({ "  capacity:" }),
  t({ "    storage: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".storage }}" end, {1}),
  t({ "  accessModes:" }),
  t({ "    - ReadWriteOnce" }),
  t({ "  volumeMode: Block" }),
  t({ "  persistentVolumeReclaimPolicy: Retain" }),
  t({ "  fc:" }),
  t({ "    targetWWNs:" }),
  t({ "      - \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".fc.targetWWNs }}" end, {1}), t({ "\"" }),
  t({ "    lun: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".fc.lun }}" end, {1}),
  t({ "    readOnly: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".fc.readOnly }}" end, {1}),
  i(1, "pv"),
  i(0),
}),

s("helm-k8s-pvc-raw-block-device-helm", {
  t({ "apiVersion: v1", "kind: PersistentVolumeClaim", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "spec:" }),
  t({ "  accessModes:" }),
  t({ "    - ReadWriteOnce" }),
  t({ "  volumeMode: Block" }),
  t({ "  resources:" }),
  t({ "    requests:" }),
  t({ "      storage: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".storage }}" end, {1}),
  i(1, "pvc"),
  i(0),
}),

s("helm-k8s-pod-raw-block-device-helm", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "spec:" }),
  t({ "  containers:" }),
  t({ "    - name: " }), f(function(args) return "{{ .Values." .. args[2][1] .. ".name }}" end, {2}),
  t({ "      image: " }), f(function(args) return "{{ .Values." .. args[2][1] .. ".image }}" end, {2}),
  t({ "      command: [\"/bin/sh\", \"-c\"]" }),
  t({ "      args: [ \"" }), f(function(args) return "{{ .Values." .. args[2][1] .. ".args }}" end, {2}), t("\" ]"),
  t({ "      volumeDevices:" }),
  t({ "        - name: data" }),
  t({ "          devicePath: /dev/xvda" }),
  t({ "  volumes:" }),
  t({ "    - name: data" }),
  t({ "      persistentVolumeClaim:" }),
  t({ "        claimName: " }), f(function(args) return "{{ .Values." .. args[3][1] .. ".claimName }}" end, {3}),
  i(1, "pod"),
  i(2, "container"),
  i(3, "pvc"),
  i(0),
}),


s("helm-k8s-pvc-restore-snapshot-helm", {
  t({ "apiVersion: v1", "kind: PersistentVolumeClaim", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.pvc.name }}"),
  t({ "spec:" }),
  t({ "  storageClassName: " }), i(2, "{{ .Values.pvc.storageClassName }}"),
  t({ "  dataSource:" }),
  t({ "    name: " }), i(3, "{{ .Values.pvc.snapshotName }}"),
  t({ "    kind: VolumeSnapshot" }),
  t({ "    apiGroup: snapshot.storage.k8s.io" }),
  t({ "  accessModes:" }),
  t({ "    - ReadWriteOnce" }),
  t({ "  resources:" }),
  t({ "    requests:" }),
  t({ "      storage: " }), i(4, "{{ .Values.pvc.storageSize }}"),
  i(0),
}),

s("helm-k8s-pod-projected-vol-helm", {
  t({
    "spec:",
    "  containers:",
    "  - name: ", 
  }), i(1, "{{ .Values.containerName }}"), t({
    "    image: ", 
  }), i(2, "{{ .Values.image }}"), t({
    "    command: [\"sleep\", \"3600\"]",
    "    volumeMounts:",
    "    - name: all-in-one",
    "      mountPath: \"/projected-volume\"",
    "      readOnly: true",
    "  volumes:",
    "  - name: all-in-one",
    "    projected:",
    "      sources:",
    "      - secret:",
    "          name: ", 
  }), i(3, "{{ .Values.secret1.name }}"), t({
    "          items:",
    "            - key: username",
    "              path: ", 
  }), f(function(args) return "my-group/" .. args[1][1] end, {4}), t({
    "      - downwardAPI:",
    "          items:",
    "            - path: labels",
    "              fieldRef:",
    "                fieldPath: metadata.labels",
    "            - path: cpu_limit",
    "              resourceFieldRef:",
    "                containerName: ", 
  }), i(4, "{{ .Values.containerName }}"), t({
    "                resource: limits.cpu",
    "      - configMap:",
    "          name: ", 
  }), i(5, "{{ .Values.configMap.name }}"), t({
    "          items:",
    "            - key: config",
    "              path: my-group/my-config",
  }),
  i(0),
}),


s("helm-k8s-pod-projected-secrets-func-helm", {
  t({ "spec:", "  containers:" }),
  t({ "  - name: " }), i(1, "{{ .Values.containerName }}"),
  t({ "    image: " }), i(2, "{{ .Values.image }}"),
  t({ "    command: [\"sleep\", \"3600\"]" }),
  t({ "    volumeMounts:" }),
  t({ "    - name: all-in-one" }),
  t({ "      mountPath: \"/projected-volume\"" }),
  t({ "      readOnly: true" }),
  t({ "  volumes:" }),
  t({ "  - name: all-in-one" }),
  t({ "    projected:" }),
  t({ "      sources:" }),
  t({ "      - secret:" }),
  t({ "          name: " }), i(3, "{{ .Values.secret1.name }}"),
  t({ "          items:" }),
  t({ "            - key: username" }),
  t({ "              path: " }), f(function(args) return "my-group/" .. args[1][1] end, {4}),
  t({ "      - secret:" }),
  t({ "          name: " }), i(4, "{{ .Values.secret2.name }}"),
  t({ "          items:" }),
  t({ "            - key: password" }),
  t({ "              path: " }), f(function(args) return "my-group/" .. args[1][1] end, {5}),
  t({ "              mode: 511" }),
  i(0),
}),

s("helm-k8s-pod-serviceaccount-token-helm", {
  t({ "spec:" }),
  t({ "  containers:" }),
  t({ "  - name: " }), i(1, "{{ .Values.containerName }}"),
  t({ "    image: " }), i(2, "{{ .Values.image }}"),
  t({ "    command: [\"sleep\", \"3600\"]" }),
  t({ "    volumeMounts:" }),
  t({ "    - name: " }), i(3, "{{ .Values.tokenVolumeName }}"),
  t({ "      mountPath: \"" }), i(4, "{{ .Values.tokenMountPath }}"), t({ "\"" }),
  t({ "      readOnly: true" }),
  t({ "  serviceAccountName: " }), i(5, "{{ .Values.serviceAccountName }}"),
  t({ "  volumes:" }),
  t({ "  - name: " }), f(function(args) return args[1][1] end, {3}),
  t({ "    projected:" }),
  t({ "      sources:" }),
  t({ "      - serviceAccountToken:" }),
  t({ "          audience: " }), i(6, "{{ .Values.audience }}"),
  t({ "          expirationSeconds: " }), i(7, "{{ .Values.expirationSeconds }}"),
  t({ "          path: " }), i(8, "{{ .Values.tokenPath }}"),
  i(0),
}),

s("helm-k8s-ctb-pod-helm", {
  t({ "spec:", "  containers:" }),
  t({ "", "  - name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {1}),
  t({ "", "    image: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {2}),
  t({ "", "    command: [\"sleep\", \"3600\"]" }),
  t({ "", "    volumeMounts:" }),
  t({ "", "    - name: token-vol" }),
  t({ "", "      mountPath: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {3}), t({ "\"" }),
  t({ "", "      readOnly: true" }),
  t({ "", "  serviceAccountName: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {4}),
  t({ "", "  volumes:" }),
  t({ "", "  - name: token-vol" }),
  t({ "", "    projected:" }),
  t({ "", "      sources:" }),
  t({ "", "      - clusterTrustBundle:" }),
  t({ "", "          name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {5}),
  t({ "", "          path: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {6}),
  t({ "", "      - clusterTrustBundle:" }),
  t({ "", "          signerName: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {7}), t({ "\"" }),
  t({ "", "          labelSelector:" }),
  t({ "", "            matchLabels:" }),
  t({ "", "              version: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {8}),
  t({ "", "          path: " }), f(function(args) return "{{ .Values." .. args[1][1] .. " }}" end, {9}),
  t({ "", "          optional: true" }),
  i(0),
}),

s("helm-k8s-csi-inline-helm", {
  t({ "spec:", "  containers:" }),
  t({ "", "  - name: {{ .Values.containerName }}" }),
  t({ "", "    image: {{ .Values.image }}" }),
  t({ "", "    volumeMounts:" }),
  t({ "", "    - mountPath: \"{{ .Values.mountMountPath }}\"" }),
  t({ "", "      name: {{ .Values.volumeName }}" }),
  t({ "", "    command: [ \"sleep\", \"1000000\" ]" }),
  t({ "", "  volumes:" }),
  t({ "", "  - name: {{ .Values.volumeName }}" }),
  t({ "", "    csi:" }),
  t({ "", "      driver: {{ .Values.driver }}" }),
  t({ "", "      volumeAttributes:" }),
  t({ "", "        {{ .Values.volumeAttributes }}" }),
  i(0),
}),

s("helm-k8s-ephemeral-pvc-helm", {
  t({ "spec:", "  containers:" }),
  t({ "", "  - name: {{ .Values.containerName }}" }),
  t({ "", "    image: {{ .Values.image }}" }),
  t({ "", "    volumeMounts:" }),
  t({ "", "    - mountPath: \"{{ .Values.mountPath }}\"" }),
  t({ "", "      name: {{ .Values.volumeName }}" }),
  t({ "", "    command: [ \"sleep\", \"1000000\" ]" }),
  t({ "", "  volumes:" }),
  t({ "", "  - name: {{ .Values.volumeName }}" }),
  t({ "", "    ephemeral:" }),
  t({ "", "      volumeClaimTemplate:" }),
  t({ "", "        metadata:" }),
  t({ "", "          labels:" }),
  t({ "", "            type: {{ .Values.volumeLabel }}" }),
  t({ "", "        spec:" }),
  t({ "", "          accessModes: [ \"{{ .Values.accessMode }}\" ]" }),
  t({ "", "          storageClassName: {{ .Values.storageClassName }}" }),
  t({ "", "          resources:" }),
  t({ "", "            requests:" }),
  t({ "", "              storage: {{ .Values.storageSize }}" }),
  i(0),
}),

s("helm-k8s-storageclass-helm", {
  t({ "apiVersion: storage.k8s.io/v1", "kind: StorageClass", "metadata:" }),
  t({ "  name: {{ .Values.name }}" }),
  t({ "  annotations:" }),
  t({ "    storageclass.kubernetes.io/is-default-class: \"{{ .Values.isDefaultClass }}\"" }),
  t({ "provisioner: {{ .Values.provisioner }}" }),
  t({ "reclaimPolicy: {{ .Values.reclaimPolicy }}" }),
  t({ "allowVolumeExpansion: {{ .Values.allowVolumeExpansion }}" }),
  t({ "mountOptions:" }),
  t({ "  - {{ .Values.mountOption }}" }),
  t({ "volumeBindingMode: {{ .Values.volumeBindingMode }}" }),
  t({ "parameters:" }),
  t({ "  guaranteedReadWriteLatency: \"{{ .Values.guaranteedReadWriteLatency }}\"" }),
  i(0),
}),

s("helm-k8s-pod-node-pvc-helm", {
  t({ "spec:" }),
  t({ "  nodeSelector:" }),
  t({ "    kubernetes.io/hostname: {{ .Values.nodeSelector.hostname }}" }),
  t({ "  volumes:" }),
  t({ "    - name: {{ .Values.volume.name }}" }),
  t({ "      persistentVolumeClaim:" }),
  t({ "        claimName: {{ .Values.volume.claimName }}" }),
  t({ "  containers:" }),
  t({ "    - name: {{ .Values.container.name }}" }),
  t({ "      image: {{ .Values.container.image }}" }),
  t({ "      ports:" }),
  t({ "        - containerPort: {{ .Values.container.port }}" }),
  t({ "          name: {{ .Values.container.portName }}" }),
  t({ "      volumeMounts:" }),
  t({ "        - mountPath: \"{{ .Values.container.mountPath }}\"" }),
  t({ "          name: {{ .Values.volume.name }}" }),
  i(0),
}),

s("helm-k8s-storageclass-helm", {
  t({ "apiVersion: storage.k8s.io/v1", "kind: StorageClass", "metadata:" }),
  t({ "  name: {{ .Values.storageClass.name }}" }),
  t({ "provisioner: {{ .Values.storageClass.provisioner }}" }),
  t({ "parameters:" }),
  t({ "  type: {{ .Values.storageClass.parameters.type }}" }),
  t({ "volumeBindingMode: {{ .Values.storageClass.volumeBindingMode }}" }),
  t({ "allowedTopologies:" }),
  t({ "- matchLabelExpressions:" }),
  t({ "  - key: {{ .Values.storageClass.allowedTopologies.key }}" }),
  t({ "    values:" }),
  t({ "    - {{ index .Values.storageClass.allowedTopologies.values 0 }}" }),
  t({ "    - {{ index .Values.storageClass.allowedTopologies.values 1 }}" }),
  i(0),
}),


s("helm-k8s-storageclass-helm", {
  t({ "apiVersion: storage.k8s.io/v1", "kind: StorageClass", "metadata:" }),
  t({ "  name: " }), i(1, "{{ .Values.storageClass.name }}"),
  t({ "provisioner: " }), i(2, "{{ .Values.storageClass.provisioner }}"),
  t({ "parameters:" }),
  t({ "  type: " }), i(3, "{{ .Values.storageClass.parameters.type }}"),
  t({ "volumeBindingMode: " }), i(4, "{{ .Values.storageClass.volumeBindingMode }}"),
  t({ "allowedTopologies:" }),
  t({ "- matchLabelExpressions:" }),
  t({ "  - key: " }), i(5, "{{ .Values.storageClass.allowedTopologies.matchLabelKey }}"),
  t({ "    values:" }),
  t({ "    - " }), i(6, "{{ index .Values.storageClass.allowedTopologies.values 0 }}"),
  t({ "    - " }), i(7, "{{ index .Values.storageClass.allowedTopologies.values 1 }}"),
  i(0),
}),

s("helm-k8s-ebs-sc-helm", {
  t({ "apiVersion: storage.k8s.io/v1", "kind: StorageClass", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "provisioner: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".provisioner }}" end, {1}),
  t({ "volumeBindingMode: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".volumeBindingMode }}" end, {1}),
  t({ "parameters:" }),
  t({ "  csi.storage.k8s.io/fstype: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.fstype }}" end, {1}),
  t({ "  type: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.type }}" end, {1}),
  t({ "  iopsPerGB: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.iopsPerGB }}" end, {1}), t({ "\"" }),
  t({ "  encrypted: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.encrypted }}" end, {1}), t({ "\"" }),
  t({ "  tagSpecification_1: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.tagSpecification_1 }}" end, {1}), t({ "\"" }),
  t({ "  tagSpecification_2: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".parameters.tagSpecification_2 }}" end, {1}), t({ "\"" }),
  t({ "allowedTopologies:" }),
  t({ "- matchLabelExpressions:" }),
  t({ "  - key: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".allowedTopologies.matchLabelKey }}" end, {1}),
  t({ "    values:" }),
  t({ "    - " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".allowedTopologies.values_0 }}" end, {1}),
  i(1, "storageClass"),
  i(0),
}),

s("helm-k8s-efs-sc-helm", {
  t({ "kind: StorageClass", "apiVersion: storage.k8s.io/v1", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "provisioner: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".provisioner }}" end, {1}),
  t({ "parameters:" }),
  t({ "  provisioningMode: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".provisioningMode }}" end, {1}),
  t({ "  fileSystemId: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".fileSystemId }}" end, {1}),
  t({ "  directoryPerms: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".directoryPerms }}" end, {1}), t({"\""}),
  i(1, "storageClass"),
  i(0),
}),

s("helm-k8s-nfs-sc-helm", {
  t({ "apiVersion: storage.k8s.io/v1", "kind: StorageClass", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "provisioner: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".provisioner }}" end, {1}),
  t({ "parameters:" }),
  t({ "  server: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".server }}" end, {1}),
  t({ "  path: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".path }}" end, {1}),
  t({ "  readOnly: \"" }), f(function(args) return "{{ .Values." .. args[1][1] .. ".readOnly }}" end, {1}), t({ "\"" }),
  i(1, "storageClass"),
  i(0),
}),

s("helm-k8s-cm-pod-helm", {
  t({
    "spec:",
    "  containers:",
    "  - name: "
  }), i(1, "demo"),
  t({
    "    image: "
  }), i(2, "alpine"),
  t({
    "    command: [\"sleep\", \"3600\"]",
    "    env:",
    "      - name: PLAYER_INITIAL_LIVES",
    "        valueFrom:",
    "          configMapKeyRef:",
    "            name: {{ .Values.configMap.name }}",
    "            key: "
  }), i(3, "player_initial_lives"),
  t({
    "      - name: UI_PROPERTIES_FILE_NAME",
    "        valueFrom:",
    "          configMapKeyRef:",
    "            name: {{ .Values.configMap.name }}",
    "            key: "
  }), i(4, "ui_properties_file_name"),
  t({
    "    volumeMounts:",
    "    - name: config",
    "      mountPath: \""
  }), i(5, "/config"), t({ "\"", "      readOnly: true" }),
  t({
    "  volumes:",
    "  - name: config",
    "    configMap:",
    "      name: {{ .Values.configMap.name }}",
    "      items:",
    "      - key: \"game.properties\"",
    "        path: \"game.properties\"",
    "      - key: \"user-interface.properties\"",
    "        path: \"user-interface.properties\""
  }),
  i(0),
}),


s("helm-k8s-dotfile-secret-helm", {
  t({ "apiVersion: v1", "kind: Secret", "metadata:" }),
  t({ "  name: {{ .Values.secret.name }}" }),
  t({ "data:" }),
  t({ "  {{ .Values.secret.fileName }}: {{ .Values.secret.fileData }}" }),
  i(0),
}),

s("helm-k8s-secret-basic-auth-helm", {
  t({ "apiVersion: v1", "kind: Secret", "metadata:" }),
  t({ "  name: {{ .Values.secret.name }}" }),
  t({ "type: kubernetes.io/basic-auth" }),
  t({ "stringData:" }),
  t({ "  username: {{ .Values.secret.username }}" }),
  t({ "  password: {{ .Values.secret.password }}" }),
  i(0),
}),

s("helm-k8s-secret-ssh-auth-helm", {
  t({ "apiVersion: v1", "kind: Secret", "metadata:" }),
  t({ "  name: {{ .Values.secret.name }}" }),
  t({ "type: kubernetes.io/ssh-auth" }),
  t({ "data:" }),
  t({ "  ssh-privatekey: |" }),
  t({ "    {{ .Values.secret.sshPrivateKey | indent 4 }}" }),
  i(0),
}),

s("helm-k8s-secret-tls-helm", {
  t({ "apiVersion: v1", "kind: Secret", "metadata:" }),
  t({ "  name: {{ .Values.secret.name }}" }),
  t({ "type: kubernetes.io/tls" }),
  t({ "data:" }),
  t({ "  tls.crt: |" }),
  t({ "    {{ .Values.secret.tlsCrt | indent 4 }}" }),
  t({ "  tls.key: |" }),
  t({ "    {{ .Values.secret.tlsKey | indent 4 }}" }),
  i(0),
}),

s("helm-k8s-secret-bootstrap-token-helm", {
  t({ "apiVersion: v1", "kind: Secret", "metadata:" }),
  t({ "  name: {{ .Values.secret.name }}" }),
  t({ "  namespace: {{ .Values.secret.namespace }}" }),
  t({ "type: bootstrap.kubernetes.io/token" }),
  t({ "data:" }),
  t({ "  auth-extra-groups: {{ .Values.secret.data.authExtraGroups }}" }),
  t({ "  expiration: {{ .Values.secret.data.expiration }}" }),
  t({ "  token-id: {{ .Values.secret.data.tokenId }}" }),
  t({ "  token-secret: {{ .Values.secret.data.tokenSecret }}" }),
  t({ "  usage-bootstrap-authentication: {{ .Values.secret.data.usageBootstrapAuthentication }}" }),
  t({ "  usage-bootstrap-signing: {{ .Values.secret.data.usageBootstrapSigning }}" }),
  i(0),
}),

s("helm-k8s-secret-optional-mount-helm", {
  t({ "spec:", "  containers:" }),
  t({ "  - name: {{ .Values.container.name }}" }),
  t({ "    image: {{ .Values.container.image }}" }),
  t({ "    volumeMounts:" }),
  t({ "    - name: {{ .Values.volume.name }}" }),
  t({ "      mountPath: \"{{ .Values.volume.mountPath }}\"" }),
  t({ "      readOnly: true" }),
  t({ "  volumes:" }),
  t({ "  - name: {{ .Values.volume.name }}" }),
  t({ "    secret:" }),
  t({ "      secretName: {{ .Values.volume.secretName }}" }),
  t({ "      optional: true" }),
  i(0),
}),

s("helm-k8s-pod-multi-container-resources-helm", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: {{ .Values.pod.name }}" }),
  t({ "spec:", "  containers:" }),
  -- First container
  t({ "", "  - name: {{ .Values.containers.app.name }}" }),
  t({ "", "    image: {{ .Values.containers.app.image }}" }),
  t({ "", "    resources:", "      requests:" }),
  t({ "", "        memory: \"{{ .Values.containers.app.resources.requests.memory }}\"" }),
  t({ "", "        cpu: \"{{ .Values.containers.app.resources.requests.cpu }}\"" }),
  t({ "      limits:" }),
  t({ "        memory: \"{{ .Values.containers.app.resources.limits.memory }}\"" }),
  t({ "        cpu: \"{{ .Values.containers.app.resources.limits.cpu }}\"" }),
  -- Second container
  t({ "", "  - name: {{ .Values.containers.logAggregator.name }}" }),
  t({ "    image: {{ .Values.containers.logAggregator.image }}" }),
  t({ "    resources:", "      requests:" }),
  t({ "        memory: \"{{ .Values.containers.logAggregator.resources.requests.memory }}\"" }),
  t({ "        cpu: \"{{ .Values.containers.logAggregator.resources.requests.cpu }}\"" }),
  t({ "      limits:" }),
  t({ "        memory: \"{{ .Values.containers.logAggregator.resources.limits.memory }}\"" }),
  t({ "        cpu: \"{{ .Values.containers.logAggregator.resources.limits.cpu }}\"" }),
  i(0),
}),


s("helm-k8s-kubeconfig-proxy-helm", {
  t({ "apiVersion: v1", "kind: Config", "" }),
  t({ "clusters:" }),
  t({ "- cluster:" }),
  t({ "    proxy-url: {{ .Values.proxyUrl }}" }),
  t({ "    server: {{ .Values.server }}" }),
  t({ "  name: {{ .Values.clusterName }}" }),
  t({ "", "users:" }),
  t({ "- name: {{ .Values.userName }}" }),
  t({ "", "contexts:" }),
  t({ "- context:" }),
  t({ "  name: {{ .Values.contextName }}" }),
  i(0),
}),

s("helm-k8s-secret-pod-helm", {
  t({ "spec:", "  volumes:" }),
  t({ "    - name: " }), i(1, "secretVolumeName"),
  t({ "      secret:", "        secretName: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".secretName }}"),
  t({ "  containers:", "    - name: " }), i(2, "containerName"),
  t({ "      image: {{ .Values." }), f(function(args) return args[2][1] end, {2}), t(".image }}"),
  t({ "      command:" }),
  t({ "        - ls", "        - \"-l\"", "        - \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".mountPath }}\"" ),
  t({ "      volumeMounts:", "        - name: " }), f(function(args) return args[1][1] end, {1}),
  t({ "", "          readOnly: true", "          mountPath: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".mountPath }}\"" ),
  i(0),
}),


s("helm-clusterrolebinding-sample-spec", {
  t({ "apiVersion: rbac.authorization.k8s.io/v1", "kind: ClusterRoleBinding", "metadata:" }),
  t("  name: {{ template \""),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""),
  i(2, "chartName"),
  t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".name }}\""),
  t({ "", "subjects:" }),
  t("  - kind: {{ .Values."),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".rbac.subject.kind }}"),
  t("    name: {{ .Values."),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".rbac.subject.name }}"),
  t("    apiGroup: {{ .Values."),
  f(function(args)
    return args[1][1]
  end, {1}),
  t(".rbac.subject.apiGroup }}"),
  t({ "", "roleRef:" }),
  t("  kind: ClusterRole"),
  t("  name: {{ template \""),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}),
  t(".fullname\" . }}"),
  t("  apiGroup: rbac.authorization.k8s.io"),
  i(0),
}),


s("helm-cronjob-sample-spec", {
  t({ "apiVersion: batch/v1", "kind: CronJob", "metadata:" }),
  t({ "  name: {{ template \"" }),
  f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, { 1, 2 }),
  t(".fullname\" . }}"),
  t({ "", "  labels:" }),
  t("    app: {{ template \""), i(2, "chartName"), t(".name\" . }}"),
  t({ "", "    component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "    release: {{ .Release.Name }}" }),
  t({ "", "spec:" }),
  t({ "", "  schedule: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".schedule }}\""),
  t({ "", "  successfulJobsHistoryLimit: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".successfulJobsHistoryLimit | default 3 }}"),
  t({ "", "  failedJobsHistoryLimit: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".failedJobsHistoryLimit | default 1 }}"),
  t({ "", "  jobTemplate:" }),
  t({ "", "    spec:" }),
  t({ "", "      backoffLimit: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".backoffLimit | default 6 }}"),
  t({ "", "      template:" }),
  t({ "", "        metadata:" }),
  t({ "", "          labels:" }),
  t("            app: {{ template \""), f(function(args)
    return args[2][1] .. "." .. args[1][1]
  end, {1, 2}), t(".name\" . }}"),
  t({ "", "            component: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".name }}\""),
  t({ "", "            release: {{ .Release.Name }}" }),
  t({ "", "        spec:" }),
  t({ "", "          restartPolicy: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".restartPolicy | default \"OnFailure\" }}"),
  t({ "", "          containers:" }),
  t({ "", "            - name: {{ .Chart.Name }}" }),
  t({ "", "              image: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".image.repository }}:{{ .Values."),
  f(function(args) return args[1][1] end, {1}),
  t(".image.tag | default .Chart.AppVersion }}\""),
  t({ "", "              imagePullPolicy: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".image.pullPolicy }}"),
  t({ "", "              command: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".command | toJson }}"),
  t({ "", "              args: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t(".args | toJson }}"),
  i(0),
}),




s("helm-service-spec", {
    t("apiVersion: v1"),
    t({"", "kind: Service"}),
    t({"", "metadata:"}),
    t({"", "\t{{- if .Values."}), i(1, "value_key"), t(".service.annotations }}"),
    t({"", "\t  annotations:"}),
    t({"", "\t{{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t(".service.annotations | indent 4 }}"),
    t({"", "\t{{- end }}"}),
    t({"", "\t  labels:"}),
    t({"", "\t{{- if .Values."}), i(1), t(".service.labels }}"),
    t({"", "\t{{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t(".service.labels | indent 4 }}"),
    t({"", "\t{{- end }}"}),
    t({"", "\t\tapp: "}), t("{{ template \""), i(2, "name"), t("\" . }}"),
    t({"", "\t\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}"}),
    t({"", "\t\tcomponent: \""}), t("{{ .Values."), f(function(args) return args[1][1] end, {1}), t(".name }}\""),
    t({"", "\t\theritage: {{ .Release.Service }}"}),
    t({"", "\t\trelease: {{ .Release.Name }}"}),
    t({"", "\t  name: "}), t("{{ template \""), i(3, "chartName"), t(".${1:value_key}.fullname\" . }}"),
    t({"", "# spec"}),
    i(0),
  }),

   s("helm-service-spec1", {
    t("apiVersion: v1"),
    t({"", "kind: Service"}),
    t({"", "metadata:"}),
    t({"", "\t{{- if .Values."}), i(1, "value_key"), t(".service.annotations }}"),
    t({"", "\t  annotations:"}),
    t({"", "\t{{ toYaml .Values."}), rep(1), t(".service.annotations | indent 4 }}"),
    t({"", "\t{{- end }}"}),
    t({"", "\t  labels:"}),
    t({"", "\t{{- if .Values."}), rep(1), t(".service.labels }}"),
    t({"", "\t{{ toYaml .Values."}), rep(1), t(".service.labels | indent 4 }}"),
    t({"", "\t{{- end }}"}),
    t({"", "\t\tapp: "}), t("{{ template \""), i(2, "name"), t("\" . }}"),
    t({"", "\t\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}"}),
    t({"", "\t\tcomponent: \""}), t("{{ .Values."), rep(1), t(".name }}\""),
    t({"", "\t\theritage: {{ .Release.Service }}"}),
    t({"", "\t\trelease: {{ .Release.Name }}"}),
    t({"", "\t  name: "}), t("{{ template \""), i(3, "chartName"), t("."), rep(1), t(".fullname\" . }}"),
    t({"", "# spec"}),
    i(0),
  }),

  -- annotations_spec
  s("helm-annotations_spec", {
    t("{{- if .Values."), i(1, "component"), t(".service.annotations }}"),
    t({ "", "  annotations:" }),
    t("  {{ toYaml .Values."), rep(1), t(".service.annotations | indent 4 }}"),
    t({ "", "{{- end }}" }),
    t({ "", "" }),
    i(0),
  }),

s("helm-labels-spec", {
    t("  labels:"),
    t({ "", "  {{- if .Values." }), i(1, "component"), t(".service.labels }}" ),
    t({ "", "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.labels | indent 4 }}" ),
    t({ "", "  {{- end }}" }),
    t({ "", "    app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
    t({ "", "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}" }),
    t({ "", "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
    t({ "", "    heritage: {{ .Release.Service }}" }),
    t({ "", "    release: {{ .Release.Name }}" }),
    t({ "", "  name: {{ template \"" }), f(function(args) return args[1][1] end, {2}), t("."), f(function(args) return args[1][1] end, {1}), t(".fullname\" . }}" ),
    i(0)
  }),

  s("helm-service-spec", {
    t("spec:"),
    t({ "", "  type: \"{{ .Values." }), i(1, "component"), t(".service.type }}\"" ),
    t({ "", "  clusterIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.clusterIP }}\"" ),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs }}" ),
    t({ "", "  externalIPs:", "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs | indent 4 }}" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}" ),
    t({ "", "  loadBalancerIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}\"" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges }}" ),
    t({ "", "  loadBalancerSourceRanges:", "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges | indent 4 }}" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values." }),
    f(function(args) return args[1][1] end, {1}), t(".service.externalTrafficPolicy) }}" ),
    t({ "", "  externalTrafficPolicy: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalTrafficPolicy }}\"" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values." }),
    f(function(args) return args[1][1] end, {1}), t(".service.healthCheckNodePort) }}" ),
    t({ "", "  healthCheckNodePort: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.healthCheckNodePort }}" ),
    t({ "", "  {{- end }}" }),

    i(0),
  }),

  s("helm-ports-spec", {
    t("  ports:"),
    t({"", "  - port: "}), i(1, "80"),
    t({ "", "    targetPort: " }), i(2, "80"),
    t({ "", "    protocol: " }), i(3, "TCP"),
    t({ "", "    name: " }), i(4, "http"),
    i(0)
  }),

  s("helm-portHTTP-spec", {
    t("  - name: http"),
    t({"", "    port: 80"}),
    t({"", "    protocol: TCP"}),
    t({"", "    targetPort: {{ .Values."}), i(1, "value_key"), t(".service.targetPorts.http }}"),
    t({"", "    {{- if (and (eq .Values."}), f(function(args) return args[1][1] end, {1}),
    t('.service.type "NodePort") (not (empty .Values.'),
    f(function(args) return args[1][1] end, {1}),
    t(".service.nodePorts.http))) }}"),
    t({"", "    nodePort: {{ .Values."}), f(function(args) return args[1][1] end, {1}),
    t(".service.nodePorts.http }}"),
    t({"", "    {{- end }}"}),
    i(0),
  }),

   s("helm-portHTTPS-spec", {
    t("  - name: https"),
    t({"", "    port: 443"}),
    t({"", "    protocol: TCP"}),
    t({"", "    targetPort: {{ .Values."}), i(1, "value_key"), t(".service.targetPorts.https }}"),
    t({"", "    {{- if (and (eq .Values."}),
    f(function(args) return args[1][1] end, {1}),
    t('.service.type "NodePort") (not (empty .Values.'),
    f(function(args) return args[1][1] end, {1}),
    t(".service.nodePorts.https))) }}"),
    t({"", "    nodePort: {{ .Values."}),
    f(function(args) return args[1][1] end, {1}),
    t(".service.nodePorts.https }}"),
    t({"", "    {{- end }}"}),
    i(0),
  }),

  s("helm-portTCP-spec", {
    t("  {{- range $key, $value := .Values."), i(1, "tcp"), t(" }}"),
    t({"", "    - name: \"{{ $key }}-tcp\""}),
    t({"", "      port: {{ $key }}"}),
    t({"", "      protocol: TCP"}),
    t({"", "      targetPort: \"{{ $key }}-tcp\""}),
    t({"", "  {{- end }}"}),
    i(0),
  }),


  s("helm-portUDP-spec", {
    t("  {{- range $key, $value := .Values."), i(1, "udp"), t(" }}"),
    t({"", "    - name: \"{{ $key }}-udp\""}),
    t({"", "      port: {{ $key }}"}),
    t({"", "      protocol: UDP"}),
    t({"", "      targetPort: \"{{ $key }}-udp\""}),
    t({"", "  {{- end }}"}),
    i(0),
  }),


  s("helm-selector-spec", {
    t("selector:"),
    t({"", "  app: {{ template \""}), i(2, "chartName"), t(".name\" . }}"),
    t({"", "  component: \"{{ .Values."}), i(1, "value_key"), t(".name }}\""),
    t({"", "  release: {{ .Release.Name }}"}),
    t({"", "  "}), i(0),
  }),

s("helm-service-spec", {
    t("spec:"),
    t({ "", "  type: \"{{ .Values." }), i(1, "component"), t(".service.type }}\"" ),
    t({ "", "  clusterIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.clusterIP }}\"" ),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs }}" ),
    t({ "", "  externalIPs:", "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalIPs | indent 4 }}" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}" ),
    t({ "", "  loadBalancerIP: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerIP }}\"" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges }}" ),
    t({ "", "  loadBalancerSourceRanges:", "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.loadBalancerSourceRanges | indent 4 }}" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values." }),
    f(function(args) return args[1][1] end, {1}), t(".service.externalTrafficPolicy) }}" ),
    t({ "", "  externalTrafficPolicy: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.externalTrafficPolicy }}\"" ),
    t({ "", "  {{- end }}" }),

    t({ "", "  {{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values." }),
    f(function(args) return args[1][1] end, {1}), t(".service.healthCheckNodePort) }}" ),
    t({ "", "  healthCheckNodePort: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".service.healthCheckNodePort }}" ),
    t({ "", "  {{- end }}" }),

    i(0),
  }),


  s("helm-k8s-deployment-helm", {
  t({ "{{- if .Values.component.enabled }}", "apiVersion: apps/v1", "kind: Deployment", "metadata:" }),
  t({ "  name: " }), i(1, '{{ template "chartName.component.fullname" . }}'),
  t({ "  labels:" }),
  t({ "    app: " }), i(2, '{{ template "chartName.name" . }}'),
  t({ "    chart: " }), i(3, '{{ .Chart.Name }}-{{ .Chart.Version }}'),
  t({ "    component: \"" }), i(4, '{{ .Values.component.name }}'), t({ "\"" }),
  t({ "    heritage: " }), i(5, '{{ .Release.Service }}'),
  t({ "    release: " }), i(6, '{{ .Release.Name }}'),
  t({ "spec:" }),
  t({ "  replicas: " }), i(7, '{{ .Values.component.replicaCount | default 1 }}'),
  t({ "  selector:", "    matchLabels:" }),
  t({ "      app: " }), rep(2),
  t({ "      component: \"" }), rep(4), t({ "\"" }),
  t({ "  template:", "    metadata:", "      labels:" }),
  t({ "        app: " }), rep(2),
  t({ "        component: \"" }), rep(4), t({ "\"" }),
  t({ "    spec:", "      containers:" }),
  t({ "        - name: " }), rep(4),
  t({ "          image: \"" }), i(8, '{{ .Values.component.image.repository }}:{{ .Values.component.image.tag }}'), t({ "\"" }),
  t({ "          imagePullPolicy: " }), i(9, '{{ .Values.component.image.pullPolicy | default "IfNotPresent" }}'),
  t({ "          ports:", "            - containerPort: " }), i(10, '{{ .Values.component.port | default 80 }}'),
  t({ "          livenessProbe:", "            httpGet:" }),
  t({ "              path: " }), i(11, '{{ .Values.livenessProbe.path | default "/" }}'),
  t({ "              port: " }), i(12, '{{ .Values.livenessProbe.port | default 80 }}'),
  t({ "            initialDelaySeconds: " }), i(13, '10'),
  t({ "            periodSeconds: " }), i(14, '10'),
  t({ "            timeoutSeconds: " }), i(15, '1'),
  t({ "            failureThreshold: " }), i(16, '3'),
  t({ "            successThreshold: " }), i(17, '1'),
  t({ "          readinessProbe:", "            httpGet:" }),
  t({ "              path: " }), i(18, '{{ .Values.readinessProbe.path | default "/" }}'),
  t({ "              port: " }), i(19, '{{ .Values.readinessProbe.port | default 80 }}'),
  t({ "            initialDelaySeconds: " }), i(20, '10'),
  t({ "            periodSeconds: " }), i(21, '10'),
  t({ "            timeoutSeconds: " }), i(22, '1'),
  t({ "            failureThreshold: " }), i(23, '3'),
  t({ "            successThreshold: " }), i(24, '1'),
  t({ "          resources:" }),
  t({ "            " }), i(25, '{{ toYaml .Values.component.resources | nindent 12 }}'),
  t({ "          " }),
  t({ "          {{- if .Values.component.persistentVolumeClaim.enabled }}" }),
  t({ "          volumeMounts:" }),
  t({ "            - name: " }), i(26, '{{ .Values.component.persistentVolumeClaim.name }}'),
  t({ "              mountPath: " }), i(27, '{{ .Values.component.persistentVolumeClaim.mountPath }}'),
  t({ "          {{- end }}" }),
  t({ "      {{- if .Values.component.persistentVolumeClaim.enabled }}" }),
  t({ "      volumes:" }),
  t({ "        - name: " }), rep(26),
  t({ "          persistentVolumeClaim:" }),
  t({ "            claimName: " }), i(28, '{{ .Values.component.persistentVolumeClaim.claimName }}'),
  t({ "      {{- end }}" }),
  t({ "      {{- if .Values.component.nodeSelector }}" }),
  t({ "      nodeSelector:" }),
  t({ "        " }), i(29, '{{ toYaml .Values.component.nodeSelector | nindent 8 }}'),
  t({ "      {{- end }}" }),
  t({ "      {{- if .Values.component.tolerations }}" }),
  t({ "      tolerations:" }),
  t({ "        " }), i(30, '{{ toYaml .Values.component.tolerations | nindent 8 }}'),
  t({ "      {{- end }}" }),
  t({ "      {{- if .Values.component.affinity }}" }),
  t({ "      affinity:" }),
  t({ "        " }), i(31, '{{ toYaml .Values.component.affinity | nindent 8 }}'),
  t({ "      {{- end }}" }),
  t({ "{{- end }}" }),
}),


 s("helm-deploy-spec", {
  t({ "{{- if .Values." }), i(1, "component"), t(".enabled }}" ),
  t({ "", "apiVersion: extensions/v1beta1", "kind: Deployment", "metadata:" }),
  t({ "  labels:", "    app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
  t({ "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}" }),
  t({ "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
  t({ "    heritage: {{ .Release.Service }}" }),
  t({ "    release: {{ .Release.Name }}" }),
  t({ "  name: {{ template \"" }), f(function(args) return args[1][1] end, {2}), t("."), f(function(args) return args[1][1] end, {1}), t(".fullname\" . }}" ),
  i(0),
}),


  s("helm-spec-spec", {
    t({ "spec:", "  replicas: {{ .Values." }), i(1, "component"), t(".replicaCount }}" ),
    t({ "  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}", "  template:", "    metadata:" }),
    t({ "    {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".podAnnotations }}" ),
    t({ "      annotations:", "      {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".podAnnotations | indent 8 }}" ),
    t({ "    {{- end }}" }),
    t({ "      labels:", "        app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
    t({ "        component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
    t({ "        release: {{ .Release.Name }}" }),
    t({ "        {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".podLabels }}" ),
    t({ "        {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".podLabels | indent 8 }}" ),
    t({ "        {{- end }}" }),
    t({ "    spec:" }),
    t({ "      {{- if .Values.imagePullSecrets }}" }),
    t({ "      imagePullSecrets:", "      {{ toYaml .Values.imagePullSecrets | indent 8 }}" }),
    t({ "      {{- end }}" }),
    i(0),
  }),

  s("helm-imagePullSecrets-spec", {
    t({ "  {{- if .Values.imagePullSecrets }}" }),
    t({ "  imagePullSecrets:", "  {{ toYaml .Values.imagePullSecrets | indent 8 }}" }),
    t({ "  {{- end }}" }),
    i(0),
  }),


  s("helm-imagePullPolicy-spec", {
  t("imagePullPolicy: {{ .Values."),
  i(1, "imagePullPolicy"),
  t(" }}"),
  t({ "", "" }),
  i(0),
}),

  s("helm-containers-spec", {
    t("containers:"),
    t({ "", "  - name: {{ template \"" }),
    i(2, "chartName"),
    t(".name\" . }}-{{ .Values."),
    i(1, "component"),
    t(".name }}"),
    t({ "", "    image: \"{{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
    t(".image.repository }}:{{ .Values."),
    f(function(args) return args[1][1] end, {1}),
    t(".image.tag }}\""),
    t({ "", "    imagePullPolicy: \"{{ .Values." }),
    f(function(args) return args[1][1] end, {1}),
    t(".image.pullPolicy }}\""),
    t({ "", "" }),
    i(0),
  }),

  s("helm-args-spec", {
    t("args:"),
    t({ "\t{{- range $key, $value := .Values." }),
    i(1, "component"),
    t(".extraArgs }}" ),
    t({ "\t  {{- if $value }}" }),
    t({ "\t  - --{{ $key }}={{ $value }}" }),
    t({ "\t  {{- else }}" }),
    t({ "\t  - --{{ $key }}" }),
    t({ "\t  {{- end }}" }),
    t({ "\t{{- end }}" }),
    i(0),
  }),

  s("helm-livenessProbe-spec", {
    t({
      "livenessProbe:",
      "\thttpGet:",
      "\t\tpath: /healthz",
      "\t\tport: 8080",
      "\t\tscheme: HTTP",
      "\tinitialDelaySeconds: 30",
      "\ttimeoutSeconds: 5",
    }),
    i(0),
  }),

   s("helm-readinessProbe-spec", {
    t({
      "readinessProbe:",
      "\thttpGet:",
      "\t\tpath: /go/api/v1/health",
      "\t\tport: 8153",
      "\tinitialDelaySeconds: {{ .Values.",
    }), i(1, "component"), t(".healthCheck.initialDelaySeconds }}"),
    t({ "", "\tperiodSeconds: {{ .Values." }), rep(1), t(".healthCheck.periodSeconds }}" ),
    t({ "", "\tfailureThreshold: {{ .Values." }), rep(1), t(".healthCheck.failureThreshold }}" ),
    t({ "", "" }),
    i(0),
  }),

  s("helm-resources-spec", {
    t("resources:"),
    t({ "", "\t{{ toYaml .Values." }), i(1, "component"), t(".resources | indent 12 }}" ),
    t({ "", "" }),
    i(0),
  }),

  s("helm-nodeselector-spec", {
    t("\t{{- if .Values."), i(1, "component"), t(".nodeSelector }}"),
    t({ "", "\t  nodeSelector:" }),
    t({ "", "\t{{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".nodeSelector | indent 8 }}" ),
    t({ "", "\t{{- end }}" }),
    i(0),
  }),

  s("helm-tolerations-spec", {
    t("\t{{- if .Values."), i(1, "component"), t(".tolerations }}"),
    t({ "", "\t  tolerations:" }),
    t({ "", "\t{{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".tolerations | indent 8 }}" ),
    t({ "", "\t{{- end }}" }),
    i(0),
  }),

  s("helm-affinity-spec", {
    t("\t{{- if .Values."), i(1, "component"), t(".affinity }}"),
    t({ "", "\t  affinity:" }),
    t({ "", "\t{{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".affinity | indent 8 }}" ),
    t({ "\t{{- end }}" }),
    t({ "\t  terminationGracePeriodSeconds: 60" }),
    t({ "\t{{- end }}" }),
    i(0),
  }),

   s("helm-PersistentVolumeClaim-spec", {
    t({
      "\tkind: PersistentVolumeClaim",
      "\tapiVersion: v1",
      "\tmetadata:",
      "\t  name: {{ template \""
    }),
    i(2, "chartName"),
    t({ ".$1.fullname\" . }", "\t  labels:", "\t\tapp: {{ template \"" }),
    f(function(args) return args[1][1] end, {2}),
    t({ ".name\" . }}", "\t\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"", "\t\trelease: \"{{ .Release.Name }}\"", "\t\theritage: \"{{ .Release.Service }}\"", "\tspec:", "\t  accessModes:", "\t\t- {{ .Values." }),
    i(1, "component"),
    t(".persistence.accessMode | quote }}", "\t  resources:", "\t\trequests:", "\t\t  storage: {{ .Values."),
    rep(1),
    t(".persistence.size | quote }}"),
    t({ "\t{{- if .Values." .. "component" .. ".persistence.storageClass }}",
        "\t{{- if (eq \"-\" .Values." .. "component" .. ".persistence.storageClass) }}",
        "\t  storageClassName: \"\"",
        "\t{{- else }}",
        "\t  storageClassName: \"{{ .Values." }),
    rep(1),
    t(".persistence.storageClass }}\""),
    t({ "\t{{- end }}", "\t{{- end }}", "\t{{- end }}", "\t{{- end }}" }),
    i(0),
  }),

   s("helm-configMap-spec", {
    t({ "\t{{- if .Values." }),
    i(1, "value_key"),
    t({ ".enabled -}}", "\t  apiVersion: v1", "\t  kind: ConfigMap", "\t  metadata:", "\t\tname: {{ template \"" }),
    i(2, "chartName"),
    t({ ".fullname\" . }}-" }),
    rep(1),
    t({ "-config", "\t\tlabels:", "\t\t  app: {{ template \"" }),
    rep(2),
    t({ ".name\" . }}", "\t\t  chart: {{ .Chart.Name }}-{{ .Chart.Version }}", "\t\t  heritage: {{ .Release.Service }}", "\t\t  release: {{ .Release.Name }}", "\t  data:" }),
    t({ "\t\t" }),
    i(3, "nameOfConfigFile"),
    t({ ".conf: |", "\t\t  # data goes here", "\t{{- end -}}" }),
    i(0),
  }),

s("helm-initContainers-spec", {
  t({ "\t{{- if .Values." }),
  i(1, "value_key"),
  t({ ".initContainers }}", "\t  initContainers:", "\t  - name: wait-workers" }),
  t({ "\n\t\timage: \"" }),
  f(function(args) 
    return "{{ .Values." .. args[1][1] .. ".image.repository }}:{{ .Values." .. args[1][1] .. ".image.tag }}" 
  end, {1}),
  t({ "\"" }),
  t({ "\n\t\timagePullPolicy: " }),
  f(function(args) 
    return "{{ .Values." .. args[1][1] .. ".image.pullPolicy }}" 
  end, {1}),
  t({
    "\n\t\t# env",
    "\t\tcommand:",
    "\t\t  - sh",
    "\t\t  - -c",
    "\t\t  - |",
    "\n\t\t\tuntil printf \".\" && nc -z -w 2 ",
    "{{ template \""
  }),
  i(2, "chartName"),
  t({ ".fullname\" . }} " }),
  t({ "{{ .Values.postgresql.service.port }}; do" }),
  t({
    "\n\t\t\t\tsleep 2;",
    "\t\t\tdone;",
    "\n\t\t\techo 'PostgreSQL OK'",
    "\n\t\t# args",
    "\t{{- end }}"
  }),
  i(0),
}),


  s("helm-pvc-spec", {
    t({
      "kind: PersistentVolumeClaim",
      "apiVersion: v1",
      "metadata:",
      "  name: {{ template \"",
    }),
    i(2, "chartName"),
    t(".fullname\" . }}"),
    t({
      "",
      "  labels:",
      "    chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"",
      "    release: \"{{ .Release.Name }}\"",
      "    heritage: \"{{ .Release.Service }}\"",
      "    app: {{ template \"",
    }),
    f(function(args) return args[1][1] .. ".fullname" end, {2}),
    t(" . }}"),
    t({
      "",
      "spec:",
      "  accessModes:",
      "    - {{ .Values.persistence.accessMode | quote }}",
      "  resources:",
      "    requests:",
      "      storage: {{ .Values.persistence.size | quote }}",
      "{{- if .Values.persistence.storageClass }}",
      "{{- if (eq \"-\" .Values.persistence.storageClass) }}",
      "  storageClassName: \"\"",
      "{{- else }}",
      "  storageClassName: \"{{ .Values.persistence.storageClass }}\"",
      "{{- end }}",
      "{{- end }}",
      "{{- end }}",
    }),
    i(0),
  }),

 s("helm-pv-nfs-spec", {
    t({
      "\tapiVersion: v1",
      "\tkind: PersistentVolume",
      "\tmetadata:",
      "\t  name: {{ template \"",
    }),
    i(2, "chartName"),
    t({".fullname\" . }}-data-pv"}),
    t({
      "\t  labels:",
      "\t\tapp: {{ template \"",
    }),
    rep(2),
    t({".name\" . }}"}),
    t({
      "\t\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}",
      "\t\theritage: {{ .Release.Service }}",
      "\t\trelease: {{ .Release.Name }}",
      "\t\tid: {{ template \"",
    }),
    f(function(args) return args[1][1] .. ".name" end, {2}),
    t({"-data-pv\""}),
    t({
      "\t\ttype: nfs-volume",
      "\tspec:",
      "\t  capacity:",
      "\t\tstorage: {{ .Values.",
    }),
    i(1, "value_key"),
    t({".persistence.nfs.capacity }}"}),
    t({
      "\t  accessModes:",
      "\t  - ReadWriteOnce",
      "\t  persistentVolumeReclaimPolicy: Retain",
      "\t  nfs:",
      "\t\tserver: {{ .Values.",
    }),
    rep(1),
    t({".persistence.nfs.ip }}"}),
    t({
      "\t\tpath: \"{{ .Values.",
    }),
    f(function(args) return args[1][1] end, {1}),
    t({".persistence.nfs.haDataMount }}\""}),
    t({
      "\t\treadOnly: false",
      "\t",
    }),
    i(0),
  }),


s("helm-pvc-hostpath-spec", {
  t({ "{{- if and .Values.persistence.enabled .Values.persistence." }),
  i(1, "value_key"),
  t({ ".hostPath (not .Values.persistence." }),
  rep(1),
  t({ ".existingClaim) -}}" }),
  t({ "\napiVersion: v1", "kind: PersistentVolume", "metadata:" }),
  t({ "  name: {{ template \"" }),
  i(2, "chartName"),
  t({ ".fullname\" . }}-" }),
  rep(1),
  t({ "", "spec:", "  accessModes:", "    - {{ .Values.persistence." }),
  rep(1),
  t({ ".accessMode | quote }}", "  capacity:", "    storage: {{ .Values.persistence." }),
  rep(1),
  t({ ".size | quote }}", "  hostPath:", "    path: {{ .Values.persistence." }),
  rep(1),
  t({ ".hostPath | quote }}", "{{- end -}}" }),
  i(0),
}),


 s("helm-deploy-values-helm", {
  i(1, "componentName"),
  t({ ":" }),
  t({ "\n  name: " }), rep(1),
  t({
    "\n  image:",
    "\n    repository: {{ .Values.",
  }), rep(1),
  t({ ".image.repository | default \"\" }}",
    "\n    tag: {{ .Values.",
  }), rep(1),
  t({ ".image.tag | default \"\" }}",
    "\n    pullPolicy: {{ .Values.",
  }), rep(1),
  t({ ".image.pullPolicy | default \"IfNotPresent\" }}",
    "\n  hostNetwork: {{ .Values.",
  }), rep(1),
  t({ ".hostNetwork | default false }}",
    "\n  dnsPolicy: {{ .Values.",
  }), rep(1),
  t({ ".dnsPolicy | default \"ClusterFirst\" }}",
    "\n  daemonset:",
    "\n    useHostPort: {{ .Values.",
  }), rep(1),
  t({ ".daemonset.useHostPort | default false }}",
    "\n  podLabels: {{ toYaml .Values." }), rep(1),
  t({ ".podLabels | nindent 4 | default \"{}\" }}",
    "\n  scope:",
    "\n    enabled: {{ .Values." }), rep(1),
  t({ ".scope.enabled | default false }}",
    "\n    namespace: {{ .Values." }), rep(1),
  t({ ".scope.namespace | default .Release.Namespace }}",
    "\n  extraArgs: {{ toYaml .Values." }), rep(1),
  t({ ".extraArgs | nindent 4 | default \"{}\" }}",
    "\n  extraEnvs: {{ toYaml .Values." }), rep(1),
  t({ ".extraEnvs | nindent 4 | default \"[]\" }}",
    "\n  kind: {{ .Values." }), rep(1),
  t({ ".kind | default \"Deployment\" }}",
    "\n  updateStrategy: {{ toYaml .Values." }), rep(1),
  t({ ".updateStrategy | nindent 4 | default \"{}\" }}",
    "\n  minReadySeconds: {{ .Values." }), rep(1),
  t({ ".minReadySeconds | default 0 }}",
    "\n  tolerations: {{ toYaml .Values." }), rep(1),
  t({ ".tolerations | nindent 4 | default \"[]\" }}",
    "\n  affinity: {{ toYaml .Values." }), rep(1),
  t({ ".affinity | nindent 4 | default \"{}\" }}",
    "\n  nodeSelector: {{ toYaml .Values." }), rep(1),
  t({ ".nodeSelector | nindent 4 | default \"{}\" }}",
    "\n  podAnnotations: {{ toYaml .Values." }), rep(1),
  t({ ".podAnnotations | nindent 4 | default \"{}\" }}",
    "\n  replicaCount: {{ .Values." }), rep(1),
  t({ ".replicaCount | default 1 }}",
    "\n  minAvailable: {{ .Values." }), rep(1),
  t({ ".minAvailable | default 1 }}",
    "\n  resources: {{ toYaml .Values." }), rep(1),
  t({ ".resources | nindent 4 | default \"{}\" }}",
    "\n  autoscaling:",
    "\n    enabled: {{ .Values." }), rep(1),
  t({ ".autoscaling.enabled | default false }}",
    "\n  extraContainers: {{ toYaml .Values." }), rep(1),
  t({ ".extraContainers | nindent 4 | default \"{}\" }}",
    "\n  extraVolumeMounts: {{ toYaml .Values." }), rep(1),
  t({ ".extraVolumeMounts | nindent 4 | default \"{}\" }}",
    "\n  extraVolumes: {{ toYaml .Values." }), rep(1),
  t({ ".extraVolumes | nindent 4 | default \"{}\" }}",
    "\n  extraInitContainers: {{ toYaml .Values." }), rep(1),
  t({ ".extraInitContainers | nindent 4 | default \"[]\" }}",
    "\n  lifecycle: {{ toYaml .Values." }), rep(1),
  t({ ".lifecycle | nindent 4 | default \"{}\" }}",
    "\nrevisionHistoryLimit: {{ .Values." }), rep(1),
  t({ ".revisionHistoryLimit | default 10 }}" }),
  i(0),
}),

s("helm-rbac-values-helm", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "",
    "  rbac:",
    "    create: {{ .Values.rbac.create | default true }}",
    "  serviceAccount:",
    "    create: {{ .Values.serviceAccount.create | default true }}",
    "    name: {{ .Values.serviceAccount.name | default \"\" }}",
    "  imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 2 | default \"[]\" }}",
  }),
  i(0),
}),

s("helm-service-values-helm", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "  service:",
    "    annotations: {{ .Values.service.annotations | default dict }}",
    "    labels: {{ .Values.service.labels | default dict }}",
    "    clusterIP: \"{{ .Values.service.clusterIP | default \"\" }}\"",
    "    externalIPs: {{ toYaml .Values.service.externalIPs | nindent 4 | default \"[]\" }}",
    "    loadBalancerIP: \"{{ .Values.service.loadBalancerIP | default \"\" }}\"",
    "    loadBalancerSourceRanges: {{ toYaml .Values.service.loadBalancerSourceRanges | nindent 4 | default \"[]\" }}",
    "    externalTrafficPolicy: \"{{ .Values.service.externalTrafficPolicy | default \"\" }}\"",
    "    healthCheckNodePort: {{ .Values.service.healthCheckNodePort | default 0 }}",
    "    targetPorts:",
    "      http: {{ .Values.service.targetPorts.http | default \"http\" }}",
    "      https: {{ .Values.service.targetPorts.https | default \"https\" }}",
    "    type: {{ .Values.service.type | default \"LoadBalancer\" }}",
    "    nodePorts:",
    "      http: \"{{ .Values.service.nodePorts.http | default \"\" }}\"",
    "      https: \"{{ .Values.service.nodePorts.https | default \"\" }}\"",
  }),
  i(0),
}),


s("helm-readinessProbe-values-helm", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "  readinessProbe:",
    "    failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}",
    "    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 10 }}",
    "    periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}",
    "    successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}",
    "    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 1 }}",
    "    port: {{ .Values.readinessProbe.port | default 10254 }}",
  }),
  i(0),
}),

s("helm-livenessProbe-values-helm", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "  livenessProbe:",
    "    failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}",
    "    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 10 }}",
    "    periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}",
    "    successThreshold: {{ .Values.livenessProbe.successThreshold | default 1 }}",
    "    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 1 }}",
    "    port: {{ .Values.livenessProbe.port | default 10254 }}",
  }),
  i(0),
}),

--   ---------
  
-- s("cilium-egress-helm", {
--   f(function(args) return args[1][1] .. ":" end, {1}),
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.networkPolicy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: {{ .Values.networkPolicy.selectorRole | quote }}",
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        role: {{ .Values.networkPolicy.egressRole | quote }}",
--   }),
--   i(0),
-- }),


-- s("cilium-bgp-helm", {
--   t({
--     "apiVersion: cilium.io/v2alpha1",
--     "kind: CiliumBGPPeeringPolicy",
--     "metadata:",
--     "  name: {{ .Values.bgpPolicy.name | quote }}",
--     "spec:",
--     "  nodeSelector:",
--     "    matchLabels:",
--     "      kubernetes.io/os: {{ .Values.bgpPolicy.nodeOs | quote }}",
--     "  virtualRouters:",
--     "    - exportPodCIDR: {{ .Values.bgpPolicy.exportPodCIDR | default true }}",
--     "      localASN: {{ .Values.bgpPolicy.localASN }}",
--     "      neighbors:",
--     "        - peerASN: {{ .Values.bgpPolicy.neighbor.peerASN }}",
--     "          peerAddress: {{ .Values.bgpPolicy.neighbor.peerAddress | quote }}",
--     "          gracefulRestart:",
--     "            enabled: {{ .Values.bgpPolicy.neighbor.gracefulRestart.enabled }}",
--     "            restartTimeSeconds: {{ .Values.bgpPolicy.neighbor.gracefulRestart.time }}",
--     "      serviceSelector:",
--     "        matchExpressions:",
--     "          - key: {{ .Values.bgpPolicy.serviceSelector.key | quote }}",
--     "            operator: {{ .Values.bgpPolicy.serviceSelector.operator | quote }}",
--     "            values:",
--     "              {{- range .Values.bgpPolicy.serviceSelector.values }}",
--     "              - {{ . | quote }}",
--     "              {{- end }}",
--   }),
--   i(0),
-- }),



-- s("cilium-dns-policy-helm", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchExpressions:",
--     "      - key: \"io.kubernetes.pod.namespace\"",
--     "        operator: \"NotIn\"",
--     "        values:",
--     "          {{- range .Values.policy.endpointSelector.notInNamespaces }}",
--     "          - {{ . | quote }}",
--     "          {{- end }}",
--     "      - key: \"k8s-app\"",
--     "        operator: \"NotIn\"",
--     "        values:",
--     "          {{- range .Values.policy.endpointSelector.notInApps }}",
--     "          - {{ . | quote }}",
--     "          {{- end }}",
--     "  enableDefaultDeny:",
--     "    egress: {{ .Values.policy.enableDefaultDeny.egress }}",
--     "    ingress: {{ .Values.policy.enableDefaultDeny.ingress }}",
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            io.kubernetes.pod.namespace: {{ .Values.policy.egress.toNamespace | quote }}",
--     "            k8s-app: {{ .Values.policy.egress.toApp | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"53\"",
--     "              protocol: TCP",
--     "            - port: \"53\"",
--     "              protocol: UDP",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),



-- s("cilium-external-lockdown", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingressDeny:",
--     "    - fromEntities:",
--     "        - {{ .Values.policy.denyEntity | quote }}",
--     "  ingress:",
--     "    - fromEntities:",
--     "        - {{ .Values.policy.allowEntity | quote }}",
--   }),
--   i(0),
-- }),

-- s("cilium-lockdown", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: \"Allow a minimum set of required ports on ingress of worker nodes\"",
--     "  nodeSelector:",
--     "    matchLabels:",
--     "      type: ",
--   }),
--   i(2, "{{ .Values.nodeType | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEntities:",
--     "    - remote-node",
--     "    - health",
--     "  - toPorts:",
--     "    - ports:",
--     "      - port: \"22\"",
--     "        protocol: TCP",
--     "      - port: \"6443\"",
--     "        protocol: TCP",
--     "      - port: \"2379\"",
--     "        protocol: TCP",
--     "      - port: \"4240\"",
--     "        protocol: TCP",
--     "      - port: \"8472\"",
--     "        protocol: UDP",
--   }),
--   i(0),
-- }),

-- s("cilium-ingress-selective", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.policy.description | quote }}"),
--   t({
--     "",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.endpointSelectorName | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(4, "{{ .Values.fromEndpointsName | quote }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-kube-dns-ingress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.policy.description | quote }}"),
--   t({
--     "",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.policy.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "      k8s-app: ",
--   }),
--   i(4, "{{ .Values.policy.app | default \"kube-dns\" | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(5, "{{ .Values.policy.port | default \"53\" }}"),
--   t({
--     "\"",
--     "        protocol: ",
--   }),
--   i(6, "{{ .Values.policy.protocol | default \"UDP\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-health-checks", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      'reserved:health': ''",
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(2, "{{ .Values.policy.ingressEntity | default \"remote-node\" }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.policy.egressEntity | default \"remote-node\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-init-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "specs:",
--     "  - endpointSelector:",
--     "      matchLabels:",
--     "        \"reserved:init\": \"\"",
--     "    ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(2, "{{ .Values.policy.ingressEntity | default \"host\" }}"),
--   t({
--     "    egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.policy.egressEntity | default \"all\" }}"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: \"",
--   }),
--   i(4, "{{ .Values.policy.port | default \"53\" }}"),
--   t({
--     "\"",
--     "          protocol: ",
--   }),
--   i(5, "{{ .Values.policy.protocol | default \"UDP\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-default-deny", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector: {}  # Applies to all pods",
--     "  enableDefaultDeny:",
--     "    ingress: {{ .Values.policy.enableIngress | default true }}",
--     "    egress: {{ .Values.policy.enableEgress | default true }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-backend-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: {{ .Values.policy.selectorTier | quote }}",
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            tier: {{ .Values.policy.ingressFromTier | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"80\"",
--     "    - fromCIDRSet:",
--     "      - cidr: {{ .Values.policy.ingressCidr | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"80\"",
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: \"GET\"",
--     "                path: \"/docs\"",
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            tier: {{ .Values.policy.egressToTier | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"7379\"",
--     "    - toFQDNs:",
--     "        - matchPattern: \"*.cloud.google.com\"",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"443\"",
--     "        - ports:",
--     "            - port: \"80\"",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            io.kubernetes.pod.namespace: {{ .Values.policy.dnsNamespace | quote }}",
--     "            k8s-app: {{ .Values.policy.dnsApp | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"53\"",
--     "              protocol: UDP",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-wildcard-from-endpoints", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  description: {{ .Values.policy.description | quote }}",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      k8s:io.kubernetes.pod.namespace: {{ .Values.policy.namespace | quote }}",
--     "      k8s-app: {{ .Values.policy.app | quote }}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.port | quote }}",
--     "        protocol: {{ .Values.policy.protocol | upper | quote }}",
--   }),
--   i(0),
-- })
-- ,

-- s("helm-cilium-clusterwide-selective", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  description: {{ .Values.policy.description | quote }}",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: {{ .Values.policy.targetLabel | quote }}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        name: {{ .Values.policy.sourceLabel | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-health-checks", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      'reserved:health': ''",
--     "  ingress:",
--     "    - fromEntities:",
--     "      - {{ .Values.policy.ingressEntity | quote }}",
--     "  egress:",
--     "    - toEntities:",
--     "      - {{ .Values.policy.egressEntity | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-egress-gateway-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumEgressGatewayPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  selectors:",
--     "  - podSelector:",
--     "      matchLabels:",
--     "        org: {{ .Values.policy.selector.org | quote }}",
--     "        class: {{ .Values.policy.selector.class | quote }}",
--     "        io.kubernetes.pod.namespace: {{ .Values.policy.selector.namespace | quote }}",
--     "  destinationCIDRs:",
--     "  - {{ .Values.policy.destinationCIDR | quote }}",
--     "  egressGateway:",
--     "    nodeSelector:",
--     "      matchLabels:",
--     "        egress-node: {{ .Values.policy.egressNodeLabelValue | quote }}",
--     "    egressIP: {{ .Values.policy.egressIP | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-egress-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2alpha1\"",
--     "kind: CiliumEgressGatewayPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  selectors:",
--     "    - podSelector:",
--     "        matchLabels:",
--     "          role: {{ .Values.policy.selector.role | quote }}",
--     "  destinationCIDRs:",
--     "    - {{ .Values.policy.destinationCIDR | quote }}",
--     "  egressGateway:",
--     "    nodeSelector:",
--     "      matchLabels:",
--     "        egress-node: {{ .Values.policy.egressNodeLabelValue | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-lb-ip-pool", {
--   t({
--     "apiVersion: \"cilium.io/v2alpha1\"",
--     "kind: CiliumLoadBalancerIPPool",
--     "metadata:",
--     "  name: {{ .Values.pool.name | quote }}",
--     "spec:",
--     "  cidrs:",
--     "  - cidr: {{ .Values.pool.cidr | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-database-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "  namespace: {{ .Values.policy.namespace | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: {{ .Values.policy.selector.tier | quote }}",
--     "  ingress:",
--     "    - {}",
--     "  egress:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--   }),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: {{ .Values.policy.selector.org | quote }}",
--     "      class: {{ .Values.policy.selector.class | quote }}",
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: {{ .Values.policy.egress.fqdn | quote }}",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: {{ .Values.policy.egress.dns.namespace | quote }}",
--     "        k8s:k8s-app: {{ .Values.policy.egress.dns.app | quote }}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.egress.dns.port | quote }}",
--     "        protocol: {{ .Values.policy.egress.dns.protocol | quote }}",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: {{ .Values.policy.egress.dns.matchPattern | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-fqdn-policy", {
--   t({
--     "{{- if .Values.enabled }}",
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: {{ .Values.policy.selector.org | quote }}",
--     "      class: {{ .Values.policy.selector.class | quote }}",
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: {{ .Values.policy.egress.fqdnPattern | quote }}",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: {{ .Values.policy.egress.dns.namespace | quote }}",
--     "        k8s:k8s-app: {{ .Values.policy.egress.dns.app | quote }}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.egress.dns.port | quote }}",
--     "        protocol: {{ .Values.policy.egress.dns.protocol | upper | quote }}",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: {{ .Values.policy.egress.dns.matchPattern | quote }}",
--     "{{- end }}",
--   }),
--   i(0),
-- }),

-- s("cilium-database-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"default\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: ",
--   }),
--   i(3, "{{ .Values.tier | default \"database\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - {}",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            tier: ",
--   }),
--   i(4, "{{ .Values.ingressFromTier | default \"backend\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"",
--   }),
--   i(5, "{{ .Values.ingressPort | default \"7379\" }}"),
--   t({
--     "\"",
--     "  egress:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.matchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(5, "{{ .Values.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(6, "{{ .Values.k8sApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(7, "53"),
--   t({
--     "\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.matchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(5, "{{ .Values.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(6, "{{ .Values.k8sApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(7, "53"),
--   t({
--     "\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.fqdnMatchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(5, "{{ .Values.fqdnPort | default \"443\" | quote }}"),
--   t({
--     "          protocol: TCP",
--   }),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(6, "{{ .Values.kubeDNSNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(7, "{{ .Values.kubeDNSApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"53\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-httpbin-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"default\" | quote }}"),
--   t({
--     "specs:",
--     "  - endpointSelector:",
--     "      matchLabels:",
--     "        app: ",
--   }),
--   i(2, "{{ .Values.app | default \"httpbin\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromEndpoints:",
--     "      - matchExpressions:",
--     "          - key: ",
--   }),
--   i(3, "{{ .Values.matchExpressionKey | default \"io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "            operator: In",
--     "            values:",
--   }),
--   i(4, "- red\n            - blue"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "          protocol: TCP",
--   }),
--   i(0),
-- }),

-- s("cilium-cross-cluster-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-cross-cluster\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow x-wing in cluster1 to contact rebel-base in cluster2\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.sourceName | default \"x-wing\" | quote }}"),
--   t({
--     "      io.cilium.k8s.policy.cluster: ",
--   }),
--   i(4, "{{ .Values.sourceCluster | default \"cluster1\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(5, "{{ .Values.destinationName | default \"rebel-base\" | quote }}"),
--   t({
--     "        io.cilium.k8s.policy.cluster: ",
--   }),
--   i(6, "{{ .Values.destinationCluster | default \"cluster2\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l3-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l3-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"backend\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        role: ",
--   }),
--   i(3, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-allow-all-to-victim", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-all-to-victim\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"victim\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("cilium-deny-all-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "\"deny-all-egress\""),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "restricted"),
--   t({
--     "  egress:",
--     "  - {}",
--   }),
--   i(0),
-- }),


-- s("k8s-encryption-config", {
--   t({
--     "kind: EncryptionConfig",
--     "apiVersion: v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.keyName | default \"key1\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.encryptionKey | required \"ENCRYPTION_KEY is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-configuration", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - secretbox:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.key1Name | default \"key1\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.encryptionKey1 | required \"ENCRYPTION_KEY_1 is required\" }}"),
--   t({
--     "            - name: ",
--   }),
--   i(3, "{{ .Values.key2Name | default \"key2\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(4, "{{ .Values.encryptionKey2 | required \"ENCRYPTION_KEY_2 is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-aescbc", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.activeKeyName | default \"active-key\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.activeKey | required \"ACTIVE_ENCRYPTION_KEY is required\" }}"),
--   t({
--     "            - name: ",
--   }),
--   i(3, "{{ .Values.oldKeyName | default \"old-key\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(4, "{{ .Values.oldKey | required \"OLD_ENCRYPTION_KEY is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-identity-helm", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - ",
--   }),
--   i(1, "{{ .Values.resource | default \"secrets\" }}"),
--   t({
--     "    providers:",
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-config", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--   }),
--   i(1, "- secrets\n      - configmaps"),
--   t({
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(2, "{{ .Values.aescbcKeyName | default \"main\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(3, "{{ .Values.aescbcSecret | default \"${ENCRYPTION_KEY}\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("cilium-requires-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"requires-rule\" | quote }}"),
--   t({
--     "specs:",
--     "  - description: ",
--   }),
--   i(2, "{{ .Values.description | default \"For endpoints with env=prod, only allow if source also has label env=prod\" | quote }}"),
--   t({
--     "    endpointSelector:",
--     "      matchLabels:",
--     "        env: ",
--   }),
--   i(3, "{{ .Values.endpointEnv | default \"prod\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromRequires:",
--     "      - matchLabels:",
--     "          env: ",
--   }),
--   i(4, "{{ .Values.fromEnv | default \"prod\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l3-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l3-rule\" | quote }}"),
--   t({
--     "specs:",
--     "  - description: ",
--   }),
--   i(2, "{{ .Values.description | default \"For endpoints with env=prod, allow if source also has label role=frontend\" | quote }}"),
--   t({
--     "    endpointSelector:",
--     "      matchLabels:",
--     "        env: ",
--   }),
--   i(3, "{{ .Values.endpointEnv | default \"prod\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromEndpoints:",
--     "      - matchLabels:",
--     "          role: ",
--   }),
--   i(4, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   i(0),
-- }),



-- s("cilium-service-egress-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"service-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      id: ",
--   }),
--   i(2, "{{ .Values.appId | default \"app2\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toServices:",
--     "    - k8sService:",
--     "        serviceName: ",
--   }),
--   i(3, "{{ .Values.serviceName | default \"myservice\" | quote }}"),
--   t({
--     "        namespace: ",
--   }),
--   i(4, "{{ .Values.serviceNamespace | default \"default\" | quote }}"),
--   t({
--     "    - k8sServiceSelector:",
--     "        selector:",
--     "          matchLabels:",
--     "            env: ",
--   }),
--   i(5, "{{ .Values.selectorEnv | default \"staging\" | quote }}"),
--   t({
--     "        namespace: ",
--   }),
--   i(6, "{{ .Values.selectorNamespace | default \"another-namespace\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-dev-to-kube-apiserver", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"dev-to-kube-apiserver\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"kube-apiserver\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-dev-to-host", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"dev-to-host\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"host\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-dev-from-nodes", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-dev-from-nodes-in-cluster\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entities.first | default \"host\" | quote }}"),
--   t({
--     "      - ",
--   }),
--   i(4, "{{ .Values.entities.second | default \"remote-node\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-from-world-to-role-public", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"from-world-to-role-public\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.roleLabel | default \"public\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"world\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-prod-from-control-plane", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-prod-from-control-plane-nodes\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"prod\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromNodes:",
--     "        - matchLabels:",
--     "            ",
--   }),
--   i(3, "{{ .Values.nodeLabelKey | default \"node-role.kubernetes.io/control-plane\" | quote }}"),
--   t({ ": \"\"" }),
--   i(0),
-- }),

-- s("cilium-cidr-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.toCIDR | default \"20.1.1.1/32\" | quote }}"),
--   t({
--     "    - toCIDRSet:",
--     "        - cidr: ",
--   }),
--   i(4, "{{ .Values.toCIDRSet.cidr | default \"10.0.0.0/8\" | quote }}"),
--   t({
--     "          except:",
--     "            - ",
--   }),
--   i(5, "{{ .Values.toCIDRSet.except | default \"10.96.0.0/12\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-fqdn", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"test-app\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            \"k8s:io.kubernetes.pod.namespace\": ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "            \"k8s:k8s-app\": ",
--   }),
--   i(4, "{{ .Values.dnsAppLabel | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(6, "{{ .Values.dnsProtocol | default \"ANY\" }}"),
--   t({
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: ",
--   }),
--   i(7, "{{ .Values.dnsPattern | default \"*\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "        - matchName: ",
--   }),
--   i(8, "{{ .Values.fqdnMatchName | default \"my-remote-service.com\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l4-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "      - ports:",
--     "          - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "            protocol: ",
--   }),
--   i(4, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-l4-port-range-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-port-range-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "      - ports:",
--     "          - port: ",
--   }),
--   i(3, "{{ .Values.startPort | default \"80\" | quote }}"),
--   t({
--     "            endPort: ",
--   }),
--   i(4, "{{ .Values.endPort | default 444 }}"),
--   t({
--     "            protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-l4-ingress-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"backend\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            role: ",
--   }),
--   i(3, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-cidr-l4-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.role | default \"crawler\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.cidr | default \"192.0.2.0/24\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-cidr-l4-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.role | default \"crawler\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.cidr | default \"192.0.2.0/24\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-icmp-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"icmp-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - icmps:",
--     "        - fields:",
--     "            - type: ",
--   }),
--   i(3, "{{ .Values.icmpv4Type | default 8 }}"),
--   t({
--     "              family: IPv4",
--     "            - type: ",
--   }),
--   i(4, "{{ .Values.icmpv6Type | default \"EchoRequest\" | quote }}"),
--   t({
--     "              family: IPv6",
--   }),
--   i(0),
-- }),

-- s("cilium-l4-sni-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-sni-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"443\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          serverNames:",
--     "            - ",
--   }),
--   i(4, "{{ .Values.serverName | default \"one.one.one.one\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-http-get-public", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow HTTP GET /public from env=prod to app=service\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"service\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            env: ",
--   }),
--   i(4, "{{ .Values.sourceEnv | default \"prod\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: ",
--   }),
--   i(6, "{{ .Values.httpMethod | default \"GET\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(7, "{{ .Values.httpPath | default \"/public\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l7-http-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l7-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: ",
--   }),
--   i(4, "{{ .Values.http.method1 | default \"GET\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(5, "{{ .Values.http.path1 | default \"/path1$\" | quote }}"),
--   t({
--     "              - method: ",
--   }),
--   i(6, "{{ .Values.http.method2 | default \"PUT\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(7, "{{ .Values.http.path2 | default \"/path2$\" | quote }}"),
--   t({
--     "                headers:",
--     "                  - ",
--   }),
--   i(8, "{{ .Values.http.header1 | default \"'X-My-Header: true'\" }}"),
--   i(0),
-- }),


-- s("cilium-kafka-produce-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"enable empire-hq to produce to empire-announce and deathstar-plans\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"kafka\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            app: ",
--   }),
--   i(4, "{{ .Values.sourceApp | default \"empire-hq\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"9092\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            kafka:",
--     "              - role: ",
--   }),
--   i(6, "{{ .Values.kafka.role1 | default \"produce\" | quote }}"),
--   t({
--     "                topic: ",
--   }),
--   i(7, "{{ .Values.kafka.topic1 | default \"deathstar-plans\" | quote }}"),
--   t({
--     "              - role: ",
--   }),
--   i(8, "{{ .Values.kafka.role2 | default \"produce\" | quote }}"),
--   t({
--     "                topic: ",
--   }),
--   i(9, "{{ .Values.kafka.topic2 | default \"empire-announce\" | quote }}"),
--   i(0),
-- }),




-- s("cilium-kafka-produce-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"enable empire-hq to produce to empire-announce and deathstar-plans\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"kafka\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            app: ",
--   }),
--   i(4, "{{ .Values.sourceApp | default \"empire-hq\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"9092\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            kafka:",
--     "              - apiKey: ",
--   }),
--   i(6, "{{ .Values.apiKeys.apiVersions | default \"\\\"apiversions\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(7, "{{ .Values.apiKeys.metadata | default \"\\\"metadata\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(8, "{{ .Values.apiKeys.produce1 | default \"\\\"produce\\\"\" }}"),
--   t({
--     "                topic: ",
--   }),
--   i(9, "{{ .Values.kafkaTopics.topic1 | default \"\\\"deathstar-plans\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(10, "{{ .Values.apiKeys.produce2 | default \"\\\"produce\\\"\" }}"),
--   t({
--     "                topic: ",
--   }),
--   i(11, "{{ .Values.kafkaTopics.topic2 | default \"\\\"empire-announce\\\"\" }}"),
--   i(0),
-- }),

-- s("cilium-tofqdn-dns-visibility", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"tofqdn-dns-visibility\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      any:org: ",
--   }),
--   i(2, "{{ .Values.org | default \"alliance\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "            k8s:k8s-app: ",
--   }),
--   i(4, "{{ .Values.dnsApp | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "              protocol: ANY",
--     "          rules:",
--     "            dns:",
--     "              - matchName: ",
--   }),
--   i(6, "{{ .Values.dnsRules.matchName1 | default \"cilium.io\" | quote }}"),
--   t({
--     "              - matchPattern: ",
--   }),
--   i(7, "{{ .Values.dnsRules.matchPattern1 | default \"*.cilium.io\" | quote }}"),
--   t({
--     "              - matchPattern: ",
--   }),
--   i(8, "{{ .Values.dnsRules.matchPattern2 | default \"*.api.cilium.io\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "        - matchName: ",
--   }),
--   i(9, "{{ .Values.fqdnRules.name1 | default \"cilium.io\" | quote }}"),
--   t({
--     "        - matchName: ",
--   }),
--   i(10, "{{ .Values.fqdnRules.name2 | default \"sub.cilium.io\" | quote }}"),
--   t({
--     "        - matchName: ",
--   }),
--   i(11, "{{ .Values.fqdnRules.name3 | default \"service1.api.cilium.io\" | quote }}"),
--   t({
--     "        - matchPattern: ",
--   }),
--   i(12, "{{ .Values.fqdnRules.pattern1 | default \"special*service.api.cilium.io\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(13, "{{ .Values.fqdnPort | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--   }),
--   i(0),
-- }),

-- s("cilium-tofqdn-dns-visibility", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"tofqdn-dns-visibility\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      any:org: ",
--   }),
--   i(2, "{{ .Values.org | default \"alliance\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "      - matchLabels:",
--     "          \"k8s:io.kubernetes.pod.namespace\": ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "          \"k8s:k8s-app\": ",
--   }),
--   i(4, "{{ .Values.dnsApp | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "          - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "            protocol: ANY",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: ",
--   }),
--   i(6, "{{ .Values.dnsMatchPattern | default \"*\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "      - matchName: ",
--   }),
--   i(7, "{{ .Values.fqdnMatchName1 | default \"cilium.io\" | quote }}"),
--   t({
--     "      - matchName: ",
--   }),
--   i(8, "{{ .Values.fqdnMatchName2 | default \"sub.cilium.io\" | quote }}"),
--   t({
--     "      - matchPattern: ",
--   }),
--   i(9, "{{ .Values.fqdnMatchPattern | default \"*.sub.cilium.io\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-isolate-namespaces", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName1 | default \"isolate-ns1\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace1 | default \"ns1\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      ",
--   }),
--   i(3, "{{ .Values.endpointSelector1 | default \"{}\" }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        ",
--   }),
--   i(4, "{{ .Values.fromEndpoints1 | default \"{}\" }}"),
--   t({
--     "---",
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(5, "{{ .Values.policyName2 | default \"isolate-ns2\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(6, "{{ .Values.namespace2 | default \"ns2\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      ",
--   }),
--   i(7, "{{ .Values.endpointSelector2 | default \"{}\" }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        ",
--   }),
--   i(8, "{{ .Values.fromEndpoints2 | default \"{}\" }}"),
--   i(0),
-- }),


-- s("cilium-k8s-expose-across-namespace", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"k8s-expose-across-namespace\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"ns1\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.endpointName | default \"leia\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(4, "{{ .Values.sourceNamespace | default \"ns2\" | quote }}"),
--   t({
--     "        name: ",
--   }),
--   i(5, "{{ .Values.sourceName | default \"luke\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-or-and-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.orPolicyName | default \"or-statement-policy\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(2, "{{ .Values.orKey1 | default \"k8s:io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.orValue1 | default \"production\" | quote }}"),
--   t({
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(4, "{{ .Values.orKey2 | default \"k8s:cilium.example.com/policy\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(5, "{{ .Values.orValue2 | default \"strict\" | quote }}"),
--   t({"", "---",}),
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(6, "{{ .Values.andPolicyName | default \"and-statement-policy\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(7, "{{ .Values.andKey1 | default \"k8s:io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(8, "{{ .Values.andValue1 | default \"production\" | quote }}"),
--   t({
--     "      - key: ",
--   }),
--   i(9, "{{ .Values.andKey2 | default \"k8s:cilium.example.com/policy\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(10, "{{ .Values.andValue2 | default \"strict\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-allow-to-kubedns", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-to-kubedns\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"public\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.kubeDNSNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s-app: ",
--   }),
--   i(4, "{{ .Values.kubeDNSApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"53\" | quote }}"),
--   t({
--     "        protocol: UDP",
--   }),
--   i(0),
-- }),

-- s("cilium-k8s-svc-account", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"k8s-svc-account\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      io.cilium.k8s.policy.serviceaccount: ",
--   }),
--   i(2, "{{ .Values.dstServiceAccount | default \"leia\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        io.cilium.k8s.policy.serviceaccount: ",
--   }),
--   i(3, "{{ .Values.srcServiceAccount | default \"luke\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "        protocol: TCP",
--     "      rules:",
--     "        http:",
--     "        - method: ",
--   }),
--   i(5, "{{ .Values.httpMethod | default \"GET\" | quote }}"),
--   t({
--     "          path: ",
--   }),
--   i(6, "{{ .Values.httpPath | default \"/public$\" | quote }}"),
--   i(0),
-- }),



-- s("cilium-allow-cross-cluster", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-cross-cluster\" | quote }}"),
--   t({
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow x-wing in cluster1 to contact rebel-base in cluster2\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.sourceName | default \"x-wing\" | quote }}"),
--   t({
--     "      io.cilium.k8s.policy.cluster: ",
--   }),
--   i(4, "{{ .Values.sourceCluster | default \"cluster1\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(5, "{{ .Values.destName | default \"rebel-base\" | quote }}"),
--   t({
--     "        io.kubernetes.pod.namespace: ",
--   }),
--   i(6, "{{ .Values.destNamespace | default \"default\" | quote }}"),
--   t({
--     "        io.cilium.k8s.policy.cluster: ",
--   }),
--   i(7, "{{ .Values.destCluster | default \"cluster2\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-from-init-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"from-init\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - init",
--     "    - toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"53\" | quote }}"),
--   t({
--     "          protocol: UDP",
--   }),
--   i(0),
-- }),


-- s("csr-helm", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"carol\" }}"),
--   t({
--     "spec:",
--     "  groups:",
--     "    - ",
--   }),
--   i(2, "{{ .Values.group | default \"developers\" }}"),
--   t({
--     "  request: ",
--   }),
--   i(3, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(4, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client\" }}"),
--   t({
--     "  usages:",
--     "    - ",
--   }),
--   i(5, "{{ .Values.usage | default \"client auth\" }}"),
--   i(0),
-- }),

-- s("csr-serving", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"webhook-csr\" }}"),
--   t({
--     "spec:",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client\" }}"),
--   t({
--     "  usages:",
--     "    - digital signature",
--     "    - key encipherment",
--     "    - server auth",
--   }),
--   i(0),
-- }),

-- s("csr-node-bootstrap", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"node-bootstrap\" }}"),
--   t({
--     "spec:",
--     "  groups:",
--     "    - system:bootstrappers",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client-kubelet\" }}"),
--   t({
--     "  usages:",
--     "    - digital signature",
--     "    - key encipherment",
--     "    - client auth",
--   }),
--   i(0),
-- }),

-- s("csr-code-signing", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"code-signing-csr\" }}"),
--   t({
--     "spec:",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"example.com/code-signing\" }}"),
--   t({
--     "  usages:",
--     "    - code signing",
--   }),
--   i(0),
-- })























































-- }



}