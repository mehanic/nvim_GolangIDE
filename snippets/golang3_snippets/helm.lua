-- local ls = require("luasnip") -- обязательно
-- local s = ls.snippet
-- local t = ls.text_node

-- return {

-- }


local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local rep = require("luasnip.extras").rep
local f = ls.function_node



return {
  
s("helm-service-sample-spec-func", {
  t({
    "apiVersion: v1",
    "kind: Service",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить ім'я компонента
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляємо в label component
  t({ " }}\"",
    "    heritage: {{ .Release.Service }}",
    "    release: {{ .Release.Name }}",
    "  {{- with .Values.component.service.labels }}",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.annotations }}",
    "  annotations:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "",
    "spec:",
    "  type: {{ .Values.component.service.type | default \"ClusterIP\" }}",
    "  {{- with .Values.component.service.clusterIP }}",
    "  clusterIP: {{ . }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.externalIPs }}",
    "  externalIPs:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.loadBalancerIP }}",
    "  loadBalancerIP: {{ . }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.loadBalancerSourceRanges }}",
    "  loadBalancerSourceRanges:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.healthCheckNodePort }}",
    "  healthCheckNodePort: {{ . }}",
    "  {{- end }}",
    "  {{- with .Values.component.service.internalTrafficPolicy }}",
    "  internalTrafficPolicy: {{ . }}",
    "  {{- end }}",
    "",
    "  ports:",
    "    - name: http",
    "      port: 80",
    "      protocol: TCP",
    "      targetPort: {{ .Values.component.service.targetPorts.http | default 80 }}",
    "      {{- if (and (eq .Values.component.service.type \"NodePort\") (not (empty .Values.component.service.nodePorts.http))) }}",
    "      nodePort: {{ .Values.component.service.nodePorts.http }}",
    "      {{- end }}",
    "    - name: https",
    "      port: 443",
    "      protocol: TCP",
    "      targetPort: {{ .Values.component.service.targetPorts.https | default 443 }}",
    "      {{- if (and (eq .Values.component.service.type \"NodePort\") (not (empty .Values.component.service.nodePorts.https))) }}",
    "      nodePort: {{ .Values.component.service.nodePorts.https }}",
    "      {{- end }}",
    "    {{- range $key, $value := .Values.tcp }}",
    "    - name: {{ $key }}-tcp",
    "      port: {{ $key }}",
    "      protocol: TCP",
    "      targetPort: {{ $key }}",
    "    {{- end }}",
    "    {{- range $key, $value := .Values.udp }}",
    "    - name: {{ $key }}-udp",
    "      port: {{ $key }}",
    "      protocol: UDP",
    "      targetPort: {{ $key }}",
    "    {{- end }}",
    "",
    "  selector:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляємо в selector.component
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
  }),
  i(0),
}),


s("helm-deployment-sample-spec-func", {
  t({
    "apiVersion: apps/v1",
    "kind: Deployment",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- одне введення, використовується всюди
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  replicas: {{ .Values.component.replicaCount }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      {{- with .Values.component.initContainers }}",
    "      initContainers:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          {{- with .Values.component.ports }}",
    "          ports:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.env }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.livenessProbe }}",
    "          livenessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.readinessProbe }}",
    "          readinessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      restartPolicy: Always",
  }),
  i(0),
}),


s("helm-cronjob-sample-spec-func", {
  t({
    "apiVersion: batch/v1",
    "kind: CronJob",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- вводиш назву компоненту один раз
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  schedule: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".schedule }}\"",
    "  successfulJobsHistoryLimit: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".successfulJobsHistoryLimit | default 3 }}",
    "  failedJobsHistoryLimit: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".failedJobsHistoryLimit | default 1 }}",
    "  concurrencyPolicy: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".concurrencyPolicy | default \"Forbid\" }}",
    "  suspend: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".suspend | default false }}",
    "  jobTemplate:",
    "    spec:",
    "      backoffLimit: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".backoffLimit | default 6 }}",
    "      template:",
    "        metadata:",
    "          labels:",
    "            app: {{ template \"chartName.name\" . }}",
    "            component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".name }}\"",
    "            release: {{ .Release.Name }}",
    "        spec:",
    "          restartPolicy: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".restartPolicy | default \"OnFailure\" }}",
    "          serviceAccountName: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".serviceAccountName | default \"default\" }}",
    "          affinity:",
    "            {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".affinity | nindent 12 }}",
    "          tolerations:",
    "            {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".tolerations | nindent 12 }}",
    "          containers:",
    "            - name: {{ .Chart.Name }}",
    "              image: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".image.repository }}:{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".image.tag | default .Chart.AppVersion }}\"",
    "              imagePullPolicy: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".image.pullPolicy | default \"IfNotPresent\" }}",
    "              command: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".command | toJson }}",
    "              args: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".args | toJson }}",
    "              env:",
    "                {{- range $key, $value := .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".env }}",
    "                - name: {{ $key }}",
    "                  value: \"{{ $value }}\"",
    "                {{- end }}",
    "              envFrom:",
    "                {{- if .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".envFromConfigMap }}",
    "                - configMapRef:",
    "                    name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".envFromConfigMap }}",
    "                {{- end }}",
    "                {{- if .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".envFromSecret }}",
    "                - secretRef:",
    "                    name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".envFromSecret }}",
    "                {{- end }}",
    "              resources:",
    "                {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".resources | nindent 16 }}",
    "              volumeMounts:",
    "                {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".volumeMounts | nindent 16 }}",
    "          volumes:",
    "            {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".volumes | nindent 12 }}",
    "          securityContext:",
    "            {{- toYaml .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".securityContext | nindent 12 }}",
  }),
  i(0),
}),




s("helm-statefulset-sample-spec-func", {
  t({
    "apiVersion: apps/v1",
    "kind: StatefulSet",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить ім'я компонента один раз
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляється у component label
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  replicas: {{ .Values.component.replicaCount }}",
    "  serviceName: {{ template \"chartName.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ "\" . }}",
    "  podManagementPolicy: {{ .Values.component.podManagementPolicy | default \"OrderedReady\" }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      {{- with .Values.component.initContainers }}",
    "      initContainers:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          {{- with .Values.component.containerPorts }}",
    "          ports:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.env }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.livenessProbe }}",
    "          livenessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.readinessProbe }}",
    "          readinessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "  {{- with .Values.component.volumeClaimTemplates }}",
    "  volumeClaimTemplates:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
  }),
  i(0),
}),

s("helm-daemonset-sample-spec-func", {
  t({
    "apiVersion: apps/v1",
    "kind: DaemonSet",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- вводиш назву компоненту один раз
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      {{- with .Values.component.initContainers }}",
    "      initContainers:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          {{- with .Values.component.containerPorts }}",
    "          ports:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.env }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.livenessProbe }}",
    "          livenessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.readinessProbe }}",
    "          readinessProbe:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
  }),
  i(0),
}),



s("helm-job-sample-spec-func", {
  t({
    "apiVersion: batch/v1",
    "kind: Job",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить назву компонента
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє у labels.component
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  backoffLimit: {{ .Values.component.backoffLimit | default 6 }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- знову у шаблон labels.component
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      restartPolicy: {{ .Values.component.restartPolicy | default \"OnFailure\" }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          command: {{ .Values.component.command | toJson }}",
    "          args: {{ .Values.component.args | toJson }}",
  }),
  i(0),
}),

s("helm-job-sample-spec-func-universal-env", {
  t({
    "apiVersion: batch/v1",
    "kind: Job",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- один раз вводиш назву компоненту
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  backoffLimit: {{ .Values.component.backoffLimit | default 6 }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      restartPolicy: {{ .Values.component.restartPolicy | default \"OnFailure\" }}",
    "      {{- with .Values.component.initContainers }}",
    "      initContainers:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          command: {{ .Values.component.command | toJson }}",
    "          args: {{ .Values.component.args | toJson }}",
    "          {{- with .Values.component.env }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.extraEnv }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
  }),
  i(0),
}),


s("helm-job-sample-spec-func-universal", {
  t({
    "apiVersion: batch/v1",
    "kind: Job",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- вводиш назву компонента 1 раз
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє у labels.component
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "spec:",
    "  backoffLimit: {{ .Values.component.backoffLimit | default 6 }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- ще раз у pod labels
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      restartPolicy: {{ .Values.component.restartPolicy | default \"OnFailure\" }}",
    "      {{- with .Values.component.initContainers }}",
    "      initContainers:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
    "      containers:",
    "        - name: {{ .Chart.Name }}",
    "          image: \"{{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default .Chart.AppVersion }}\"",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy }}",
    "          command: {{ .Values.component.command | toJson }}",
    "          args: {{ .Values.component.args | toJson }}",
    "          {{- with .Values.component.env }}",
    "          env:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
  }),
  i(0),
}),



s("helm-ingress-sample-spec-func", {
  t({
    "apiVersion: networking.k8s.io/v1",
    "kind: Ingress",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить назву компонента
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє у labels.component
  t({ " }}\"",
    "    release: {{ .Release.Name }}",
    "  annotations:",
    "    {{- with .Values.component.ingress.annotations }}",
    "    {{ toYaml . | indent 4 }}",
    "    {{- end }}",
    "spec:",
    "  ingressClassName: {{ .Values.component.ingress.className | quote }}",
    "  rules:",
    "    - host: {{ .Values.component.ingress.host }}",
    "      http:",
    "        paths:",
    "          - path: {{ .Values.component.ingress.path }}",
    "            pathType: Prefix",
    "            backend:",
    "              service:",
    "                name: {{ template \"chartName.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє ім’я сервісу
  t({ "\" . }}",
    "                port:",
    "                  number: {{ .Values.component.service.port }}",
    "    - host: {{ .Values.component.ingress.secondaryHost }}",
    "      http:",
    "        paths:",
    "          - path: {{ .Values.component.ingress.secondaryPath }}",
    "            pathType: Prefix",
    "            backend:",
    "              service:",
    "                name: {{ template \"chartName.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- знову ім’я сервісу
  t({ "\" . }}",
    "                port:",
    "                  number: {{ .Values.component.service.port }}",
  }),
  i(0),
}),


s("helm-role-sample-spec-func", {
  t({
    "apiVersion: rbac.authorization.k8s.io/v1",
    "kind: Role",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"),
  t({".fullname\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ "}}",
    "rules:",
    "  - apiGroups: {{ toJson .Values.component.rbac.apiGroups }}",
    "    resources: {{ toJson .Values.component.rbac.resources }}",
    "    verbs: {{ toJson .Values.component.rbac.verbs }}",
  }),
  i(0),
}),




s("helm-rolebinding-sample-spec-func", {
  t({
    "apiVersion: rbac.authorization.k8s.io/v1",
    "kind: RoleBinding",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"),
  t({".fullname\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ "}}",
    "subjects:",
    "  - kind: {{ .Values.component.rbac.subject.kind }}",
    "    name: {{ .Values.component.rbac.subject.name }}",
    "    apiGroup: {{ .Values.component.rbac.subject.apiGroup }}",
    "roleRef:",
    "  kind: Role",
    "  name: {{ template \"chartName.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".fullname\" . }}",
    "  apiGroup: rbac.authorization.k8s.io",
  }),
  i(0),
}),


-- ClusterRole
s("helm-clusterrole-sample-spec-func", {
  t({
    "apiVersion: rbac.authorization.k8s.io/v1",
    "kind: ClusterRole",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить назву компоненту
  t({".fullname\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє назву у labels.component
  t({ "}}",  -- Ось тут закриваємо дужки
    "rules:",
    "  - apiGroups: {{ toJson .Values.component.rbac.apiGroups }}",
    "    resources: {{ toJson .Values.component.rbac.resources }}",
    "    verbs: {{ toJson .Values.component.rbac.verbs }}",
  }),
  i(0),
}),

-- ClusterRoleBinding
s("helm-clusterrolebinding-sample-spec-func", {
  t({
    "apiVersion: rbac.authorization.k8s.io/v1",
    "kind: ClusterRoleBinding",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- користувач вводить назву компоненту
  t({".fullname\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє назву у labels.component
  t({ "}}",
    "subjects:",
    "  - kind: {{ .Values.component.rbac.subject.kind }}",
    "    name: {{ .Values.component.rbac.subject.name }}",
    "    apiGroup: {{ .Values.component.rbac.subject.apiGroup }}",
    "roleRef:",
    "  kind: ClusterRole",
    "  name: {{ template \"chartName.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- підставляє назву у roleRef.name
  t({ ".fullname\" . }}",
    "  apiGroup: rbac.authorization.k8s.io",
  }),
  i(0),
}),


s("helm-gateway-sample-spec-func", {
  t({
    "apiVersion: gateway.networking.k8s.io/v1beta1",
    "kind: Gateway",
    "metadata:",
    "  name: {{ .Values.component.",
  }),
  i(1, "gateway"), -- користувач вводить назву Gateway
  t({".name }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.name }}\"",
    "spec:",
    "  gatewayClassName: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] .. ".gateway.gatewayClassName" end, {1}),
  t({"",
    "  listeners:",
  }),
  f(function(args) return "toYaml .Values.component." .. args[1][1] .. ".gateway.listeners | indent 4" end, {1}),
  t({"",
    "  addresses:",
  }),
  f(function(args) return "toYaml .Values.component." .. args[1][1] .. ".gateway.addresses | indent 4" end, {1}),
  i(0),
}),



s("helm-httproute-sample-spec-func", {
  t({
    "apiVersion: gateway.networking.k8s.io/v1beta1",
    "kind: HTTPRoute",
    "metadata:",
    "  name: {{ .Values.component.",
  }),
  i(1, "httproute"), -- користувач вводить назву HTTPRoute
  t({".name }}",
    "spec:",
    "  parentRefs:",
  }),
  f(function(args) return "toYaml .Values.component." .. args[1][1] .. ".parentRefs | indent 4" end, {1}),
  t({"",
    "  rules:",
  }),
  f(function(args) return "toYaml .Values.component." .. args[1][1] .. ".rules | indent 4" end, {1}),
  i(0),
}),


s("helm-tcproute-sample-spec-func", {
  t({
    "apiVersion: gateway.networking.k8s.io/v1beta1",
    "kind: TCPRoute",
    "metadata:",
    "  name: {{ .Values.",
  }),
  i(1, "tcproute"), -- користувач вводить ім’я TCPRoute
  t({".name }}",
    "spec:",
    "  parentRefs:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".parentRefs | indent 4" end, {1}),
  t({"",
    "  rules:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".rules | indent 4" end, {1}),
  i(0),
}),

-- GRPCRoute
s("helm-grpcroute-sample-spec-func", {
  t({
    "apiVersion: gateway.networking.k8s.io/v1beta1",
    "kind: GRPCRoute",
    "metadata:",
    "  name: {{ .Values.",
  }),
  i(1, "grpcroute"), -- користувач вводить ім’я GRPCRoute
  t({".name }}",
    "spec:",
    "  parentRefs:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".parentRefs | indent 4" end, {1}),
  t({"",
    "  rules:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".rules | indent 4" end, {1}),
  i(0),
}),

-- UDPRoute
s("helm-udproute-sample-spec-func", {
  t({
    "apiVersion: gateway.networking.k8s.io/v1beta1",
    "kind: UDPRoute",
    "metadata:",
    "  name: {{ .Values.",
  }),
  i(1, "udproute"), -- користувач вводить ім’я UDPRoute
  t({".name }}",
    "spec:",
    "  parentRefs:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".parentRefs | indent 4" end, {1}),
  t({"",
    "  rules:",
  }),
  f(function(args) return "toYaml .Values." .. args[1][1] .. ".rules | indent 4" end, {1}),
  i(0),
}),



s("helm-pod-with-initcontainers-spec", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values." 
  }), i(1, "pod"), t({ ".name }}",
    "  labels:",
    "    app.kubernetes.io/name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".appName }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".container.command | indent 6 }}",
    "  initContainers:",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[0].command | indent 6 }}",
    "  - name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].name }}",
    "    image: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].image }}",
    "    command: {{ toYaml .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".initContainers[1].command | indent 6 }}",
  }),
  i(0),
}),


s("helm-deployment-sidecar-spec-func", {
  t({
    "apiVersion: apps/v1",
    "kind: Deployment",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"),
  t({
    "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({
    " }}\"",
    "    release: {{ .Release.Name }}",
    "  annotations:",
    "    {{- toYaml .Values.component.annotations | nindent 4 }}",
    "spec:",
    "  replicas: {{ .Values.component.replicaCount }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({
    " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({
    " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      containers:",
    "        - name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t(".container.name }}"),
  t({ "", "          image: \"{{ .Values.component." }),
  f(function(args) return args[1][1] end, {1}),
  t(".container.image }}:{{ .Values.component."),
  f(function(args) return args[1][1] end, {1}),
  t(".container.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values.component." }),
  f(function(args) return args[1][1] end, {1}),
  t(".container.pullPolicy }}"),
  t({ "",
      "          {{- with .Values.component.container.resources }}",
      "          resources:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.securityContext }}",
      "          securityContext:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.ports }}",
      "          ports:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.env }}",
      "          env:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.volumeMounts }}",
      "          volumeMounts:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.livenessProbe }}",
      "          livenessProbe:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.container.readinessProbe }}",
      "          readinessProbe:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "",
      "        - name: {{ .Values.component." }),
  f(function(args) return args[1][1] end, {1}),
  t(".sidecar.name }}"),
  t({ "", "          image: \"{{ .Values.component." }),
  f(function(args) return args[1][1] end, {1}),
  t(".sidecar.image }}:{{ .Values.component."),
  f(function(args) return args[1][1] end, {1}),
  t(".sidecar.tag | default .Chart.AppVersion }}\""),
  t({ "", "          imagePullPolicy: {{ .Values.component." }),
  f(function(args) return args[1][1] end, {1}),
  t(".sidecar.pullPolicy }}"),
  t({ "",
      "          {{- with .Values.component.sidecar.resources }}",
      "          resources:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.securityContext }}",
      "          securityContext:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.ports }}",
      "          ports:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.env }}",
      "          env:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.volumeMounts }}",
      "          volumeMounts:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.livenessProbe }}",
      "          livenessProbe:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "          {{- with .Values.component.sidecar.readinessProbe }}",
      "          readinessProbe:",
      "            {{- toYaml . | nindent 12 }}",
      "          {{- end }}",
      "",
      "      {{- with .Values.component.volumes }}",
      "      volumes:",
      "        {{- toYaml . | nindent 8 }}",
      "      {{- end }}",
      "      {{- with .Values.component.affinity }}",
      "      affinity:",
      "        {{- toYaml . | nindent 6 }}",
      "      {{- end }}",
      "      {{- with .Values.component.nodeSelector }}",
      "      nodeSelector:",
      "        {{- toYaml . | nindent 6 }}",
      "      {{- end }}",
      "      {{- with .Values.component.tolerations }}",
      "      tolerations:",
      "        {{- toYaml . | nindent 6 }}",
      "      {{- end }}",
      "      restartPolicy: Always"
  }),
  i(0)
}),



s("helm-endpointslice-spec", {
  t({
    "apiVersion: discovery.k8s.io/v1",
    "kind: EndpointSlice",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "endpointslice"), t({ ".name }}",
    "  labels:",
    "    kubernetes.io/service-name: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".serviceName }}",
    "spec:",
    "  addressType: {{ .Values."
  }), f(function(args) return args[1][1] end, {1}), t({ ".addressType }}",
    "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".ports }}",
    "  ports:",
    "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".ports | indent 4 }}",
    "  {{- end }}",
    "  {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".endpoints }}",
    "  endpoints:",
    "  {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".endpoints | indent 4 }}",
    "  {{- end }}",
  }),
  i(0),
}),


s("helm-podspec-configmap", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values.pod.name }}",
    "  labels:",
    "    app: {{ .Values.pod.app }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."
  }), i(1, "container"), t({ ".name }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    command: {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".command | indent 6 }}",
    "    volumeMounts:",
    "    - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeMount.name }}",
    "      mountPath: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeMount.mountPath }}",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    configMap:",
    "      name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.configMapName }}",
    "      items:",
    "      - key: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.configMapKey }}",
    "        path: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.configMapPath }}",
  }),
  i(0),
}),

s("helm-podspec-emptydir", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values.pod.name }}",
    "  labels:",
    "    app: {{ .Values.pod.app }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."
  }), i(1, "container"), t({ ".name }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    volumeMounts:",
    "    - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeMount.name }}",
    "      mountPath: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeMount.mountPath }}",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    emptyDir:",
    "      sizeLimit: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.sizeLimit }}",
    "      medium: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.medium }}",
  }),
  i(0),
}),


s("helm-podspec-hostpath", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values.pod.name }}",
    "  labels:",
    "    app: {{ .Values.pod.app }}",
    "spec:",
    "  os:",
    "    name: {{ .Values."
  }), i(1, "pod"), t({ ".name | default \"linux\" }}",
    "  nodeSelector:",
    "    kubernetes.io/os: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".nodeSelector | default \"linux\" }}",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.image }}",
    "    volumeMounts:",
    "    - mountPath: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.mountPath }}",
    "      name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "      readOnly: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.readOnly | default true }}",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    hostPath:",
    "      path: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.path }}",
    "      type: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volume.type | default \"Directory\" }}",
  }),
  i(0),
}),

s("helm-repo-volume", {
    t({
      "apiVersion: v1",
      "kind: Pod",
      "metadata:",
      "  name: {{ .Values.pod.name }}",
      "  labels:",
      "    app: {{ .Values.pod.app }}",
      "spec:",
      "  containers:",
      "  - image: "
    }), i(1, "nginx"),
    t({ "", "    name: " }), i(2, "nginx"),
    t({ "", "    volumeMounts:", "    - mountPath: " }), i(3, "/mypath"),
    t({ "", "      name: " }), i(4, "git-volume"),
    t({ "", "  volumes:", "  - name: " }), f(function(args) return args[1][1] end, {4}),
    t({ "", "    gitRepo:", "      repository: \"" }), i(5, "git@somewhere:me/my-git-repository.git"),
    t({ "\"", "      revision: \"" }), i(6, "22f1d8406d464b0c0874075539c1f2e96c253775"),
    t({ "\"" }),
    i(0),
}),

  s("helm-hostpath-volumes", {
    t({
      "apiVersion: v1",
      "kind: Pod",
      "metadata:",
      "  name: {{ .Values.pod.name }}",
      "  labels:",
      "    app: {{ .Values.pod.app }}",
      "spec:",
      "  os: { name: "
    }), i(1, "linux"), t(" }"),
    t({ "", "  nodeSelector:", "    kubernetes.io/os: " }), f(function(args) return args[1][1] end, {1}),
    t({ "", "  containers:", "  - name: " }), i(2, "test-webserver"),
    t({ "", "    image: " }), i(3, "registry.k8s.io/test-webserver:latest"),
    t({ "", "    volumeMounts:" }),
    t({ "", "    - mountPath: " }), i(4, "/var/local/aaa"),
    t({ "", "      name: " }), i(5, "mydir"),
    t({ "", "    - mountPath: " }), i(6, "/var/local/aaa/1.txt"),
    t({ "", "      name: " }), i(7, "myfile"),
    t({ "", "  volumes:" }),
    t({ "", "  - name: " }), f(function(args) return args[1][1] end, {5}),
    t({ "", "    hostPath:", "      path: " }), f(function(args) return args[1][1] end, {4}),
    t({ "", "      type: DirectoryOrCreate" }),
    t({ "", "  - name: " }), f(function(args) return args[1][1] end, {7}),
    t({ "", "    hostPath:", "      path: " }), f(function(args) return args[1][1] end, {6}),
    t({ "", "      type: FileOrCreate" }),
    i(0),
}),

s("helm-podspec-imagevolume", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "  labels:",
    "    app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".app }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    command:",
    "      {{- if .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command }}",
    "      {{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command | indent 6 }}",
    "      {{- else }}",
    "      - \"sleep\"",
    "      - \"infinity\"",
    "      {{- end }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.image | default \"debian\" }}",
    "    volumeMounts:",
    "    - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "      mountPath: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.mountPath | default \"/volume\" }}",
    "  volumes:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    emptyDir: {}"
  }),
  i(0),
}),

s("helm-persistentvolume-local", {
  t({
    "apiVersion: v1",
    "kind: PersistentVolume",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pv"), t({ ".name }}",
    "spec:",
    "  capacity:",
    "    storage: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".capacity | default \"100Gi\" }}",
    "  volumeMode: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volumeMode | default \"Filesystem\" }}",
    "  accessModes:",
    "  - {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".accessMode | default \"ReadWriteOnce\" }}",
    "  persistentVolumeReclaimPolicy: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".reclaimPolicy | default \"Delete\" }}",
    "  storageClassName: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storageClassName | default \"local-storage\" }}",
    "  local:",
    "    path: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".path | default \"/mnt/disks/ssd1\" }}",
    "  nodeAffinity:",
    "    required:",
    "      nodeSelectorTerms:",
    "      - matchExpressions:",
    "        - key: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".nodeAffinity.key | default \"kubernetes.io/hostname\" }}",
    "          operator: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".nodeAffinity.operator | default \"In\" }}",
    "          values:",
    "          - {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".nodeAffinity.value | default \"example-node\" }}",
  }),
  i(0),
}),


s("helm-podspec-nfsvolume", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "  labels:",
    "    app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".app }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    command:",
    "      {{- if .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command }}",
    "      {{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command | indent 6 }}",
    "      {{- else }}",
    "      - \"sleep\"",
    "      - \"infinity\"",
    "      {{- end }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.image | default \"debian\" }}",
    "    volumeMounts:",
    "    - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "      mountPath: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.mountPath | default \"/mnt/nfs\" }}",
    "  volumes:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    nfs:",
    "      server: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.server }}",
    "      path: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.path }}",
    "      readOnly: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.readOnly | default true }}",
  }),
  i(0),
}),

s("helm-podspec-portworxvolume", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "  labels:",
    "    app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".app }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    command:",
    "      {{- if .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command }}",
    "      {{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command | indent 6 }}",
    "      {{- else }}",
    "      - \"sleep\"",
    "      - \"infinity\"",
    "      {{- end }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.image | default \"debian\" }}",
    "    volumeMounts:",
    "    - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "      mountPath: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.mountPath | default \"/mnt/px\" }}",
    "  volumes:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.name }}",
    "    portworxVolume:",
    "      volumeID: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.volumeID }}",
    "      fsType: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.fsType | default \"ext4\" }}",
  }),
  i(0),
}),

s("helm-lamp-pod", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "podName"), t({ ".name }}",
    "  labels:",
    "    app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".app }}",
    "spec:",
    "  containers:",
    -- MySQL
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".mysql.name }}",
    "    command:",
    "      {{- if .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".mysql.command }}",
    "      {{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".mysql.command | indent 6 }}",
    "      {{- else }}",
    "      - \"sleep\"",
    "      - \"infinity\"",
    "      {{- end }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".mysql.image | default \"mysql:latest\" }}",
    "    volumeMounts:",
    "    - name: site-data",
    "      mountPath: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".mysql.mountPath | default \"/var/lib/mysql\" }}",
    "      subPath: mysql",
    -- PHP
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".php.name }}",
    "    command:",
    "      {{- if .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".php.command }}",
    "      {{ toYaml .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".php.command | indent 6 }}",
    "      {{- else }}",
    "      - \"sleep\"",
    "      - \"infinity\"",
    "      {{- end }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".php.image | default \"php:latest\" }}",
    "    volumeMounts:",
    "    - name: site-data",
    "      mountPath: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".php.mountPath | default \"/var/www/html\" }}",
    "      subPath: html",
    -- Volumes
    "  volumes:",
    "  - name: site-data",
    "    persistentVolumeClaim:",
    "      claimName: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.claimName | default \"" }),
      f(function(args) return (args[1][1] or "podName") .. "-data" end, {1}), t({ "\" }}",
  }),
  i(0),
}),




s("helm-pod-subpathexpr", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.image }}",
    "    command: [ \"sh\", \"-c\", {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.command }} ]",
    "    env:",
    "    - name: POD_NAME",
    "      valueFrom:",
    "        fieldRef:",
    "          apiVersion: v1",
    "          fieldPath: metadata.name",
    "    volumeMounts:",
    "    - name: workdir1",
    "      mountPath: /logs",
    "      # The variable expansion uses round brackets (not curly brackets).",
    "      subPathExpr: $(POD_NAME)",
    "  restartPolicy: Never",
    "  volumes:",
    "  - name: workdir1",
    "    hostPath:",
    "      path: /var/log/pods",
  }),
  i(0),
}),
s("helm-pod-mountpropagation", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  volumes:",
    "  - name: mnt",
    "    hostPath:",
    "      # tmpfs is mounted on /mnt/tmpfs",
    "      path: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".volume.hostPath }}",
    "  containers:",
    "  - name: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.name }}",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".container.image }}",
    "    args: [\"sleep\", \"infinity\"]",
    "    volumeMounts:",
    "      # /mnt-rro/tmpfs is not writable",
    "      - name: mnt",
    "        mountPath: /mnt-rro",
    "        readOnly: true",
    "        mountPropagation: None",
    "        recursiveReadOnly: Enabled",
    "      # /mnt-ro/tmpfs is writable",
    "      - name: mnt",
    "        mountPath: /mnt-ro",
    "        readOnly: true",
    "      # /mnt-rw/tmpfs is writable",
    "      - name: mnt",
    "        mountPath: /mnt-rw",
  }),
  i(0),
}),


s("helm-pv-recycler", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  restartPolicy: Never",
    "  volumes:",
    "  - name: vol",
    "    hostPath:",
    "      path: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".recycler.hostPath }}",
    "  containers:",
    "  - name: pv-recycler",
    "    image: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".recycler.image | default \"registry.k8s.io/busybox\" }}",
    "    command: [\"/bin/sh\", \"-c\", \"test -e /scrub && rm -rf /scrub/..?* /scrub/.[!.]* /scrub/*  && test -z \\\"$(ls -A /scrub)\\\" || exit 1\"]",
    "    volumeMounts:",
    "    - name: vol",
    "      mountPath: /scrub",
  }),
  i(0),
}),

s("helm-pv", {
  t({
    "apiVersion: v1",
    "kind: PersistentVolume",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pv"), t({ ".name }}",
    "spec:",
    "  capacity:",
    "    storage: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storage }}",
    "  volumeMode: Filesystem",
    "  accessModes:",
    "    - ReadWriteOnce",
    "  persistentVolumeReclaimPolicy: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".reclaimPolicy }}",
    "  storageClassName: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storageClassName }}",
    "  mountOptions:",
    "    - hard",
    "    - nfsvers=4.1",
    "  nfs:",
    "    path: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".nfs.path }}",
    "    server: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".nfs.server }}",
  }),
  i(0),
}),


s("helm-pvc", {
  t({
    "apiVersion: v1",
    "kind: PersistentVolumeClaim",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pvc"), t({ ".name }}",
    "spec:",
    "  accessModes:",
    "    - ReadWriteOnce",
    "  volumeMode: Filesystem",
    "  resources:",
    "    requests:",
    "      storage: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storage }}",
    "  storageClassName: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storageClassName }}",
    "  selector:",
    "    matchLabels:",
    "      release: \"{{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".selector.release }}\"",
    "    matchExpressions:",
    "      - {key: environment, operator: In, values: [{{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".selector.matchExpressions }}]}",
  }),
  i(0),
}),

s("helm-pvc1", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values."
  }), i(2, "container"), t({ ".name }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {2}), t({ ".image }}",
    "    volumeMounts:",
    "    - mountPath: \"{{ .Values." }), f(function(args) return args[1][1] end, {2}), t({ ".mountPath }}\"",
    "      name: {{ .Values."
  }), i(3, "volume"), t({ ".name }}",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {3}), t({ ".name }}",
    "    persistentVolumeClaim:",
    "      claimName: {{ .Values." }), f(function(args) return args[1][1] end, {3}), t({ ".claimName }}"}),
  i(0)
}),




s("helm-pv-raw-block-device", {
  t({
    "apiVersion: v1",
    "kind: PersistentVolume",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pv"), t({ ".name }}",
    "spec:",
    "  capacity:",
    "    storage: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storage }}",
    "  accessModes:",
    "    - ReadWriteOnce",
    "  volumeMode: Block",
    "  persistentVolumeReclaimPolicy: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".reclaimPolicy | default \"Retain\" }}",
    "  fc:",
    "    targetWWNs:",
    "      - \"{{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".fc.targetWWNs }}\"",
    "    lun: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".fc.lun }}",
    "    readOnly: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".fc.readOnly | default false }}",
  }),
  i(0),
}),

s("helm-pvc-raw-block-device", {
  t({
    "apiVersion: v1",
    "kind: PersistentVolumeClaim",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pvc"), t({ ".name }}",
    "spec:",
    "  accessModes:",
    "    - ReadWriteOnce",
    "  volumeMode: Block",
    "  resources:",
    "    requests:",
    "      storage: {{ .Values."}), f(function(args) return args[1][1] end, {1}), t({ ".storage }}",
  }),
  i(0),
}),

s("helm-pod-raw-block-device", {
  t({ "apiVersion: v1", "kind: Pod", "metadata:" }),
  t({ "  name: " }), f(function(args) return "{{ .Values." .. args[1][1] .. ".name }}" end, {1}),
  t({ "spec:" }),
  t({ "  containers:" }),
  t({ "    - name: " }), f(function(args) return "{{ .Values." .. args[2][1] .. ".name }}" end, {2}),
  t({ "      image: " }), f(function(args) return "{{ .Values." .. args[2][1] .. ".image }}" end, {2}),
  t({ "      command: [\"/bin/sh\", \"-c\"]" }),
  t({ "      args: [ \"" }), f(function(args) return "{{ .Values." .. args[2][1] .. ".args }}" end, {2}), t("\" ]"),
  t({ "      volumeDevices:" }),
  t({ "        - name: data" }),
  t({ "          devicePath: /dev/xvda" }),
  t({ "  volumes:" }),
  t({ "    - name: data" }),
  t({ "      persistentVolumeClaim:" }),
  t({ "        claimName: " }), f(function(args) return "{{ .Values." .. args[3][1] .. ".claimName }}" end, {3}),
  i(1, "pod"),
  i(2, "container"),
  i(3, "pvc"),
  i(0),
}),

-- ---------------------------------
-- s("helm-k8s-pvc-restore-snapshot-helm", {
--   t({ "apiVersion: v1", "kind: PersistentVolumeClaim", "metadata:" }),
--   t({ "  name: " }), i(1, "{{ .Values.pvc.name }}"),
--   t({ "spec:" }),
--   t({ "  storageClassName: " }), i(2, "{{ .Values.pvc.storageClassName }}"),
--   t({ "  dataSource:" }),
--   t({ "    name: " }), i(3, "{{ .Values.pvc.snapshotName }}"),
--   t({ "    kind: VolumeSnapshot" }),
--   t({ "    apiGroup: snapshot.storage.k8s.io" }),
--   t({ "  accessModes:" }),
--   t({ "    - ReadWriteOnce" }),
--   t({ "  resources:" }),
--   t({ "    requests:" }),
--   t({ "      storage: " }), i(4, "{{ .Values.pvc.storageSize }}"),
--   i(0),
-- }),

s("helm-pod-projected-allinone", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".containerName }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    command: [\"sleep\", \"3600\"]",
    "    volumeMounts:",
    "    - name: all-in-one",
    "      mountPath: \"/projected-volume\"",
    "      readOnly: true",
    "  volumes:",
    "  - name: all-in-one",
    "    projected:",
    "      sources:",
    "      - secret:",
    "          name: {{ .Values.secret1.name }}",
    "          items:",
    "            - key: username",
    "              path: my-group/{{ .Values.containerName }}",
    "      - downwardAPI:",
    "          items:",
    "            - path: labels",
    "              fieldRef:",
    "                fieldPath: metadata.labels",
    "            - path: cpu_limit",
    "              resourceFieldRef:",
    "                containerName: {{ .Values.containerName }}",
    "                resource: limits.cpu",
    "      - configMap:",
    "          name: {{ .Values.configMap.name }}",
    "          items:",
    "            - key: config",
    "              path: my-group/my-config"
  }),
  i(0),
}),


s("helm-pod-projected-secrets2", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".containerName }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    command: [\"sleep\", \"3600\"]",
    "    volumeMounts:",
    "    - name: all-in-one",
    "      mountPath: \"/projected-volume\"",
    "      readOnly: true",
    "  volumes:",
    "  - name: all-in-one",
    "    projected:",
    "      sources:",
    "      - secret:",
    "          name: {{ .Values.secret1.name }}",
    "          items:",
    "            - key: username",
    "              path: my-group/{{ .Values.secret1.someKey1 }}",
    "      - secret:",
    "          name: {{ .Values.secret2.name }}",
    "          items:",
    "            - key: password",
    "              path: my-group/{{ .Values.secret2.someKey2 }}",
    "              mode: 511"
  }),
  i(0),
}),

s("helm-pod-sa-token", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "pod"), t({ ".name }}",
    "spec:",
    "  serviceAccountName: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".serviceAccountName }}",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".containerName }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    command: [\"sleep\", \"3600\"]",
    "    volumeMounts:",
    "    - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".tokenVolumeName }}",
    "      mountPath: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".tokenMountPath }}\"",
    "      readOnly: true",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".tokenVolumeName }}",
    "    projected:",
    "      sources:",
    "      - serviceAccountToken:",
    "          audience: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".audience }}",
    "          expirationSeconds: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".expirationSeconds }}",
    "          path: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".tokenPath }}",
  }),
  i(0),
}),

s("helm-k8s-csi-inline-helm", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "podName"), t({ ".name }}",
    "spec:",
    "  containers:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".containerName }}",
    "    image: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".image }}",
    "    command: [\"sleep\", \"1000000\"]",
    "    volumeMounts:",
    "    - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeName }}",
    "      mountPath: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".mountPath }}\"",
    "  volumes:",
    "  - name: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeName }}",
    "    csi:",
    "      driver: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".driver }}",
    "      volumeAttributes:",
    "        {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeAttributes }}"
  }),
  i(0),
}),


s("helm-storageclass-helm", {
  t({
    "apiVersion: storage.k8s.io/v1",
    "kind: StorageClass",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "name"), t({ ".name }}",
    "  annotations:",
    "    storageclass.kubernetes.io/is-default-class: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".isDefaultClass }}\"",
    "provisioner: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".provisioner }}",
    "reclaimPolicy: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".reclaimPolicy }}",
    "allowVolumeExpansion: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".allowVolumeExpansion }}",
    "mountOptions:",
    "  - {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".mountOption }}",
    "volumeBindingMode: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".volumeBindingMode }}",
    "parameters:",
    "  guaranteedReadWriteLatency: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".guaranteedReadWriteLatency }}\""
  }),
  i(0),
})
,
s("helm-pod-sample-spec-func", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- ім’я компонента (pod name)
  t({
    "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- label component
  t({
    " }}\"",
    "    heritage: {{ .Release.Service }}",
    "    release: {{ .Release.Name }}",
    "  {{- with .Values.component.pod.labels }}",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "  {{- with .Values.component.pod.annotations }}",
    "  annotations:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "",
    "spec:",
    "  nodeSelector:",
    "    kubernetes.io/hostname: {{ .Values.component.nodeSelector.hostname }}",
    "  volumes:",
    "    - name: {{ .Values.component.volume.name }}",
    "      persistentVolumeClaim:",
    "        claimName: {{ .Values.component.volume.claimName }}",
    "  containers:",
    "    - name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- container name
  t({
    " }}",
    "      image: {{ .Values.component.container.image }}",
    "      ports:",
    "        - containerPort: {{ .Values.component.container.port }}",
    "          name: {{ .Values.component.container.portName }}",
    "      volumeMounts:",
    "        - mountPath: \"{{ .Values.component.container.mountPath }}\"",
    "          name: {{ .Values.component.volume.name }}",
  }),
  i(0),
}),


s("helm-efs-sc", {
  t({
    "apiVersion: storage.k8s.io/v1",
    "kind: StorageClass",
    "metadata:",
    "  name: {{ .Values.",
  }),
  i(1, "storageClass"), -- ключ у values.yaml
  t({ ".name }}",
    "provisioner: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".provisioner }}",
    "parameters:",
    "  provisioningMode: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".provisioningMode }}",
    "  fileSystemId: {{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".fileSystemId }}",
    "  directoryPerms: \"{{ .Values." }),
  f(function(args) return args[1][1] end, {1}),
  t({ ".directoryPerms }}\"",
  }),
  i(0),
}),


s("helm-deployment-sample-spec-func", {
  t({
    "apiVersion: apps/v1",
    "kind: Deployment",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- ім’я компонента
  t({
    "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- label component
  t({
    " }}\"",
    "    heritage: {{ .Release.Service }}",
    "    release: {{ .Release.Name }}",
    "  {{- with .Values.component.deployment.labels }}",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "  {{- with .Values.component.deployment.annotations }}",
    "  annotations:",
    "    {{- toYaml . | nindent 4 }}",
    "  {{- end }}",
    "",
    "spec:",
    "  replicas: {{ .Values.component.replicaCount | default 1 }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- selector component
  t({
    " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- pod labels
  t({
    " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      containers:",
    "        - name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- container name
  t({
    ".name }}",
    "          image: {{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default \"latest\" }}",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy | default \"IfNotPresent\" }}",
    "          ports:",
    "            - name: http",
    "              containerPort: {{ .Values.component.service.targetPorts.http | default 80 }}",
    "            - name: https",
    "              containerPort: {{ .Values.component.service.targetPorts.https | default 443 }}",
    "          envFrom:",
    "            - configMapRef:",
    "                name: {{ .Values.configMap.name }}",
    "          volumeMounts:",
    "            - name: config",
    "              mountPath: \"/config\"",
    "              readOnly: true",
    "      volumes:",
    "        - name: config",
    "          configMap:",
    "            name: {{ .Values.configMap.name }}",
    "            items:",
    "              - key: \"game.properties\"",
    "                path: \"game.properties\"",
    "              - key: \"user-interface.properties\"",
    "                path: \"user-interface.properties\"",
  }),
  i(0),
}),
s("helm-deployment-func", {
  t({
    "apiVersion: apps/v1",
    "kind: Deployment",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- ім’я компонента
  t({ "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "    heritage: {{ .Release.Service }}",
    "    release: {{ .Release.Name }}",
    "    {{- with .Values.component.deployment.labels }}",
    "      {{- toYaml . | nindent 4 }}",
    "    {{- end }}",
    "  annotations:",
    "    {{- with .Values.component.deployment.annotations }}",
    "      {{- toYaml . | nindent 4 }}",
    "    {{- end }}",
    "",
    "spec:",
    "  replicas: {{ .Values.component.replicaCount | default 1 }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ template \"chartName.name\" . }}",
    "      component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "      release: {{ .Release.Name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ template \"chartName.name\" . }}",
    "        component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}\"",
    "        release: {{ .Release.Name }}",
    "    spec:",
    "      containers:",
    "        - name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ " }}",
    "          image: {{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default \"latest\" }}",
    "          imagePullPolicy: {{ .Values.component.image.pullPolicy | default \"IfNotPresent\" }}",
    "          ports:",
    "            - name: http",
    "              containerPort: {{ .Values.component.service.targetPorts.http | default 80 }}",
    "            - name: https",
    "              containerPort: {{ .Values.component.service.targetPorts.https | default 443 }}",
    "          {{- with .Values.configMap.name }}",
    "          envFrom:",
    "            - configMapRef:",
    "                name: {{ . }}",
    "          {{- end }}",
    "          {{- with .Values.component.volumeMounts }}",
    "          volumeMounts:",
    "            {{- toYaml . | nindent 12 }}",
    "          {{- end }}",
    "      {{- with .Values.component.volumes }}",
    "      volumes:",
    "        {{- toYaml . | nindent 8 }}",
    "      {{- end }}",
  }),
  i(0),
}),





s("helm-secret-func", {
  t({
    "apiVersion: v1",
    "kind: Secret",
    "metadata:",
    "  name: {{ .Values.secret.",
  }),
  i(1, "name"), -- ім’я секрету
  t({ " }}",
    "type: Opaque",
    "data:",
    "  {{ .Values.secret.",
  }),
  f(function(args) return args[1][1] end, {1}), -- ім’я ключа/файла
  t("FileName }}: {{ .Values.secret."),
  f(function(args) return args[1][1] end, {1}), -- дані файлу
  t("FileData }}"),
  i(0),
}),

s("helm-secret-basic-auth-func", {
  t({
    "apiVersion: v1",
    "kind: Secret",
    "metadata:",
    "  name: {{ .Values.secret.",
  }),
  i(1, "name"), -- ім’я секрету
  t({
    " }}",
    "type: kubernetes.io/basic-auth",
    "stringData:",
    "  username: {{ .Values.secret.",
  }),
  f(function(args) return args[1][1] end, {1}), -- username
  t({ "Username }}" }),
  t({ "  password: {{ .Values.secret.", }),
  f(function(args) return args[1][1] end, {1}), -- password
  t({ "Password }}" }),
  i(0),
}),


s("helm-secret-ssh-auth-func", {
  t({
    "apiVersion: v1",
    "kind: Secret",
    "metadata:",
    "  name: {{ .Values.secret.",
  }),
  i(1, "name"), -- ім’я секрету
  t({
    " }}",
    "type: kubernetes.io/ssh-auth",
    "data:",
    "  ssh-privatekey: |-",
    "    {{ .Values.secret.",
  }),
  f(function(args) return args[1][1] end, {1}), -- sshPrivateKey
  t(" | indent 4 }}"),
  i(0),
}),


s("helm-secret-tls-sample-func", {
  t({
    "apiVersion: v1",
    "kind: Secret",
    "metadata:",
    "  name: {{ .Values.secret.",
  }),
  i(1, "name"), -- вводиш назву секрету один раз
  t({ " }}",
    "type: kubernetes.io/tls",
    "stringData:",
    "  tls.crt: |",
    "    {{ .Values.secret.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t({ "Crt | indent 4 }}",
    "  tls.key: |",
    "    {{ .Values.secret.",
  }),
  f(function(args) return args[1][1] end, {1}),
  t("Key | indent 4 }}"),
  i(0),
}),

s("helm-secret-bootstrap-token-func", {
  t({
    "apiVersion: v1",
    "kind: Secret",
    "metadata:",
    "  name: {{ .Values.secret.",
  }),
  i(1, "name"), -- ім’я секрету
  t({
    " }}",
    "  namespace: {{ .Values.secret.namespace }}",
    "type: bootstrap.kubernetes.io/token",
    "data:",
    "  auth-extra-groups: {{ .Values.secret.data.authExtraGroups }}",
    "  expiration: {{ .Values.secret.data.expiration }}",
    "  token-id: {{ .Values.secret.data.tokenId }}",
    "  token-secret: {{ .Values.secret.data.tokenSecret }}",
    "  usage-bootstrap-authentication: {{ .Values.secret.data.usageBootstrapAuthentication }}",
    "  usage-bootstrap-signing: {{ .Values.secret.data.usageBootstrapSigning }}",
  }),
  i(0),
}),


s("helm-secret-optional-mount-func", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ template \"chartName.component.",
  }),
  i(1, "fullname"), -- ім’я компонента (pod name)
  t({
    "\" . }}",
    "  labels:",
    "    app: {{ template \"chartName.name\" . }}",
    "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
    "    component: \"{{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- label component
  t({
    " }}\"",
    "    heritage: {{ .Release.Service }}",
    "    release: {{ .Release.Name }}",
    "    {{- with .Values.component.pod.labels }}",
    "      {{- toYaml . | nindent 4 }}",
    "    {{- end }}",
    "  annotations:",
    "    {{- with .Values.component.pod.annotations }}",
    "      {{- toYaml . | nindent 4 }}",
    "    {{- end }}",
    "",
    "spec:",
    "  containers:",
    "    - name: {{ .Values.component.",
  }),
  f(function(args) return args[1][1] end, {1}), -- container name
  t({
    " }}",
    "      image: {{ .Values.component.image.repository }}:{{ .Values.component.image.tag | default \"latest\" }}",
    "      imagePullPolicy: {{ .Values.component.image.pullPolicy | default \"IfNotPresent\" }}",
    "      volumeMounts:",
    "        - name: {{ .Values.component.volume.name }}",
    "          mountPath: \"{{ .Values.component.volume.mountPath }}\"",
    "          readOnly: true",
    "  volumes:",
    "    - name: {{ .Values.component.volume.name }}",
    "      secret:",
    "        secretName: {{ .Values.component.volume.secretName }}",
    "        optional: true",
  }),
  i(0),
}),


s("helm-k8s-pod-multi-resources-func", {
  t({
    "apiVersion: v1",
    "kind: Pod",
    "metadata:",
    "  name: {{ .Values.pod.name }}",
    "spec:",
    "  containers:",
    "    - name: "
  }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".name }}" end, {1}), -- контейнер app
  t({
    "      image: "
  }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".image }}" end, {1}),
  t({
    "      resources:",
    "        requests:",
    "          memory: "
  }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".resources.requests.memory }}" end, {1}),
  t({ "          cpu: " }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".resources.requests.cpu }}" end, {1}),
  t({ "        limits:",
      "          memory: " }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".resources.limits.memory }}" end, {1}),
  t({ "          cpu: " }),
  f(function(args) return "{{ .Values.containers." .. args[1][1] .. ".resources.limits.cpu }}" end, {1}),

  t({ "    - name: " }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".name }}" end, {2}), -- контейнер logAggregator
  t({ "      image: " }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".image }}" end, {2}),
  t({
    "      resources:",
    "        requests:",
    "          memory: "
  }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".resources.requests.memory }}" end, {2}),
  t({ "          cpu: " }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".resources.requests.cpu }}" end, {2}),
  t({ "        limits:",
      "          memory: " }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".resources.limits.memory }}" end, {2}),
  t({ "          cpu: " }),
  f(function(args) return "{{ .Values.containers." .. args[2][1] .. ".resources.limits.cpu }}" end, {2}),
  
  i(0),
}),



s("helm-labels-spec", {
  f(function(args)
    local comp = args[1][1]       
    local chart = args[2][1]      

    return table.concat({
      "labels:",
      string.format("  {{- if .Values.%s.service.labels }}", comp),
      string.format("    {{ toYaml .Values.%s.service.labels | indent 4 }}", comp),
      "  {{- end }}",
      string.format("  app: {{ template \"%s.name\" . }}", chart),
      "  chart: {{ .Chart.Name }}-{{ .Chart.Version }}",
      string.format("  component: \"{{ .Values.%s.name }}\"", comp),
      "  heritage: {{ .Release.Service }}",
      "  release: {{ .Release.Name }}",
      string.format("name: {{ template \"%s.%s.fullname\" . }}", chart, comp),
    }, "\n")
  end, {1, 2}),
  i(1, "component"),
  i(2, "chartName"),
  i(0),
}),


s("helm-service-spec", {
  t("spec:"),
  f(function(args)
    local comp = args[1][1]  -- значення плейсхолдера 1
    return table.concat({
      string.format('  type: "{{ .Values.%s.service.type }}"', comp),
      string.format('  clusterIP: "{{ .Values.%s.service.clusterIP }}"', comp),

      string.format('  {{- if .Values.%s.service.externalIPs }}', comp),
      '  externalIPs:',
      string.format('  {{ toYaml .Values.%s.service.externalIPs | indent 4 }}', comp),
      '  {{- end }}',

      string.format('  {{- if .Values.%s.service.loadBalancerIP }}', comp),
      string.format('  loadBalancerIP: "{{ .Values.%s.service.loadBalancerIP }}"', comp),
      '  {{- end }}',

      string.format('  {{- if .Values.%s.service.loadBalancerSourceRanges }}', comp),
      '  loadBalancerSourceRanges:',
      string.format('  {{ toYaml .Values.%s.service.loadBalancerSourceRanges | indent 4 }}', comp),
      '  {{- end }}',

      string.format('  {{- if and (semverCompare ">=1.7-0" .Capabilities.KubeVersion.GitVersion) (.Values.%s.service.externalTrafficPolicy) }}', comp),
      string.format('  externalTrafficPolicy: "{{ .Values.%s.service.externalTrafficPolicy }}"', comp),
      '  {{- end }}',

      string.format('  {{- if and (semverCompare ">=1.7-0" .Capabilities.KubeVersion.GitVersion) (.Values.%s.service.healthCheckNodePort) }}', comp),
      string.format('  healthCheckNodePort: {{ .Values.%s.service.healthCheckNodePort }}', comp),
      '  {{- end }}',
    }, "\n")
  end, {1}),
  i(1, "component"),
  i(0),
}),


s("helm-ports-spec", {
  t("  ports:"),
  f(function(args)
    local port = args[1][1] or "80"
    local targetPort = args[2][1] or port
    local protocol = args[3][1] or "TCP"
    local name = args[4][1] or "http"

    return string.format([[
  - port: %s
    targetPort: %s
    protocol: %s
    name: %s
]], port, targetPort, protocol, name)
  end, {1,2,3,4}),
  i(0)
}),


--   s("helm-portHTTP-spec", {
--     t("  - name: http"),
--     t({"", "    port: 80"}),
--     t({"", "    protocol: TCP"}),
--     t({"", "    targetPort: {{ .Values."}), i(1, "value_key"), t(".service.targetPorts.http }}"),
--     t({"", "    {{- if (and (eq .Values."}), f(function(args) return args[1][1] end, {1}),
--     t('.service.type "NodePort") (not (empty .Values.'),
--     f(function(args) return args[1][1] end, {1}),
--     t(".service.nodePorts.http))) }}"),
--     t({"", "    nodePort: {{ .Values."}), f(function(args) return args[1][1] end, {1}),
--     t(".service.nodePorts.http }}"),
--     t({"", "    {{- end }}"}),
--     i(0),
--   }),

--    s("helm-portHTTPS-spec", {
--     t("  - name: https"),
--     t({"", "    port: 443"}),
--     t({"", "    protocol: TCP"}),
--     t({"", "    targetPort: {{ .Values."}), i(1, "value_key"), t(".service.targetPorts.https }}"),
--     t({"", "    {{- if (and (eq .Values."}),
--     f(function(args) return args[1][1] end, {1}),
--     t('.service.type "NodePort") (not (empty .Values.'),
--     f(function(args) return args[1][1] end, {1}),
--     t(".service.nodePorts.https))) }}"),
--     t({"", "    nodePort: {{ .Values."}),
--     f(function(args) return args[1][1] end, {1}),
--     t(".service.nodePorts.https }}"),
--     t({"", "    {{- end }}"}),
--     i(0),
--   }),






--  s("helm-deploy-spec", {
--   t({ "{{- if .Values." }), i(1, "component"), t(".enabled }}" ),
--   t({ "", "apiVersion: extensions/v1beta1", "kind: Deployment", "metadata:" }),
--   t({ "  labels:", "    app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
--   t({ "    chart: {{ .Chart.Name }}-{{ .Chart.Version }}" }),
--   t({ "    component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
--   t({ "    heritage: {{ .Release.Service }}" }),
--   t({ "    release: {{ .Release.Name }}" }),
--   t({ "  name: {{ template \"" }), f(function(args) return args[1][1] end, {2}), t("."), f(function(args) return args[1][1] end, {1}), t(".fullname\" . }}" ),
--   i(0),
-- }),


--   s("helm-spec-spec", {
--     t({ "spec:", "  replicas: {{ .Values." }), i(1, "component"), t(".replicaCount }}" ),
--     t({ "  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}", "  template:", "    metadata:" }),
--     t({ "    {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".podAnnotations }}" ),
--     t({ "      annotations:", "      {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".podAnnotations | indent 8 }}" ),
--     t({ "    {{- end }}" }),
--     t({ "      labels:", "        app: {{ template \"" }), i(2, "chartName"), t(".name\" . }}" ),
--     t({ "        component: \"{{ .Values." }), f(function(args) return args[1][1] end, {1}), t(".name }}\"" ),
--     t({ "        release: {{ .Release.Name }}" }),
--     t({ "        {{- if .Values." }), f(function(args) return args[1][1] end, {1}), t(".podLabels }}" ),
--     t({ "        {{ toYaml .Values." }), f(function(args) return args[1][1] end, {1}), t(".podLabels | indent 8 }}" ),
--     t({ "        {{- end }}" }),
--     t({ "    spec:" }),
--     t({ "      {{- if .Values.imagePullSecrets }}" }),
--     t({ "      imagePullSecrets:", "      {{ toYaml .Values.imagePullSecrets | indent 8 }}" }),
--     t({ "      {{- end }}" }),
--     i(0),
--   }),

--   s("helm-imagePullSecrets-spec", {
--     t({ "  {{- if .Values.imagePullSecrets }}" }),
--     t({ "  imagePullSecrets:", "  {{ toYaml .Values.imagePullSecrets | indent 8 }}" }),
--     t({ "  {{- end }}" }),
--     i(0),
--   }),


--   s("helm-imagePullPolicy-spec", {
--   t("imagePullPolicy: {{ .Values."),
--   i(1, "imagePullPolicy"),
--   t(" }}"),
--   t({ "", "" }),
--   i(0),
-- }),

--   s("helm-containers-spec", {
--     t("containers:"),
--     t({ "", "  - name: {{ template \"" }),
--     i(2, "chartName"),
--     t(".name\" . }}-{{ .Values."),
--     i(1, "component"),
--     t(".name }}"),
--     t({ "", "    image: \"{{ .Values." }),
--     f(function(args) return args[1][1] end, {1}),
--     t(".image.repository }}:{{ .Values."),
--     f(function(args) return args[1][1] end, {1}),
--     t(".image.tag }}\""),
--     t({ "", "    imagePullPolicy: \"{{ .Values." }),
--     f(function(args) return args[1][1] end, {1}),
--     t(".image.pullPolicy }}\""),
--     t({ "", "" }),
--     i(0),
--   }),


s("helm-deploy-args", {
  t({
    "apiVersion: apps/v1",
    "kind: Deployment",
    "metadata:",
    "  name: {{ .Values."
  }), i(1, "deployment"), t({ ".name }}",
    "spec:",
    "  replicas: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".replicas | default 1 }}",
    "  selector:",
    "    matchLabels:",
    "      app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".name }}",
    "  template:",
    "    metadata:",
    "      labels:",
    "        app: {{ .Values." }), f(function(args) return args[1][1] end, {1}), t({ ".name }}",
    "    spec:",
    "      containers:",
    "      - name: {{ .Values." }), i(2, "container"), t({ ".name }}",
    "        image: {{ .Values." }), f(function(args) return args[1][1] end, {2}), t({ ".image | default \"latest\" }}",
    "        args:",
    "        {{- range $key, $value := .Values." }), i(3, "deployment.extraArgs"), t({ " }}",
    "          {{- if $value }}",
    "          - --{{ $key }}={{ $value }}",
    "          {{- else }}",
    "          - --{{ $key }}",
    "          {{- end }}",
    "        {{- end }}"
  }),
  i(0)
}),


--    s("helm-PersistentVolumeClaim-spec", {
--     t({
--       "\tkind: PersistentVolumeClaim",
--       "\tapiVersion: v1",
--       "\tmetadata:",
--       "\t  name: {{ template \""
--     }),
--     i(2, "chartName"),
--     t({ ".$1.fullname\" . }", "\t  labels:", "\t\tapp: {{ template \"" }),
--     f(function(args) return args[1][1] end, {2}),
--     t({ ".name\" . }}", "\t\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"", "\t\trelease: \"{{ .Release.Name }}\"", "\t\theritage: \"{{ .Release.Service }}\"", "\tspec:", "\t  accessModes:", "\t\t- {{ .Values." }),
--     i(1, "component"),
--     t(".persistence.accessMode | quote }}", "\t  resources:", "\t\trequests:", "\t\t  storage: {{ .Values."),
--     rep(1),
--     t(".persistence.size | quote }}"),
--     t({ "\t{{- if .Values." .. "component" .. ".persistence.storageClass }}",
--         "\t{{- if (eq \"-\" .Values." .. "component" .. ".persistence.storageClass) }}",
--         "\t  storageClassName: \"\"",
--         "\t{{- else }}",
--         "\t  storageClassName: \"{{ .Values." }),
--     rep(1),
--     t(".persistence.storageClass }}\""),
--     t({ "\t{{- end }}", "\t{{- end }}", "\t{{- end }}", "\t{{- end }}" }),
--     i(0),
--   }),




 s("helm-pvc-spec", {
  t({
    "kind: PersistentVolumeClaim",
    "apiVersion: v1",
    "metadata:",
    "  name: {{ template \"",
  }),
  i(1, "chartName"),
  t(".fullname\" . }}"),
  t({
    "",
    "  labels:",
    "    chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"",
    "    release: \"{{ .Release.Name }}\"",
    "    heritage: \"{{ .Release.Service }}\"",
    "    app: {{ template \"",
  }),
  f(function(args) return args[1][1] .. ".fullname" end, {1}),
  t(" . }}"),
  t({
    "",
    "spec:",
    "  accessModes:",
    "    - {{ .Values.persistence.accessMode | quote }}",
    "  resources:",
    "    requests:",
    "      storage: {{ .Values.persistence.size | quote }}",
    "{{- if .Values.persistence.storageClass }}",
    "  {{- if (eq \"-\" .Values.persistence.storageClass) }}",
    "  storageClassName: \"\"",
    "  {{- else }}",
    "  storageClassName: \"{{ .Values.persistence.storageClass }}\"",
    "  {{- end }}",
    "{{- end }}",
  }),
  i(0),
}),






 s("helm-deploy-values-helm", {
  i(1, "componentName"),
  t({ ":" }),
  t({ "\n  name: " }), rep(1),
  t({
    "\n  image:",
    "\n    repository: {{ .Values.",
  }), rep(1),
  t({ ".image.repository | default \"\" }}",
    "\n    tag: {{ .Values.",
  }), rep(1),
  t({ ".image.tag | default \"\" }}",
    "\n    pullPolicy: {{ .Values.",
  }), rep(1),
  t({ ".image.pullPolicy | default \"IfNotPresent\" }}",
    "\n  hostNetwork: {{ .Values.",
  }), rep(1),
  t({ ".hostNetwork | default false }}",
    "\n  dnsPolicy: {{ .Values.",
  }), rep(1),
  t({ ".dnsPolicy | default \"ClusterFirst\" }}",
    "\n  daemonset:",
    "\n    useHostPort: {{ .Values.",
  }), rep(1),
  t({ ".daemonset.useHostPort | default false }}",
    "\n  podLabels: {{ toYaml .Values." }), rep(1),
  t({ ".podLabels | nindent 4 | default \"{}\" }}",
    "\n  scope:",
    "\n    enabled: {{ .Values." }), rep(1),
  t({ ".scope.enabled | default false }}",
    "\n    namespace: {{ .Values." }), rep(1),
  t({ ".scope.namespace | default .Release.Namespace }}",
    "\n  extraArgs: {{ toYaml .Values." }), rep(1),
  t({ ".extraArgs | nindent 4 | default \"{}\" }}",
    "\n  extraEnvs: {{ toYaml .Values." }), rep(1),
  t({ ".extraEnvs | nindent 4 | default \"[]\" }}",
    "\n  kind: {{ .Values." }), rep(1),
  t({ ".kind | default \"Deployment\" }}",
    "\n  updateStrategy: {{ toYaml .Values." }), rep(1),
  t({ ".updateStrategy | nindent 4 | default \"{}\" }}",
    "\n  minReadySeconds: {{ .Values." }), rep(1),
  t({ ".minReadySeconds | default 0 }}",
    "\n  tolerations: {{ toYaml .Values." }), rep(1),
  t({ ".tolerations | nindent 4 | default \"[]\" }}",
    "\n  affinity: {{ toYaml .Values." }), rep(1),
  t({ ".affinity | nindent 4 | default \"{}\" }}",
    "\n  nodeSelector: {{ toYaml .Values." }), rep(1),
  t({ ".nodeSelector | nindent 4 | default \"{}\" }}",
    "\n  podAnnotations: {{ toYaml .Values." }), rep(1),
  t({ ".podAnnotations | nindent 4 | default \"{}\" }}",
    "\n  replicaCount: {{ .Values." }), rep(1),
  t({ ".replicaCount | default 1 }}",
    "\n  minAvailable: {{ .Values." }), rep(1),
  t({ ".minAvailable | default 1 }}",
    "\n  resources: {{ toYaml .Values." }), rep(1),
  t({ ".resources | nindent 4 | default \"{}\" }}",
    "\n  autoscaling:",
    "\n    enabled: {{ .Values." }), rep(1),
  t({ ".autoscaling.enabled | default false }}",
    "\n  extraContainers: {{ toYaml .Values." }), rep(1),
  t({ ".extraContainers | nindent 4 | default \"{}\" }}",
    "\n  extraVolumeMounts: {{ toYaml .Values." }), rep(1),
  t({ ".extraVolumeMounts | nindent 4 | default \"{}\" }}",
    "\n  extraVolumes: {{ toYaml .Values." }), rep(1),
  t({ ".extraVolumes | nindent 4 | default \"{}\" }}",
    "\n  extraInitContainers: {{ toYaml .Values." }), rep(1),
  t({ ".extraInitContainers | nindent 4 | default \"[]\" }}",
    "\n  lifecycle: {{ toYaml .Values." }), rep(1),
  t({ ".lifecycle | nindent 4 | default \"{}\" }}",
    "\nrevisionHistoryLimit: {{ .Values." }), rep(1),
  t({ ".revisionHistoryLimit | default 10 }}" }),
  i(0),
}),





s("helm-readinessProbe-values-helm", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "  readinessProbe:",
    "    failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}",
    "    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 10 }}",
    "    periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}",
    "    successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}",
    "    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 1 }}",
    "    port: {{ .Values.readinessProbe.port | default 10254 }}",
  }),
  i(0),
}),

s("helm-livenessProbe", {
  f(function(args) return args[1][1] .. ":" end, {1}),
  t({
    "  livenessProbe:",
    "    failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}",
    "    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 10 }}",
    "    periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}",
    "    successThreshold: {{ .Values.livenessProbe.successThreshold | default 1 }}",
    "    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 1 }}",
    "    port: {{ .Values.livenessProbe.port | default 10254 }}",
  }),
  i(0),
}),


--   ---------
  
-- s("cilium-egress-helm", {
--   f(function(args) return args[1][1] .. ":" end, {1}),
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.networkPolicy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: {{ .Values.networkPolicy.selectorRole | quote }}",
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        role: {{ .Values.networkPolicy.egressRole | quote }}",
--   }),
--   i(0),
-- }),


-- s("cilium-bgp-helm", {
--   t({
--     "apiVersion: cilium.io/v2alpha1",
--     "kind: CiliumBGPPeeringPolicy",
--     "metadata:",
--     "  name: {{ .Values.bgpPolicy.name | quote }}",
--     "spec:",
--     "  nodeSelector:",
--     "    matchLabels:",
--     "      kubernetes.io/os: {{ .Values.bgpPolicy.nodeOs | quote }}",
--     "  virtualRouters:",
--     "    - exportPodCIDR: {{ .Values.bgpPolicy.exportPodCIDR | default true }}",
--     "      localASN: {{ .Values.bgpPolicy.localASN }}",
--     "      neighbors:",
--     "        - peerASN: {{ .Values.bgpPolicy.neighbor.peerASN }}",
--     "          peerAddress: {{ .Values.bgpPolicy.neighbor.peerAddress | quote }}",
--     "          gracefulRestart:",
--     "            enabled: {{ .Values.bgpPolicy.neighbor.gracefulRestart.enabled }}",
--     "            restartTimeSeconds: {{ .Values.bgpPolicy.neighbor.gracefulRestart.time }}",
--     "      serviceSelector:",
--     "        matchExpressions:",
--     "          - key: {{ .Values.bgpPolicy.serviceSelector.key | quote }}",
--     "            operator: {{ .Values.bgpPolicy.serviceSelector.operator | quote }}",
--     "            values:",
--     "              {{- range .Values.bgpPolicy.serviceSelector.values }}",
--     "              - {{ . | quote }}",
--     "              {{- end }}",
--   }),
--   i(0),
-- }),



-- s("cilium-dns-policy-helm", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchExpressions:",
--     "      - key: \"io.kubernetes.pod.namespace\"",
--     "        operator: \"NotIn\"",
--     "        values:",
--     "          {{- range .Values.policy.endpointSelector.notInNamespaces }}",
--     "          - {{ . | quote }}",
--     "          {{- end }}",
--     "      - key: \"k8s-app\"",
--     "        operator: \"NotIn\"",
--     "        values:",
--     "          {{- range .Values.policy.endpointSelector.notInApps }}",
--     "          - {{ . | quote }}",
--     "          {{- end }}",
--     "  enableDefaultDeny:",
--     "    egress: {{ .Values.policy.enableDefaultDeny.egress }}",
--     "    ingress: {{ .Values.policy.enableDefaultDeny.ingress }}",
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            io.kubernetes.pod.namespace: {{ .Values.policy.egress.toNamespace | quote }}",
--     "            k8s-app: {{ .Values.policy.egress.toApp | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"53\"",
--     "              protocol: TCP",
--     "            - port: \"53\"",
--     "              protocol: UDP",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),



-- s("cilium-external-lockdown", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingressDeny:",
--     "    - fromEntities:",
--     "        - {{ .Values.policy.denyEntity | quote }}",
--     "  ingress:",
--     "    - fromEntities:",
--     "        - {{ .Values.policy.allowEntity | quote }}",
--   }),
--   i(0),
-- }),

-- s("cilium-lockdown", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: \"Allow a minimum set of required ports on ingress of worker nodes\"",
--     "  nodeSelector:",
--     "    matchLabels:",
--     "      type: ",
--   }),
--   i(2, "{{ .Values.nodeType | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEntities:",
--     "    - remote-node",
--     "    - health",
--     "  - toPorts:",
--     "    - ports:",
--     "      - port: \"22\"",
--     "        protocol: TCP",
--     "      - port: \"6443\"",
--     "        protocol: TCP",
--     "      - port: \"2379\"",
--     "        protocol: TCP",
--     "      - port: \"4240\"",
--     "        protocol: TCP",
--     "      - port: \"8472\"",
--     "        protocol: UDP",
--   }),
--   i(0),
-- }),

-- s("cilium-ingress-selective", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.policy.description | quote }}"),
--   t({
--     "",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.endpointSelectorName | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(4, "{{ .Values.fromEndpointsName | quote }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-kube-dns-ingress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.policy.description | quote }}"),
--   t({
--     "",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.policy.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "      k8s-app: ",
--   }),
--   i(4, "{{ .Values.policy.app | default \"kube-dns\" | quote }}"),
--   t({
--     "",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(5, "{{ .Values.policy.port | default \"53\" }}"),
--   t({
--     "\"",
--     "        protocol: ",
--   }),
--   i(6, "{{ .Values.policy.protocol | default \"UDP\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-health-checks", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      'reserved:health': ''",
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(2, "{{ .Values.policy.ingressEntity | default \"remote-node\" }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.policy.egressEntity | default \"remote-node\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-init-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policy.name | quote }}"),
--   t({
--     "specs:",
--     "  - endpointSelector:",
--     "      matchLabels:",
--     "        \"reserved:init\": \"\"",
--     "    ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(2, "{{ .Values.policy.ingressEntity | default \"host\" }}"),
--   t({
--     "    egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.policy.egressEntity | default \"all\" }}"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: \"",
--   }),
--   i(4, "{{ .Values.policy.port | default \"53\" }}"),
--   t({
--     "\"",
--     "          protocol: ",
--   }),
--   i(5, "{{ .Values.policy.protocol | default \"UDP\" }}"),
--   t({""}),
--   i(0),
-- }),

-- s("cilium-default-deny", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector: {}  # Applies to all pods",
--     "  enableDefaultDeny:",
--     "    ingress: {{ .Values.policy.enableIngress | default true }}",
--     "    egress: {{ .Values.policy.enableEgress | default true }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-backend-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: {{ .Values.policy.selectorTier | quote }}",
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            tier: {{ .Values.policy.ingressFromTier | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"80\"",
--     "    - fromCIDRSet:",
--     "      - cidr: {{ .Values.policy.ingressCidr | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"80\"",
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: \"GET\"",
--     "                path: \"/docs\"",
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            tier: {{ .Values.policy.egressToTier | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"7379\"",
--     "    - toFQDNs:",
--     "        - matchPattern: \"*.cloud.google.com\"",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"443\"",
--     "        - ports:",
--     "            - port: \"80\"",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            io.kubernetes.pod.namespace: {{ .Values.policy.dnsNamespace | quote }}",
--     "            k8s-app: {{ .Values.policy.dnsApp | quote }}",
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"53\"",
--     "              protocol: UDP",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-wildcard-from-endpoints", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  description: {{ .Values.policy.description | quote }}",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      k8s:io.kubernetes.pod.namespace: {{ .Values.policy.namespace | quote }}",
--     "      k8s-app: {{ .Values.policy.app | quote }}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.port | quote }}",
--     "        protocol: {{ .Values.policy.protocol | upper | quote }}",
--   }),
--   i(0),
-- })
-- ,

-- s("helm-cilium-clusterwide-selective", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  description: {{ .Values.policy.description | quote }}",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: {{ .Values.policy.targetLabel | quote }}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        name: {{ .Values.policy.sourceLabel | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-health-checks", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumClusterwideNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      'reserved:health': ''",
--     "  ingress:",
--     "    - fromEntities:",
--     "      - {{ .Values.policy.ingressEntity | quote }}",
--     "  egress:",
--     "    - toEntities:",
--     "      - {{ .Values.policy.egressEntity | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-egress-gateway-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumEgressGatewayPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  selectors:",
--     "  - podSelector:",
--     "      matchLabels:",
--     "        org: {{ .Values.policy.selector.org | quote }}",
--     "        class: {{ .Values.policy.selector.class | quote }}",
--     "        io.kubernetes.pod.namespace: {{ .Values.policy.selector.namespace | quote }}",
--     "  destinationCIDRs:",
--     "  - {{ .Values.policy.destinationCIDR | quote }}",
--     "  egressGateway:",
--     "    nodeSelector:",
--     "      matchLabels:",
--     "        egress-node: {{ .Values.policy.egressNodeLabelValue | quote }}",
--     "    egressIP: {{ .Values.policy.egressIP | quote }}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-egress-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2alpha1\"",
--     "kind: CiliumEgressGatewayPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  selectors:",
--     "    - podSelector:",
--     "        matchLabels:",
--     "          role: {{ .Values.policy.selector.role | quote }}",
--     "  destinationCIDRs:",
--     "    - {{ .Values.policy.destinationCIDR | quote }}",
--     "  egressGateway:",
--     "    nodeSelector:",
--     "      matchLabels:",
--     "        egress-node: {{ .Values.policy.egressNodeLabelValue | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-lb-ip-pool", {
--   t({
--     "apiVersion: \"cilium.io/v2alpha1\"",
--     "kind: CiliumLoadBalancerIPPool",
--     "metadata:",
--     "  name: {{ .Values.pool.name | quote }}",
--     "spec:",
--     "  cidrs:",
--     "  - cidr: {{ .Values.pool.cidr | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-database-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "  namespace: {{ .Values.policy.namespace | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: {{ .Values.policy.selector.tier | quote }}",
--     "  ingress:",
--     "    - {}",
--     "  egress:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("helm-cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--   }),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: {{ .Values.policy.selector.org | quote }}",
--     "      class: {{ .Values.policy.selector.class | quote }}",
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: {{ .Values.policy.egress.fqdn | quote }}",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: {{ .Values.policy.egress.dns.namespace | quote }}",
--     "        k8s:k8s-app: {{ .Values.policy.egress.dns.app | quote }}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.egress.dns.port | quote }}",
--     "        protocol: {{ .Values.policy.egress.dns.protocol | quote }}",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: {{ .Values.policy.egress.dns.matchPattern | quote }}",
--   }),
--   i(0),
-- }),


-- s("helm-cilium-fqdn-policy", {
--   t({
--     "{{- if .Values.enabled }}",
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: {{ .Values.policy.name | quote }}",
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: {{ .Values.policy.selector.org | quote }}",
--     "      class: {{ .Values.policy.selector.class | quote }}",
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: {{ .Values.policy.egress.fqdnPattern | quote }}",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: {{ .Values.policy.egress.dns.namespace | quote }}",
--     "        k8s:k8s-app: {{ .Values.policy.egress.dns.app | quote }}",
--     "    toPorts:",
--     "    - ports:",
--     "      - port: {{ .Values.policy.egress.dns.port | quote }}",
--     "        protocol: {{ .Values.policy.egress.dns.protocol | upper | quote }}",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: {{ .Values.policy.egress.dns.matchPattern | quote }}",
--     "{{- end }}",
--   }),
--   i(0),
-- }),

-- s("cilium-database-policy", {
--   t({
--     "apiVersion: cilium.io/v2",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"default\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      tier: ",
--   }),
--   i(3, "{{ .Values.tier | default \"database\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - {}",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            tier: ",
--   }),
--   i(4, "{{ .Values.ingressFromTier | default \"backend\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: \"",
--   }),
--   i(5, "{{ .Values.ingressPort | default \"7379\" }}"),
--   t({
--     "\"",
--     "  egress:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.matchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(5, "{{ .Values.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(6, "{{ .Values.k8sApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(7, "53"),
--   t({
--     "\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.matchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(5, "{{ .Values.namespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(6, "{{ .Values.k8sApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"",
--   }),
--   i(7, "53"),
--   t({
--     "\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-fqdn-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      org: ",
--   }),
--   i(2, "{{ .Values.org | default \"empire\" | quote }}"),
--   t({
--     "      class: ",
--   }),
--   i(3, "{{ .Values.class | default \"mediabot\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toFQDNs:",
--     "    - matchPattern: ",
--   }),
--   i(4, "{{ .Values.fqdnMatchPattern | default \"*.github.com\" | quote }}"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(5, "{{ .Values.fqdnPort | default \"443\" | quote }}"),
--   t({
--     "          protocol: TCP",
--   }),
--   t({
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(6, "{{ .Values.kubeDNSNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s:k8s-app: ",
--   }),
--   i(7, "{{ .Values.kubeDNSApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: \"53\"",
--     "        protocol: ANY",
--     "      rules:",
--     "        dns:",
--     "        - matchPattern: \"*\"",
--   }),
--   i(0),
-- }),

-- s("cilium-httpbin-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"default\" | quote }}"),
--   t({
--     "specs:",
--     "  - endpointSelector:",
--     "      matchLabels:",
--     "        app: ",
--   }),
--   i(2, "{{ .Values.app | default \"httpbin\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromEndpoints:",
--     "      - matchExpressions:",
--     "          - key: ",
--   }),
--   i(3, "{{ .Values.matchExpressionKey | default \"io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "            operator: In",
--     "            values:",
--   }),
--   i(4, "- red\n            - blue"),
--   t({
--     "      toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "          protocol: TCP",
--   }),
--   i(0),
-- }),

-- s("cilium-cross-cluster-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-cross-cluster\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow x-wing in cluster1 to contact rebel-base in cluster2\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.sourceName | default \"x-wing\" | quote }}"),
--   t({
--     "      io.cilium.k8s.policy.cluster: ",
--   }),
--   i(4, "{{ .Values.sourceCluster | default \"cluster1\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(5, "{{ .Values.destinationName | default \"rebel-base\" | quote }}"),
--   t({
--     "        io.cilium.k8s.policy.cluster: ",
--   }),
--   i(6, "{{ .Values.destinationCluster | default \"cluster2\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l3-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l3-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"backend\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        role: ",
--   }),
--   i(3, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-allow-all-to-victim", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-all-to-victim\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"victim\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - {}",
--   }),
--   i(0),
-- }),

-- s("cilium-deny-all-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "\"deny-all-egress\""),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "restricted"),
--   t({
--     "  egress:",
--     "  - {}",
--   }),
--   i(0),
-- }),


-- s("k8s-encryption-config", {
--   t({
--     "kind: EncryptionConfig",
--     "apiVersion: v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.keyName | default \"key1\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.encryptionKey | required \"ENCRYPTION_KEY is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-configuration", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - secretbox:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.key1Name | default \"key1\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.encryptionKey1 | required \"ENCRYPTION_KEY_1 is required\" }}"),
--   t({
--     "            - name: ",
--   }),
--   i(3, "{{ .Values.key2Name | default \"key2\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(4, "{{ .Values.encryptionKey2 | required \"ENCRYPTION_KEY_2 is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-aescbc", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - secrets",
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(1, "{{ .Values.activeKeyName | default \"active-key\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(2, "{{ .Values.activeKey | required \"ACTIVE_ENCRYPTION_KEY is required\" }}"),
--   t({
--     "            - name: ",
--   }),
--   i(3, "{{ .Values.oldKeyName | default \"old-key\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(4, "{{ .Values.oldKey | required \"OLD_ENCRYPTION_KEY is required\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-identity-helm", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--     "      - ",
--   }),
--   i(1, "{{ .Values.resource | default \"secrets\" }}"),
--   t({
--     "    providers:",
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("k8s-encryption-config", {
--   t({
--     "kind: EncryptionConfiguration",
--     "apiVersion: apiserver.config.k8s.io/v1",
--     "resources:",
--     "  - resources:",
--   }),
--   i(1, "- secrets\n      - configmaps"),
--   t({
--     "    providers:",
--     "      - aescbc:",
--     "          keys:",
--     "            - name: ",
--   }),
--   i(2, "{{ .Values.aescbcKeyName | default \"main\" }}"),
--   t({
--     "              secret: ",
--   }),
--   i(3, "{{ .Values.aescbcSecret | default \"${ENCRYPTION_KEY}\" }}"),
--   t({
--     "      - identity: {}",
--   }),
--   i(0),
-- }),

-- s("cilium-requires-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"requires-rule\" | quote }}"),
--   t({
--     "specs:",
--     "  - description: ",
--   }),
--   i(2, "{{ .Values.description | default \"For endpoints with env=prod, only allow if source also has label env=prod\" | quote }}"),
--   t({
--     "    endpointSelector:",
--     "      matchLabels:",
--     "        env: ",
--   }),
--   i(3, "{{ .Values.endpointEnv | default \"prod\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromRequires:",
--     "      - matchLabels:",
--     "          env: ",
--   }),
--   i(4, "{{ .Values.fromEnv | default \"prod\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l3-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l3-rule\" | quote }}"),
--   t({
--     "specs:",
--     "  - description: ",
--   }),
--   i(2, "{{ .Values.description | default \"For endpoints with env=prod, allow if source also has label role=frontend\" | quote }}"),
--   t({
--     "    endpointSelector:",
--     "      matchLabels:",
--     "        env: ",
--   }),
--   i(3, "{{ .Values.endpointEnv | default \"prod\" | quote }}"),
--   t({
--     "    ingress:",
--     "    - fromEndpoints:",
--     "      - matchLabels:",
--     "          role: ",
--   }),
--   i(4, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   i(0),
-- }),



-- s("cilium-service-egress-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"service-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      id: ",
--   }),
--   i(2, "{{ .Values.appId | default \"app2\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toServices:",
--     "    - k8sService:",
--     "        serviceName: ",
--   }),
--   i(3, "{{ .Values.serviceName | default \"myservice\" | quote }}"),
--   t({
--     "        namespace: ",
--   }),
--   i(4, "{{ .Values.serviceNamespace | default \"default\" | quote }}"),
--   t({
--     "    - k8sServiceSelector:",
--     "        selector:",
--     "          matchLabels:",
--     "            env: ",
--   }),
--   i(5, "{{ .Values.selectorEnv | default \"staging\" | quote }}"),
--   t({
--     "        namespace: ",
--   }),
--   i(6, "{{ .Values.selectorNamespace | default \"another-namespace\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-dev-to-kube-apiserver", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"dev-to-kube-apiserver\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"kube-apiserver\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-dev-to-host", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"dev-to-host\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"host\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-dev-from-nodes", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-dev-from-nodes-in-cluster\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"dev\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entities.first | default \"host\" | quote }}"),
--   t({
--     "      - ",
--   }),
--   i(4, "{{ .Values.entities.second | default \"remote-node\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-from-world-to-role-public", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"from-world-to-role-public\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.roleLabel | default \"public\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - ",
--   }),
--   i(3, "{{ .Values.entity | default \"world\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-prod-from-control-plane", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-prod-from-control-plane-nodes\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      env: ",
--   }),
--   i(2, "{{ .Values.envLabel | default \"prod\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromNodes:",
--     "        - matchLabels:",
--     "            ",
--   }),
--   i(3, "{{ .Values.nodeLabelKey | default \"node-role.kubernetes.io/control-plane\" | quote }}"),
--   t({ ": \"\"" }),
--   i(0),
-- }),

-- s("cilium-cidr-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.toCIDR | default \"20.1.1.1/32\" | quote }}"),
--   t({
--     "    - toCIDRSet:",
--     "        - cidr: ",
--   }),
--   i(4, "{{ .Values.toCIDRSet.cidr | default \"10.0.0.0/8\" | quote }}"),
--   t({
--     "          except:",
--     "            - ",
--   }),
--   i(5, "{{ .Values.toCIDRSet.except | default \"10.96.0.0/12\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-to-fqdn", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"to-fqdn\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"test-app\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            \"k8s:io.kubernetes.pod.namespace\": ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "            \"k8s:k8s-app\": ",
--   }),
--   i(4, "{{ .Values.dnsAppLabel | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(6, "{{ .Values.dnsProtocol | default \"ANY\" }}"),
--   t({
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: ",
--   }),
--   i(7, "{{ .Values.dnsPattern | default \"*\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "        - matchName: ",
--   }),
--   i(8, "{{ .Values.fqdnMatchName | default \"my-remote-service.com\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l4-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "      - ports:",
--     "          - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "            protocol: ",
--   }),
--   i(4, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-l4-port-range-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-port-range-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.appLabel | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "      - ports:",
--     "          - port: ",
--   }),
--   i(3, "{{ .Values.startPort | default \"80\" | quote }}"),
--   t({
--     "            endPort: ",
--   }),
--   i(4, "{{ .Values.endPort | default 444 }}"),
--   t({
--     "            protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-l4-ingress-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.targetRole | default \"backend\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            role: ",
--   }),
--   i(3, "{{ .Values.sourceRole | default \"frontend\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-cidr-l4-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.role | default \"crawler\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.cidr | default \"192.0.2.0/24\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-cidr-l4-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"cidr-l4-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      role: ",
--   }),
--   i(2, "{{ .Values.role | default \"crawler\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toCIDR:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.cidr | default \"192.0.2.0/24\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: ",
--   }),
--   i(5, "{{ .Values.protocol | default \"TCP\" }}"),
--   i(0),
-- }),

-- s("cilium-icmp-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"icmp-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - icmps:",
--     "        - fields:",
--     "            - type: ",
--   }),
--   i(3, "{{ .Values.icmpv4Type | default 8 }}"),
--   t({
--     "              family: IPv4",
--     "            - type: ",
--   }),
--   i(4, "{{ .Values.icmpv6Type | default \"EchoRequest\" | quote }}"),
--   t({
--     "              family: IPv6",
--   }),
--   i(0),
-- }),

-- s("cilium-l4-sni-egress", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l4-sni-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"443\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          serverNames:",
--     "            - ",
--   }),
--   i(4, "{{ .Values.serverName | default \"one.one.one.one\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-http-get-public", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow HTTP GET /public from env=prod to app=service\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"service\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            env: ",
--   }),
--   i(4, "{{ .Values.sourceEnv | default \"prod\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: ",
--   }),
--   i(6, "{{ .Values.httpMethod | default \"GET\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(7, "{{ .Values.httpPath | default \"/public\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-l7-http-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"l7-rule\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            http:",
--     "              - method: ",
--   }),
--   i(4, "{{ .Values.http.method1 | default \"GET\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(5, "{{ .Values.http.path1 | default \"/path1$\" | quote }}"),
--   t({
--     "              - method: ",
--   }),
--   i(6, "{{ .Values.http.method2 | default \"PUT\" | quote }}"),
--   t({
--     "                path: ",
--   }),
--   i(7, "{{ .Values.http.path2 | default \"/path2$\" | quote }}"),
--   t({
--     "                headers:",
--     "                  - ",
--   }),
--   i(8, "{{ .Values.http.header1 | default \"'X-My-Header: true'\" }}"),
--   i(0),
-- }),


-- s("cilium-kafka-produce-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"enable empire-hq to produce to empire-announce and deathstar-plans\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"kafka\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            app: ",
--   }),
--   i(4, "{{ .Values.sourceApp | default \"empire-hq\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"9092\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            kafka:",
--     "              - role: ",
--   }),
--   i(6, "{{ .Values.kafka.role1 | default \"produce\" | quote }}"),
--   t({
--     "                topic: ",
--   }),
--   i(7, "{{ .Values.kafka.topic1 | default \"deathstar-plans\" | quote }}"),
--   t({
--     "              - role: ",
--   }),
--   i(8, "{{ .Values.kafka.role2 | default \"produce\" | quote }}"),
--   t({
--     "                topic: ",
--   }),
--   i(9, "{{ .Values.kafka.topic2 | default \"empire-announce\" | quote }}"),
--   i(0),
-- }),




-- s("cilium-kafka-produce-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"rule1\" | quote }}"),
--   t({
--     "spec:",
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"enable empire-hq to produce to empire-announce and deathstar-plans\" | quote }}"),
--   t({
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(3, "{{ .Values.app | default \"kafka\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEndpoints:",
--     "        - matchLabels:",
--     "            app: ",
--   }),
--   i(4, "{{ .Values.sourceApp | default \"empire-hq\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"9092\" | quote }}"),
--   t({
--     "              protocol: TCP",
--     "          rules:",
--     "            kafka:",
--     "              - apiKey: ",
--   }),
--   i(6, "{{ .Values.apiKeys.apiVersions | default \"\\\"apiversions\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(7, "{{ .Values.apiKeys.metadata | default \"\\\"metadata\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(8, "{{ .Values.apiKeys.produce1 | default \"\\\"produce\\\"\" }}"),
--   t({
--     "                topic: ",
--   }),
--   i(9, "{{ .Values.kafkaTopics.topic1 | default \"\\\"deathstar-plans\\\"\" }}"),
--   t({
--     "              - apiKey: ",
--   }),
--   i(10, "{{ .Values.apiKeys.produce2 | default \"\\\"produce\\\"\" }}"),
--   t({
--     "                topic: ",
--   }),
--   i(11, "{{ .Values.kafkaTopics.topic2 | default \"\\\"empire-announce\\\"\" }}"),
--   i(0),
-- }),

-- s("cilium-tofqdn-dns-visibility", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"tofqdn-dns-visibility\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      any:org: ",
--   }),
--   i(2, "{{ .Values.org | default \"alliance\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "        - matchLabels:",
--     "            k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "            k8s:k8s-app: ",
--   }),
--   i(4, "{{ .Values.dnsApp | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "              protocol: ANY",
--     "          rules:",
--     "            dns:",
--     "              - matchName: ",
--   }),
--   i(6, "{{ .Values.dnsRules.matchName1 | default \"cilium.io\" | quote }}"),
--   t({
--     "              - matchPattern: ",
--   }),
--   i(7, "{{ .Values.dnsRules.matchPattern1 | default \"*.cilium.io\" | quote }}"),
--   t({
--     "              - matchPattern: ",
--   }),
--   i(8, "{{ .Values.dnsRules.matchPattern2 | default \"*.api.cilium.io\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "        - matchName: ",
--   }),
--   i(9, "{{ .Values.fqdnRules.name1 | default \"cilium.io\" | quote }}"),
--   t({
--     "        - matchName: ",
--   }),
--   i(10, "{{ .Values.fqdnRules.name2 | default \"sub.cilium.io\" | quote }}"),
--   t({
--     "        - matchName: ",
--   }),
--   i(11, "{{ .Values.fqdnRules.name3 | default \"service1.api.cilium.io\" | quote }}"),
--   t({
--     "        - matchPattern: ",
--   }),
--   i(12, "{{ .Values.fqdnRules.pattern1 | default \"special*service.api.cilium.io\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "            - port: ",
--   }),
--   i(13, "{{ .Values.fqdnPort | default \"80\" | quote }}"),
--   t({
--     "              protocol: TCP",
--   }),
--   i(0),
-- }),

-- s("cilium-tofqdn-dns-visibility", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"tofqdn-dns-visibility\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      any:org: ",
--   }),
--   i(2, "{{ .Values.org | default \"alliance\" | quote }}"),
--   t({
--     "  egress:",
--     "    - toEndpoints:",
--     "      - matchLabels:",
--     "          \"k8s:io.kubernetes.pod.namespace\": ",
--   }),
--   i(3, "{{ .Values.dnsNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "          \"k8s:k8s-app\": ",
--   }),
--   i(4, "{{ .Values.dnsApp | default \"kube-dns\" | quote }}"),
--   t({
--     "      toPorts:",
--     "        - ports:",
--     "          - port: ",
--   }),
--   i(5, "{{ .Values.dnsPort | default \"53\" | quote }}"),
--   t({
--     "            protocol: ANY",
--     "          rules:",
--     "            dns:",
--     "              - matchPattern: ",
--   }),
--   i(6, "{{ .Values.dnsMatchPattern | default \"*\" | quote }}"),
--   t({
--     "    - toFQDNs:",
--     "      - matchName: ",
--   }),
--   i(7, "{{ .Values.fqdnMatchName1 | default \"cilium.io\" | quote }}"),
--   t({
--     "      - matchName: ",
--   }),
--   i(8, "{{ .Values.fqdnMatchName2 | default \"sub.cilium.io\" | quote }}"),
--   t({
--     "      - matchPattern: ",
--   }),
--   i(9, "{{ .Values.fqdnMatchPattern | default \"*.sub.cilium.io\" | quote }}"),
--   i(0),
-- }),


-- s("cilium-isolate-namespaces", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName1 | default \"isolate-ns1\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace1 | default \"ns1\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      ",
--   }),
--   i(3, "{{ .Values.endpointSelector1 | default \"{}\" }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        ",
--   }),
--   i(4, "{{ .Values.fromEndpoints1 | default \"{}\" }}"),
--   t({
--     "---",
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(5, "{{ .Values.policyName2 | default \"isolate-ns2\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(6, "{{ .Values.namespace2 | default \"ns2\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      ",
--   }),
--   i(7, "{{ .Values.endpointSelector2 | default \"{}\" }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        ",
--   }),
--   i(8, "{{ .Values.fromEndpoints2 | default \"{}\" }}"),
--   i(0),
-- }),


-- s("cilium-k8s-expose-across-namespace", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"k8s-expose-across-namespace\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"ns1\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.endpointName | default \"leia\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(4, "{{ .Values.sourceNamespace | default \"ns2\" | quote }}"),
--   t({
--     "        name: ",
--   }),
--   i(5, "{{ .Values.sourceName | default \"luke\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-or-and-policy", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.orPolicyName | default \"or-statement-policy\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(2, "{{ .Values.orKey1 | default \"k8s:io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(3, "{{ .Values.orValue1 | default \"production\" | quote }}"),
--   t({
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(4, "{{ .Values.orKey2 | default \"k8s:cilium.example.com/policy\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(5, "{{ .Values.orValue2 | default \"strict\" | quote }}"),
--   t({"", "---",}),
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(6, "{{ .Values.andPolicyName | default \"and-statement-policy\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchExpressions:",
--     "      - key: ",
--   }),
--   i(7, "{{ .Values.andKey1 | default \"k8s:io.kubernetes.pod.namespace\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(8, "{{ .Values.andValue1 | default \"production\" | quote }}"),
--   t({
--     "      - key: ",
--   }),
--   i(9, "{{ .Values.andKey2 | default \"k8s:cilium.example.com/policy\" | quote }}"),
--   t({
--     "        operator: in",
--     "        values:",
--     "        - ",
--   }),
--   i(10, "{{ .Values.andValue2 | default \"strict\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-allow-to-kubedns", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-to-kubedns\" | quote }}"),
--   t({
--     "  namespace: ",
--   }),
--   i(2, "{{ .Values.namespace | default \"public\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector: {}",
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        k8s:io.kubernetes.pod.namespace: ",
--   }),
--   i(3, "{{ .Values.kubeDNSNamespace | default \"kube-system\" | quote }}"),
--   t({
--     "        k8s-app: ",
--   }),
--   i(4, "{{ .Values.kubeDNSApp | default \"kube-dns\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: ",
--   }),
--   i(5, "{{ .Values.port | default \"53\" | quote }}"),
--   t({
--     "        protocol: UDP",
--   }),
--   i(0),
-- }),

-- s("cilium-k8s-svc-account", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"k8s-svc-account\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      io.cilium.k8s.policy.serviceaccount: ",
--   }),
--   i(2, "{{ .Values.dstServiceAccount | default \"leia\" | quote }}"),
--   t({
--     "  ingress:",
--     "  - fromEndpoints:",
--     "    - matchLabels:",
--     "        io.cilium.k8s.policy.serviceaccount: ",
--   }),
--   i(3, "{{ .Values.srcServiceAccount | default \"luke\" | quote }}"),
--   t({
--     "    toPorts:",
--     "    - ports:",
--     "      - port: ",
--   }),
--   i(4, "{{ .Values.port | default \"80\" | quote }}"),
--   t({
--     "        protocol: TCP",
--     "      rules:",
--     "        http:",
--     "        - method: ",
--   }),
--   i(5, "{{ .Values.httpMethod | default \"GET\" | quote }}"),
--   t({
--     "          path: ",
--   }),
--   i(6, "{{ .Values.httpPath | default \"/public$\" | quote }}"),
--   i(0),
-- }),



-- s("cilium-allow-cross-cluster", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"allow-cross-cluster\" | quote }}"),
--   t({
--     "  description: ",
--   }),
--   i(2, "{{ .Values.description | default \"Allow x-wing in cluster1 to contact rebel-base in cluster2\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      name: ",
--   }),
--   i(3, "{{ .Values.sourceName | default \"x-wing\" | quote }}"),
--   t({
--     "      io.cilium.k8s.policy.cluster: ",
--   }),
--   i(4, "{{ .Values.sourceCluster | default \"cluster1\" | quote }}"),
--   t({
--     "  egress:",
--     "  - toEndpoints:",
--     "    - matchLabels:",
--     "        name: ",
--   }),
--   i(5, "{{ .Values.destName | default \"rebel-base\" | quote }}"),
--   t({
--     "        io.kubernetes.pod.namespace: ",
--   }),
--   i(6, "{{ .Values.destNamespace | default \"default\" | quote }}"),
--   t({
--     "        io.cilium.k8s.policy.cluster: ",
--   }),
--   i(7, "{{ .Values.destCluster | default \"cluster2\" | quote }}"),
--   i(0),
-- }),

-- s("cilium-from-init-rule", {
--   t({
--     "apiVersion: \"cilium.io/v2\"",
--     "kind: CiliumNetworkPolicy",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.policyName | default \"from-init\" | quote }}"),
--   t({
--     "spec:",
--     "  endpointSelector:",
--     "    matchLabels:",
--     "      app: ",
--   }),
--   i(2, "{{ .Values.app | default \"myService\" | quote }}"),
--   t({
--     "  ingress:",
--     "    - fromEntities:",
--     "      - init",
--     "    - toPorts:",
--     "      - ports:",
--     "        - port: ",
--   }),
--   i(3, "{{ .Values.port | default \"53\" | quote }}"),
--   t({
--     "          protocol: UDP",
--   }),
--   i(0),
-- }),


-- s("csr-helm", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"carol\" }}"),
--   t({
--     "spec:",
--     "  groups:",
--     "    - ",
--   }),
--   i(2, "{{ .Values.group | default \"developers\" }}"),
--   t({
--     "  request: ",
--   }),
--   i(3, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(4, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client\" }}"),
--   t({
--     "  usages:",
--     "    - ",
--   }),
--   i(5, "{{ .Values.usage | default \"client auth\" }}"),
--   i(0),
-- }),

-- s("csr-serving", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"webhook-csr\" }}"),
--   t({
--     "spec:",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client\" }}"),
--   t({
--     "  usages:",
--     "    - digital signature",
--     "    - key encipherment",
--     "    - server auth",
--   }),
--   i(0),
-- }),

-- s("csr-node-bootstrap", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"node-bootstrap\" }}"),
--   t({
--     "spec:",
--     "  groups:",
--     "    - system:bootstrappers",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"kubernetes.io/kube-apiserver-client-kubelet\" }}"),
--   t({
--     "  usages:",
--     "    - digital signature",
--     "    - key encipherment",
--     "    - client auth",
--   }),
--   i(0),
-- }),

-- s("csr-code-signing", {
--   t({
--     "apiVersion: certificates.k8s.io/v1",
--     "kind: CertificateSigningRequest",
--     "metadata:",
--     "  name: ",
--   }),
--   i(1, "{{ .Values.csrName | default \"code-signing-csr\" }}"),
--   t({
--     "spec:",
--     "  request: ",
--   }),
--   i(2, "{{ .Values.request | required \"CSR .Values.request is required (base64-encoded)\" }}"),
--   t({
--     "  signerName: ",
--   }),
--   i(3, "{{ .Values.signerName | default \"example.com/code-signing\" }}"),
--   t({
--     "  usages:",
--     "    - code signing",
--   }),
--   i(0),
-- })























































-- }



}