local ls = require("luasnip") -- обязательно
local s = ls.snippet
local t = ls.text_node

return {

}



-- local ls = require("luasnip")
-- local s = ls.snippet
-- local t = ls.text_node
-- local i = ls.insert_node
-- --local c = ls.choice_node
-- --local fmt = require("luasnip.extras.fmt").fmt
-- local rep = require("luasnip.extras").rep

-- return {
--  s("steps", {
--     t("steps {"),
--     t({"", "\tsh '"}),
--     i(1, "make check"),
--     t({"'", "\tjunit '"}),
--     i(2, "reports/**/*.xml"),
--     t({"'", "}"}),
--     i(0),
--   }),


--    s("stage", {
--     t("stage('"),
--     i(1, "Test"),
--     t("'){"),
--     t({"", "\tsteps {"}),
--     t({"", "\t\tsh '"}),
--     i(2, "make check"),
--     t({"'", "\t\tjunit '"}),
--     i(3, "reports/**/*.xml"),
--     t({"'", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--    s("pipeline", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('"}),
--     i(1, "Build"),
--     t("') {"),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh '"}),
--     i(2, "make"),
--     t("'"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pipeline_sample", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('"}),
--     i(1, "Build"),
--     t("') {"),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh '"}),
--     i(2, "make"),
--     t("'"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t\tstage('"}),
--     i(3, "Test"),
--     t("'){"),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh '"}),
--     i(4, "make check"),
--     t("'"),
--     t({"", "\t\t\t\tjunit '"}),
--     i(5, "reports/**/*.xml"),
--     t("'"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t\tstage('"}),
--     i(6, "Deploy"),
--     t("') {"),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh '"}),
--     i(7, "make publish"),
--     t("'"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),


--   s("d", {
--     t("docker {"),
--     t({"", "\timage '"}),
--     i(1, "myregistry.com/node"),
--     t("'"),
--     t({"", "\tlabel '"}),
--     i(2, "my-defined-label"),
--     t("'"),
--     t({"", "\tregistryUrl '"}),
--     i(3, "https://myregistry.com/"),
--     t("'"),
--     t({"", "\tregistryCredentialsId '"}),
--     i(4, "myPredefinedCredentialsInJenkins"),
--     t("'"),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("df", {
--     t("dockerfile {"),
--     t({"", "\tfilename '"}),
--     i(1, "Dockerfile.build"),
--     t("'"),
--     t({"", "\tdir '"}),
--     i(2, "build"),
--     t("'"),
--     t({"", "\tlabel '"}),
--     i(3, "my-defined-label"),
--     t("'"),
--     t({"", "\tregistryUrl '"}),
--     i(4, "https://myregistry.com/"),
--     t("'"),
--     t({"", "\tregistryCredentialsId '"}),
--     i(5, "myPredefinedCredentialsInJenkins"),
--     t("'"),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pa", {
--     t("post {"),
--     t({"", "\talways {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pc", {
--     t("post {"),
--     t({"", "\tchanged {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pf", {
--     t("post {"),
--     t({"", "\tfixed {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pr", {
--     t("post {"),
--     t({"", "\tregression {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pab", {
--     t("post {"),
--     t({"", "\taborted {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pfa", {
--     t("post {"),
--     t({"", "\tfailure {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("ps", {
--     t("post {"),
--     t({"", "\tsuccess {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("pu", {
--     t("post {"),
--     t({"", "\tunstable {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--    s("pc", {
--     t("post {"),
--     t({"", "\tcleanup {"}),
--     t({"", "\t\t"}),
--     i(1),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   -- psss: pipeline snippet with one stage
--   s("psss", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('"}),
--     i(1, "Build"),
--     t("') {"),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh '"}),
--     i(2, "make"),
--     t("'"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   -- sss: stages snippet with one stage
--   s("sss", {
--     t("stages {"),
--     t({"", "\tstage('"}),
--     i(1, "Build"),
--     t("') {"),
--     t({"", "\t\tsteps {"}),
--     t({"", "\t\t\tsh '"}),
--     i(2, "make"),
--     t("'"),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("parameters", {
--     t("parameters{"),
--     t({"", "\t"}),
--     i(1),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("paramtext", {
--     t('\ttext(name: "'),
--     i(1, "BIOGRAPHY"),
--     t('" , defaultValue: "'),
--     i(2, "default"),
--     t('" , description: "'),
--     i(3, "Enter some information about the person"),
--     t('")'),
--     t({"", "\t"}),
--     i(0),
--   }),

--   s("parambool", {
--     t('\tbooleanParam(name: "'),
--     i(1, "TOGGLE"),
--     t('" , defaultValue: '),
--     i(2, "default"),
--     t(', description: "'),
--     i(3, "Toggle this value"),
--     t('")'),
--     t({"", "\t"}),
--     i(0),
--   }),

--   s("paramchoice", {
--     t('\tchoice(name: "'),
--     i(1, "CHOICE"),
--     t('" , choices: ["'),
--     i(2, "Choices"),
--     t('",] , description: "'),
--     i(3, "Pick something"),
--     t('")'),
--     t({"", "\t"}),
--     i(0),
--   }),

--   s("parampassword", {
--     t('\tpassword(name: "'),
--     i(1, "PASSWORD"),
--     t('" , defaultValue: "'),
--     i(2, "SECRET"),
--     t('" , description: "'),
--     i(3, "Enter a password"),
--     t('")'),
--     t({"", "\t"}),
--     i(0),
--   }),

--   s("paramfile", {
--     t('\tfile(name: "'),
--     i(1, "FILE"),
--     t('" , description: "'),
--     i(2, "Choose a file to upload"),
--     t('")'),
--     i(0),
--   }),

--   s("triggers", {
--     t("triggers {"),
--     t({"", "\tcron('"}),
--     i(1, "H */4 * * 1-5"),
--     t("')"),
--     t({"", "}"}),
--     i(0),
--   }),

--   s("input", {
--     t("input {"),
--     t({"", "\tmessage '"}),
--     i(1, "Should we continue?"),
--     t({"'", "\tok '"}),
--     i(2, "Yes, we should."),
--     t({"'", "\tsubmitter '"}),
--     i(3, "alice,bob"),
--     t({"'", "\tparameters {", "\t\tstring(name: '"}),
--     i(4, "PERSON"),
--     t("' , defaultValue: '"),
--     i(5, "Mr Jenkins"),
--     t("' , description: '"),
--     i(6, "Who should I say hello to?"),
--     t({"')", "\t}", "}"}),
--     i(0),
--   }),

--   s("whenbranch", {
--     t("when {"),
--     t({"", "\tbranch '"}),
--     i(1, "branch"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenbuildingTag", {
--     t("when {"),
--     t({"", "\tbuildingTag '"}),
--     i(1, "tag"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenchangelog", {
--     t("when {"),
--     t({"", "\tchangelog '"}),
--     i(1, "changelog"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenchangeset", {
--     t("when {"),
--     t({"", "\tchangeset '"}),
--     i(1, "changeSet"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenchangeRequest", {
--     t("when {"),
--     t({"", "\tchangeRequest '"}),
--     i(1, "changeRequest"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenenvironment", {
--     t("when {"),
--     t({"", "\tenvironment '"}),
--     i(1, "environment"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenequals", {
--     t("when {"),
--     t({"", "\tequals '"}),
--     i(1, "equals"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenexpression", {
--     t("when {"),
--     t({"", "\texpression '"}),
--     i(1, "expression"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whentag", {
--     t("when {"),
--     t({"", "\ttag '"}),
--     i(1, "tag"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whannot", {
--     t("when {"),
--     t({"", "\tnot '"}),
--     i(1, "not"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenallOf", {
--     t("when {"),
--     t({"", "\tallOf '"}),
--     i(1, "allOf"),
--     t({"'", "}"}),
--     i(0),
--   }),

--   s("whenanyOf", {
--     t("when {"),
--     t({"", "\tanyOf '"}),
--     i(1, "anyOf"),
--     t({"'", "}"}),
--     i(0),
--   }),



-- s("pipeline-agent-docker-alwaysPull", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "            args '"}), i(2, "-e someEnv=dev"), t("'"),
--   t({"", "            alwaysPull true"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(3, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(4, "echo $someEnv"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-docker-args", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "            args '"}), i(2, "-e someEnv=dev"), t("'"),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(3, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(4, "echo $someEnv"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-docker-customWorkspace", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "            args '"}), i(2, "-e someEnv=dev"), t("'"),
--   t({"", "            alwaysPull true"}),
--   t({"", "            customWorkspace '"}), i(3, "/var/lib/jenkins/workspace/myCustomWorkspace"), t("'"),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(4, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(5, "echo $someEnv"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-docker-image", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(2, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(3, "mvn -v"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),


-- s("pipeline-agent-docker-label", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "            label '"}), i(2, "Slave 1"), t("'"),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(3, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(4, "mvn -v"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-docker-registryUrl", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        docker {"}),
--   t({"", "            image '"}), i(1, "quay.io/pipelineascodecourse/myfirstrepo:latest"), t("'"),
--   t({"", "            registryUrl '"}), i(2, "https://quay.io"), t("'"),
--   t({"", "            registryCredentialsId '"}), i(3, "quay.io"), t("'"),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(4, "Build"), t({"') {"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(5, "printenv"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-docker-reuseNode", {
--   t("pipeline {"),
--   t({"", "    agent {"}),
--   t({"", "        label '"}), i(1, "Slave 1"), t("'"),
--   t({"", "    }"}),
--   t({"", "    stages {"}),
--   t({"", "        stage('"}), i(2, "Build"), t({"') {"}),
--   t({"", "            agent {"}),
--   t({"", "                docker {"}),
--   t({"", "                    image '"}), i(3, "maven:3.5.3-jdk-10-slim"), t("'"),
--   t({"", "                    label '"}), i(4, "Slave 2"), t("'"),
--   t({"", "                }"}),
--   t({"", "            }"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(5, "mvn -v"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "        stage('"}), i(6, "Deploy"), t({"') {"}),
--   t({"", "            agent {"}),
--   t({"", "                docker {"}),
--   t({"", "                    image '"}), i(7, "ubuntu:16.04"), t("'"),
--   t({"", "                    reuseNode true"}),
--   t({"", "                }"}),
--   t({"", "            }"}),
--   t({"", "            steps {"}),
--   t({"", "                sh '"}), i(8, "printenv"), t("'"),
--   t({"", "            }"}),
--   t({"", "        }"}),
--   t({"", "    }"}),
--   t({"", "}"}),
--   i(0),
-- }),

-- s("pipeline-agent-dockerfile", {
--   t("pipeline {"),
--   t({"", "\tagent none"}),
--   t({"", "\tstages {"}),

--   -- Checkout stage
--   t({"", "\t\tstage('Checkout') {"}),
--   t({"", "\t\t\tagent any"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tcheckout([$class = 'GitSCM', "}),
--   t("\t\t\t\tbranches = {{name = 'origin/master'}},"),
--   t("\t\t\t\tuserRemoteConfigs = {{"),
--   t("\t\t\t\t\turl = 'https://github.com/pipelineascodecourse/pipeline-agent-dockerfile.git'"),
--   t("\t\t\t\t}}"),
--   t("\t\t\t])"),
--   t("\t\t\t}"),
--   t("\t\t}"),

--   -- Build stage
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tagent {"}),
--   t({"", "\t\t\t\tdockerfile true"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),

--   t("\t}"),
--   t("}")
-- }),


-- s("pipeline-agent-dockerfile-additionalBuildArgs", {
--   t("pipeline {"),
--   t({"", "\tagent none"}),
--   t({"", "\tstages {"}),

--   -- Checkout stage
--   t({"", "\t\tstage('Checkout') {"}),
--   t({"", "\t\t\tagent any"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tcheckout([$class: 'GitSCM',"}),
--   t("\t\t\t\tbranches = {{name = 'origin/master'}},"),
--   t("\t\t\t\tuserRemoteConfigs = {{"),
--   t("\t\t\t\t\turl = 'https://github.com/pipelineascodecourse/pipeline-agent-dockerfile.git'"),
--   t("\t\t\t\t}}"),
--   t("\t\t\t])"),
--   t("\t\t\t}"),
--   t("\t\t}"),

--   -- Dockerfile stage
--   t({"", "\t\tstage('dockerfile') {"}),
--   t({"", "\t\t\tagent {"}),
--   t({"", "\t\t\t\tdockerfile {"}),
--   t({"", "\t\t\t\t\tadditionalBuildArgs '--tag mydockerfile:example'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),

--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-agent-dockerfile-customWorkspace", {
--   t("pipeline {"),
--   t({"", "\tagent none"}),
--   t({"", "\tstages {"}),

--   -- Checkout stage
--   t({"", "\t\tstage('Checkout') {"}),
--   t({"", "\t\t\tagent any"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tcheckout([$class: 'GitSCM',"}),
--   t("\t\t\t\tbranches = {{name = 'origin/master'}},"),
--   t("\t\t\t\tuserRemoteConfigs = {{"),
--   t("\t\t\t\t\turl = 'https://github.com/pipelineascodecourse/pipeline-agent-dockerfile.git'"),
--   t("\t\t\t\t}},"),
--   t("\t\t\t\textensions = {{"),
--   t("\t\t\t\t\t$class = 'RelativeTargetDirectory', relativeTargetDir = 'checkout-directory'"),
--   t("\t\t\t\t}}"),
--   t("\t\t\t])"),
--   t("\t\t\t}"),
--   t("\t\t}"),

--   -- Dockerfile stage
--   t({"", "\t\tstage('dockerfile') {"}),
--   t({"", "\t\t\tagent {"}),
--   t({"", "\t\t\t\tdockerfile {"}),
--   t({"", "\t\t\t\t\tcustomWorkspace '/var/lib/jenkins/workspace/pipeline-agent-dockerfile-customWorkspace/checkout-directory'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),

--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-agent-dockerfile-dir", {
--   t("pipeline {"),
--   t({"", "\tagent none"}),
--   t({"", "\tstages {"}),

--   -- Checkout stage
--   t({"", "\t\tstage('Checkout') {"}),
--   t({"", "\t\t\tagent any"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tcheckout([$class: 'GitSCM',"}),
--   t("\t\t\t\tbranches = {{name = 'origin/master'}},"),
--   t("\t\t\t\tuserRemoteConfigs = {{"),
--   t("\t\t\t\t\turl = 'https://github.com/pipelineascodecourse/pipeline-agent-dockerfile-dir.git'"),
--   t("\t\t\t\t}}"),
--   t("\t\t\t])"),
--   t("\t\t\t}"),
--   t("\t\t}"),

--   -- Dockerfile stage
--   t({"", "\t\tstage('dockerfile') {"}),
--   t({"", "\t\t\tagent {"}),
--   t({"", "\t\t\t\tdockerfile {"}),
--   t({"", "\t\t\t\t\tdir 'dockerfileDir'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),

--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-agent-dockerfile-filename", {
--   t("pipeline {"),
--   t({"", "\tagent none"}),
--   t({"", "\tstages {"}),

--   -- Checkout stage
--   t({"", "\t\tstage('Checkout') {"}),
--   t({"", "\t\t\tagent any"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tcheckout([$class: 'GitSCM',"}),
--   t("\t\t\t\tbranches = {{name = 'origin/master'}},"),
--   t("\t\t\t\tuserRemoteConfigs = {{"),
--   t("\t\t\t\t\turl = 'https://github.com/pipelineascodecourse/pipeline-agent-dockerfile-filename.git'"),
--   t("\t\t\t\t}}"),
--   t("\t\t\t])"),
--   t("\t\t\t}"),
--   t("\t\t}"),

--   -- Dockerfile stage
--   t({"", "\t\tstage('dockerfile') {"}),
--   t({"", "\t\t\tagent {"}),
--   t({"", "\t\t\t\tdockerfile {"}),
--   t({"", "\t\t\t\t\tfilename 'myCustomNameDockerfile'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),

--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-groovy-outside-script", {
--   t("def nameOfPerson = \"john\""),
--   t({"", ""}),
--   t("def printName(name) {"),
--   t({"", "\techo name"}),
--   t("}"),
--   t({"", ""}),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage(\"Build\") {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tprintName(nameOfPerson)"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-helloworld", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage(\"Build\") {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World\""}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-options-buildDiscarder", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\toptions {"}),
--   t({"", "\t\tbuildDiscarder(logRotator(numToKeepStr: '1'))"}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo 'Hello World'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-options-disableConcurrentBuilds", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\t//options {"}),
--   t({"", "\t//    disableConcurrentBuilds()"}),
--   t({"", "\t//}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsleep(time: 10, unit: 'SECONDS')"}),
--   t({"", "\t\t\t\techo 'Hello World'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-options-newContainerPerStage", {
--   t("pipeline {"),
--   t({"", "\tagent {"}),
--   t({"", "\t\tdocker {"}),
--   t({"", "\t\t\timage 'ubuntu:latest'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t({"", "\toptions {"}),
--   t({"", "\t\tnewContainerPerStage()"}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t({"", "\t\tstage('Deploy') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tsh 'cat /etc/lsb-release'"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-options-skipStagesAfterUnstable", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\t//options {"}),
--   t({"", "\t//\tskipStagesAfterUnstable()"}),
--   t({"", "\t//}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"setting current build to unstable\""}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tcurrentBuild.result = 'UNSTABLE'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t({"", "\t\tstage('Deploy') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"deploy is running\""}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-parameters", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tparameters {"}),
--   t({"", "\t\tstring(name: 'environment', defaultValue: 'Dev', description: 'Environment to build for (Valid values: Dev, Test, Prod)')"}),
--   t({"", "\t\tstring(name: 'version', defaultValue: '1.0', description: 'Version number to build for')"}),
--   t({"", "\t\tbooleanParam(name: 'to_deploy_to_environment', defaultValue: true, description: '')"}),
--   t({"", "\t\tchoice(choices: 'US-EAST-1\\nUS-WEST-2', description: 'What AWS region?', name: 'region')"}),
--   t({"", "\t\ttext(name:'myText', defaultValue:'myTextValue', description:'myText')"}),
--   t({"", "\t\tpassword(name:'myPassword', defaultValue:'myPasswordValue', description:'myDescription')"}),
--   t({"", "\t\tfile(name:'myFile', description:'fileDescription')"}),
--   t({"", "\t\tcredentials(name:'myCredentials', description:'myCredentailsDesc', required:true)"}),
--   t("\t}"),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Example') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"We are building for ${params.environment}, ${params.version}, and we are deploying to environment: ${params.to_deploy_to_environment}\""}),
--   t({"", "\t\t\t\techo \"region:${params.region}, myText: ${params.myText}, myPassword: ${params.myPassword}, and myFile: ${params.myFile}\""}),
--   t({"", "\t\t\t\techo \"selected credentials is: ${params.myCredentials}\""}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\t//error(\"Build failed\")"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has a \"success\" status"}),
--   t({"", "\t\tsuccess {"}),
--   t({"", "\t\t\techo 'post->success is called'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has a \"failed\" status"}),
--   t({"", "\t\tfailure {"}),
--   t({"", "\t\t\techo 'post->failure is called'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\t//Runs regardless of the completion status of the Pipeline’s or stage’s run."}),
--   t({"", "\t\talways {"}),
--   t({"", "\t\t\techo 'post->always is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),


-- s("pipeline-post2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\t//script {"}),
--   t({"", "\t\t\t\t//\tcurrentBuild.result = 'UNSTABLE'"}),
--   t({"", "\t\t\t\t//}"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has a different completion status from its previous run."}),
--   t({"", "\t\tchanged {"}),
--   t({"", "\t\t\techo 'post->changed is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post3", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\t//script {"}),
--   t({"", "\t\t\t\t//\tcurrentBuild.result = 'UNSTABLE'"}),
--   t({"", "\t\t\t\t//}"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only run the steps in post if the current Pipeline’s or stage’s run has an \"unstable\" status, usually caused by test failures, code violations, etc."}),
--   t({"", "\t\tunstable {"}),
--   t({"", "\t\t\techo 'post->unstable is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post4", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run is successful and the previous run failed or was unstable."}),
--   t({"", "\t\tfixed {"}),
--   t({"", "\t\t\techo 'post->fixed is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post5", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\terror(\"Build failed\")"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s status is failure, unstable, or aborted and the previous run was successful."}),
--   t({"", "\t\tregression {"}),
--   t({"", "\t\t\techo 'post->regression is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post6", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tcurrentBuild.result = 'ABORTED'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has an \"aborted\" status, usually due to the Pipeline being manually aborted."}),
--   t({"", "\t\taborted {"}),
--   t({"", "\t\t\techo 'post->aborted is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-post7", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"building\""}),
--   t({"", "\t\t\t\t//error(\"Build failed\")"}),
--   t({"", "\t\t\t}"}),
--   t("\t\t}"),
--   t("\t}"),
--   t({"", "\tpost {"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has a \"success\" status, typically denoted by blue or green in the web UI."}),
--   t({"", "\t\tsuccess {"}),
--   t({"", "\t\t\techo 'post->success is called'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\t//Only runs if the current Pipeline’s or stage’s run has a \"failed\" status, typically denoted by red in the web UI."}),
--   t({"", "\t\tfailure {"}),
--   t({"", "\t\t\techo 'post->failure is called'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\t//Runs regardless of the completion status of the Pipeline’s or stage’s run."}),
--   t({"", "\t\talways {"}),
--   t({"", "\t\t\techo 'post->always is called'"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\t//Runs after every other post condition has been evaluated, regardless of the status of Pipeline or stage"}),
--   t({"", "\t\tcleanup {"}),
--   t({"", "\t\t\techo 'post->cleanup is called'"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-class", {
--   t("@Library(\"pipeline-shared-lib\")"),
--   t("import com.acceleratedskillup.*;"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tdef car = new Car(this)"}),
--   t({"", "\t\t\t\t\tcar.numberOfDoors = 4"}),
--   t({"", "\t\t\t\t\tcar.brand = \"brandX\""}),
--   t({"", "\t\t\t\t\tcar.model = \"modelY\""}),
--   t({"", "\t\t\t\t\tcar.printOutCar()"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-closure", {
--   t("@Library(\"pipeline-shared-lib\") _"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\texecuteInScript ({"}),
--   t({"", "\t\t\t\t\tsh \"printenv\""}),
--   t({"", "\t\t\t\t})"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-custom-step", {
--   t("@Library(\"pipeline-shared-lib\") _"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\texecMaven '--help'"}),
--   t({"", "\t\t\t\texecMaven()"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-def-declarative", {
--   t("@Library(\"pipeline-shared-lib\") _"),
--   t(""),
--   t("execBuildOrDeploy(\"build\")")
-- }),

-- s("pipeline-shared-lib-global-vars", {
--   t("@Library(\"pipeline-shared-lib\") _"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tswissknife.printName 'John'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-imported", {
--   t("@Library(\"pipeline-shared-lib\")"),
--   t("import com.acceleratedskillup.*;"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tdef calculator = new Calculator()"}),
--   t({"", "\t\t\t\t\tprintln calculator.add(1, 2)"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-load-resources", {
--   t("@Library(\"pipeline-shared-lib\") _"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tdef request = libraryResource 'com/acceleratedskillup/request.json'"}),
--   t({"", "\t\t\t\t\techo request"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-static-class1", {
--   t("@Library(\"pipeline-shared-lib\")"),
--   t("import static com.acceleratedskillup.ValidatorUtils.*;"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tvalidateInput(this)"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-static-class2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tlibrary(\"pipeline-shared-lib\").com.acceleratedskillup.ValidatorUtils.validateInput(this)"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-shared-lib-thirdparty-lib", {
--   t("@Grab('org.apache.commons:commons-lang3:3.7')"),
--   t("import org.apache.commons.lang3.StringUtils"),
--   t(""),
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo StringUtils.upperCase(\"hello world\")"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t("\t}"),
--   t("}")
-- }),

-- s("pipeline-stage-environment1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tenvironment {"}),
--   t({"", "\t\tname1 = \"Jeff\""}),
--   t({"", "\t\tname2 = \"John\""}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tenvironment {"}),
--   t({"", "\t\t\t\tname3 = \"Jamie\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"name1 ${name1}\""}),
--   t({"", "\t\t\t\techo \"name2 ${name2}\""}),
--   t({"", "\t\t\t\techo \"name3 ${name3}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-environment2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tenvironment {"}),
--   t({"", "\t\tname1 = \"Jeff\""}),
--   t({"", "\t\tname2 = \"John\""}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tenvironment {"}),
--   t({"", "\t\t\t\tname3 = \"Jamie\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"name1 ${name1}\""}),
--   t({"", "\t\t\t\techo \"name2 ${name2}\""}),
--   t({"", "\t\t\t\techo \"name3 ${name3}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Test') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"name1 ${name1}\""}),
--   t({"", "\t\t\t\techo \"name2 ${name2}\""}),
--   t({"", "\t\t\t\techo \"name3 ${name3}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),


-- s("pipeline-stage-environment3", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tenvironment {"}),
--   t({"", "\t\tname1 = \"Jeff\""}),
--   t({"", "\t\tname2 = \"John\""}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tenvironment {"}),
--   t({"", "\t\t\t\tname2 = \"Mike\""}),
--   t({"", "\t\t\t\tname3 = \"Jamie\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"name1 ${name1}\""}),
--   t({"", "\t\t\t\techo \"name2 ${name2}\""}),
--   t({"", "\t\t\t\techo \"name3 ${name3}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-environment4", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tenvironment {"}),
--   t({"", "\t\tname1 = \"Jeff\""}),
--   t({"", "\t\tname2 = \"John\""}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tenvironment {"}),
--   t({"", "\t\t\t\tname3 = \"Jamie\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"name1 ${name1}\""}),
--   t({"", "\t\t\t\techo \"name2 ${name2}\""}),
--   t({"", "\t\t\t\techo \"name3 ${name3}\""}),
--   t({"", "\t\t\t\tsh \"printenv\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-environment5", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tenvironment {"}),
--   t({"", "\t\t\t\tSOME_USERNAME_PASSWORD = credentials('some_username_password')"}),
--   t({"", "\t\t\t\tSOME_SECRET = credentials('some_secret')"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"SOME_USERNAME_PASSWORD ${SOME_USERNAME_PASSWORD}\" //SOME_USERNAME_PASSWORD is in the format of username:password"}),
--   t({"", "\t\t\t\techo \"SOME_USERNAME_PASSWORD_USR ${SOME_USERNAME_PASSWORD_USR}\""}),
--   t({"", "\t\t\t\techo \"SOME_USERNAME_PASSWORD_PSW ${SOME_USERNAME_PASSWORD_PSW}\""}),
--   t({"", "\t\t\t\techo \"SOME_SECRET ${SOME_SECRET}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-error-options-retry1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage(\"Build\") {"}),
--   t({"", "\t\t\toptions {"}),
--   t({"", "\t\t\t\tretry(3)"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Before error statement\""}),
--   t({"", "\t\t\t\terror \"Error statement just got executed\""}),
--   t({"", "\t\t\t\techo \"After error statement\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-error-options-retry2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage(\"Build\") {"}),
--   t({"", "\t\t\toptions {"}),
--   t({"", "\t\t\t\tretry(3)"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Before setting current build to FAILURE\""}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tcurrentBuild.result = 'FAILURE'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\techo \"After setting current build to FAILURE\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-input", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tinput {"}),
--   t({"", "\t\t\t\tmessage \"Please specify environment:\""}),
--   t({"", "\t\t\t\tok \"OK\""}),
--   t({"", "\t\t\t\tsubmitter \"dummyuser,admin@localhost.com\""}),
--   t({"", "\t\t\t\tsubmitterParameter \"whoIsSubmitter\""}),
--   t({"", "\t\t\t\tparameters {"}),
--   t({"", "\t\t\t\t\tstring(name: 'environment', defaultValue: 'Dev', description: 'Environment to build for (Valid values: Dev, Test, Prod)')"}),
--   t({"", "\t\t\t\t\tstring(name: 'version', defaultValue: '1.0', description: 'Version number to build for')"}),
--   t({"", "\t\t\t\t\tbooleanParam(name: 'to_deploy_to_environment', defaultValue: true, description: '')"}),
--   t({"", "\t\t\t\t\tchoice(choices: 'US-EAST-1\\nUS-WEST-2', description: 'What AWS region?', name: 'region')"}),
--   t({"", "\t\t\t\t\ttext(name:'myText', defaultValue:'myTextValue', description:'myText')"}),
--   t({"", "\t\t\t\t\tpassword(name:'myPassword', defaultValue:'myPasswordValue', description:'myDescription')"}),
--   t({"", "\t\t\t\t\tfile(name:'myFile', description:'fileDescription')"}),
--   t({"", "\t\t\t\t\tcredentials(name:'myCredentials', description:'myCredentailsDesc', required:true)"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"We are building for ${environment}, ${version}, and we are deploying to environment: ${to_deploy_to_environment}\""}),
--   t({"", "\t\t\t\techo \"region:${region}, myText: ${myText}, myPassword: ${myPassword}, and myFile: ${myFile}\""}),
--   t({"", "\t\t\t\techo \"submitter is: ${whoIsSubmitter}\""}),
--   t({"", "\t\t\t\techo \"selected credentials is: ${myCredentials}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),


-- s("pipeline-stage-options-timeout", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\toptions {"}),
--   t({"", "\t\t\t\ttimeout(time: 1, unit: 'SECONDS')  //values: NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo 'Hello World'"}),
--   t({"", "\t\t\t\tsleep 2"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-options-timestamps1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\toptions {"}),
--   t({"", "\t\t\t\ttimestamps()"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World in Build\""}),
--   t({"", "\t\t\t\techo \"Hello World in Build Again\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Test') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World in Test\""}),
--   t({"", "\t\t\t\techo \"Hello World in Test Again\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-options-timestamps2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\toptions {"}),
--   t({"", "\t\ttimestamps()"}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World\""}),
--   t({"", "\t\t\t\techo \"Hello World Again\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Test') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World in Test\""}),
--   t({"", "\t\t\t\techo \"Hello World in Test Again\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-options-timestamps-alternative", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\ttimestamps {"}),
--   t({"", "\t\t\t\t\techo \"Hello World in Build\""}),
--   t({"", "\t\t\t\t\techo \"Hello World in Build Again\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Test') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Hello World in Test\""}),
--   t({"", "\t\t\t\techo \"Hello World in Test Again\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-parallel", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Stages Running in Parallel') {"}),
--   t({"", "\t\t\tfailFast true"}),
--   t({"", "\t\t\tparallel {"}),
--   t({"", "\t\t\t\tstage('Stage1') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage1 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\tstage('Stage2') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage2 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\tstage('Stage3') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage3 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),


-- s("pipeline-stage-parallel-sequential", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Stage1') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Stage1 executing\""}),
--   t({"", "\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Stage2') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Stage2 executing\""}),
--   t({"", "\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t\tstage('Stage3') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Stage3 executing\""}),
--   t({"", "\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-parallel-failfast", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Stages Running in Parallel') {"}),
--   t({"", "\t\t\tfailFast true"}),
--   t({"", "\t\t\tparallel {"}),
--   t({"", "\t\t\t\tstage('Stage1') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage1 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\tstage('Stage2') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage2 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 2"}),
--   t({"", "\t\t\t\t\t\terror 'simulating error happened on Stage2'"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\tstage('Stage3') {"}),
--   t({"", "\t\t\t\t\tsteps {"}),
--   t({"", "\t\t\t\t\t\techo \"Stage3 executing\""}),
--   t({"", "\t\t\t\t\t\tsleep 10"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),


-- s("pipeline-stage-retry1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tretry(3) {"}),
--   t({"", "\t\t\t\t\techo \"before throwing error\""}),
--   t({"", "\t\t\t\t\terror \"error in retry\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t\techo \"after retry(3)\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-retry2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\ttimeout(time: 1, unit: 'SECONDS') //DAYS,HOURS,MICROSECONDS ,MILLISECONDS ,MINUTES ,NANOSECONDS ,SECONDS {"}),
--   t({"", "\t\t\t\t\techo \"sleeping in timeout\""}),
--   t({"", "\t\t\t\t\tsleep 2"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-retry3", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tretry(3) {"}),
--   t({"", "\t\t\t\t\ttimeout(time: 1, unit: 'SECONDS') {"}),
--   t({"", "\t\t\t\t\t\tsleep 2"}),
--   t({"", "\t\t\t\t\t}"}),
--   t({"", "\t\t\t\t\techo \"after timeout\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-steps-script", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tdef name = \""}), i(1, "jeff"), t({"\""}),
--   t({"", "\t\t\t\t\tif(name == \""}), rep(1), t({"\")"}),
--   t({"", "\t\t\t\t\t\tprintln(\"hi ${name}\")"}),
--   t({"", "\t\t\t\t\telse"}),
--   t({"", "\t\t\t\t\t\tprintln(\"hi human\")"}),
--   t({"", "\t\t\t\t\tsleep "}), i(2, "2"),
--   t({"", "\t\t\t\t\techo \""}), i(3, "end of script"), t({"\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-when-allOf", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tenvironment {"}),
--   t({"", "\t\tversion = \""}), i(1, "1.0"), t({"\""}),
--   t({"", "\t\tsome_name = \""}), i(2, "jeff"), t({"\""}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage(\"Build\") {"}),
--   t({"", "\t\t\twhen {"}),
--   t({"", "\t\t\t\tallOf {"}),
--   t({"", "\t\t\t\t\tenvironment name: \"version\", value: \""}), rep(1), t({"\""}),
--   t({"", "\t\t\t\t\tenvironment name: \"some_name\", value: \""}), rep(2), t({"\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"Building allOf ${version} ${some_name}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}")
-- }),

-- s("pipeline-stage-when-anyOf", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tversion = \""}), i(1, "2.0"), t({"\""}),
--     t({"", "\t\tsome_name = \""}), i(2, "jeff"), t({"\""}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage(\"Build\") {"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\tanyOf {"}),
--     t({"", "\t\t\t\t\tenvironment name: \"version\", value: \"1.0\""}),
--     t({"", "\t\t\t\t\tenvironment name: \"some_name\", value: \""}), rep(2), t({"\""}),
--     t({"", "\t\t\t\t}"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo \"Building anyOf ${version} ${some_name}\""}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

--   s("pipeline-stage-when-beforeAgent", {
--     t("pipeline {"),
--     t({"", "\tagent none"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tDEPLOY_TO = '"}), i(1, "dev"), t({"'"}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\tagent {"}),
--     t({"", "\t\t\t\tlabel \""}), i(2, "Slave 1"), t({"\""}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\tbeforeAgent false"}),
--     t({"", "\t\t\t\tenvironment name: 'DEPLOY_TO', value: 'production'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo 'Building'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

--   s("pipeline-stage-when-environment", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tDEPLOY_TO = '"}), i(1, "production"), t({"'"}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\tenvironment name: 'DEPLOY_TO', value: '"}), rep(1), t({"'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo 'Deploying'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

-- s("pipeline-stage-when-equals", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tsome_name = \""}), i(1, "jeff"), t({"\""}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\tequals expected: \""}), rep(1), t("\", actual: some_name"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo \"${some_name}\""}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

-- s("pipeline-stage-when-expression", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tversion = \""}), i(1, "1.0"), t({"\""}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage(\"Build\") {"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\texpression { "}), rep(1), t(" == \"1.0\" }"),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo \"Building ${version}\""}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),


--    s("pipeline-stage-when-not", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tenvironment {"}),
--     t({"", "\t\tsome_name = \""}), i(1, "jeff"), t({"\""}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\twhen {"}),
--     t({"", "\t\t\t\tnot {"}),
--     t({"", "\t\t\t\t\tequals expected: \""}), rep(1), t("\", actual: some_name"),
--     t({"", "\t\t\t\t}"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo \"${some_name}\""}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

-- s("pipeline-tools", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\ttools {"}),
--     t({"", "\t\t\t\tmaven '"}), i(1, "maven3_5_2"), t({"'"}),
--     t({"", "\t\t\t\t//maven '"}), i(2, "maven3_0_5"), t({"'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tsh 'mvn --version'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

--    s("pipeline-triggers-cron", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\ttriggers {"}),
--     t({"", "\t\t// minute, hour, day of month, month, and day of week (0 and 7 are sundays)"}),
--     t({"", "\t\tcron('0 1 2 3 1-7')"}),
--     t({"", "\t\t//cron('H */2 1-3 1,3 2-4')"}),
--     t({"", "\t\t//@yearly, @annually, @monthly, @weekly, @daily, @midnight, @hourly"}),
--     t({"", "\t\t//cron('@daily')"}),
--     t({"", "\t\t//cron('TZ=Europe/London\\n0 1 * * 1-7')"}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo 'Hello World'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

--   s("pipeline-triggers-pollSCM", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\ttriggers {"}),
--     t({"", "\t\tpollSCM('"}), i(1, "* * * * *"), t({"')"}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\tcheckout([$class: 'GitSCM',  "}),
--     t({"", "\t\t\t\tbranches: [[name: \""}), i(2, "origin/master"), t({"\"]],"}),
--     t({"", "\t\t\t\tuserRemoteConfigs: [["}),
--     t({"", "\t\t\t\t\turl: '"}), i(3, "https://github.com/pipelineascodecourse/pipeline-triggers-pollSCM.git"), t({"']"}),
--     t({"", "\t\t\t\t]])"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),

--   s("pipeline-triggers-upstream", {
--     t("pipeline {"),
--     t({"", "\tagent any"}),
--     t({"", "\ttriggers {"}),
--     t({"", "\t\tupstream(upstreamProjects: '"}), i(1, "pipeline-triggers-upstream-job1,pipeline-triggers-upstream-job2"), t("',"),
--     t({"", "\t\t\tthreshold: hudson.model.Result.SUCCESS) //UNSTABLE, FAILURE, NOT_BUILT, ABORTED"}),
--     t({"", "\t}"}),
--     t({"", "\tstages {"}),
--     t({"", "\t\tstage('Build') {"}),
--     t({"", "\t\t\tsteps {"}),
--     t({"", "\t\t\t\techo 'pipeline-triggers-upstream executed'"}),
--     t({"", "\t\t\t}"}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}")
--   }),


--    s("withMaven-sonarqube1", {
--     t("stage('Build') {"),
--     t({"", "\tcleanWs()"}),
--     t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project_with_sonarqube"), t("'"),
--     t({"", "\twithMaven(maven: '"}), i(2, "maven3_5_2"), t({"') {"}),
--     t({"", "\t\tsh \"mvn clean install\""}),
--     t({"", "\t\twithSonarQubeEnv('"}), i(3, "MySonarQubeServer"), t({"') {"}),
--     t({"", "\t\t\tsh \"mvn sonar:sonar\""}),
--     t({"", "\t\t}"}),
--     t({"", "\t}"}),
--     t("}"),
--   }),

--   s("withMaven-sonarqube2", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project_with_sonarqube"), t("'"),
--   t({"", "\twithMaven(maven: '"}), i(2, "maven3_5_2"), t({"') {"}),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t\twithSonarQubeEnv('"}), i(3, "MySonarQubeServer"), t({"') {"}),
--   t({"", "\t\t\tsh \"mvn sonar:sonar\""}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
--   t({"", ""}),
--   t("stage('Quality Gate') {"),
--   t({"", "\ttimeout(time: 1, unit: 'MINUTES') {"}),
--   t({"", "\t\tdef qualityGate = waitForQualityGate()"}),
--   t({"", "\t\tif (qualityGate.status != 'OK') {"}),
--   t({"", "\t\t\terror \"Pipeline aborted due to quality gate failure: ${qualityGate.status}\""}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("withMaven-simple-java-project1", {
--   t("stage('Build') {"),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\toptions: ["}),
--   t({"", "\t\t\tjunitPublisher(disabled: true),"}),
--   t({"", "\t\t\tartifactsPublisher(disabled: true)"}),
--   t({"", "\t\t],"}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn -X clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project2", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\tjdk: '"}), i(3, "java11"), t("',"),
--   t({"", "\t\tmavenOpts: '"}), i(4, "-XX:+PrintCommandLineFlags -XX:+UseConcMarkSweepGC"), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project3", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven(maven: '"}), i(2, "maven3_5_2"), t("', jdk: '"), i(3, "java11"), t({"') {"}),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project4", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\tmavenSettingsFilePath: '"}), i(3, "/opt/apache-maven-3.0.5/conf/settings.xml"), t("',"),
--   t({"", "\t\tmavenSettingsConfig: '"}), i(4, ""), t("',"),
--   t({"", "\t\tmavenLocalRepo: '"}), i(5, "/var/lib/jenkins/local_maven_repo"), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn -X clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project5", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\tmavenSettingsFilePath: '"}), i(3, "/opt/apache-maven-3.0.5/conf/settings.xml"), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn -X clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project6", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\tmavenSettingsConfig: '"}), i(3, ""), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn -X clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project7", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\tmavenLocalRepo: '"}), i(3, "/var/lib/jenkins/local_maven_repo"), t("'"),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn -X clean install\""}),
--   t({"", "\t}"}),
--   t({"", "}"}),
-- }),

-- s("withMaven-simple-java-project8", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project"), t("'"),
--   t({"", "\twithMaven(maven: '"}), i(2, "maven3_5_2"), t("') {"),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("withMaven_jacoco1", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project_with_jacoco.git"), t("'"),
--   t({"", "\twithMaven(maven: '"}), i(2, "maven3_5_2"), t(", options: [junitPublisher(disabled: "), i(3, "false"), t(", artifactsPublisher(disabled: "), i(4, "false"), t(")] ) {"),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("withMaven_jacoco2", {
--   t("stage('Build') {"),
--   t({"", "\tcleanWs()"}),
--   t({"", "\tgit url: '"}), i(1, "https://github.com/pipelineascodecourse/simple_java_project_with_jacoco.git"), t("'"),
--   t({"", "\twithMaven("}),
--   t({"", "\t\tmaven: '"}), i(2, "maven3_5_2"), t("',"),
--   t({"", "\t\toptions: [junitPublisher(disabled: false), artifactsPublisher(disabled: false), jacocoPublisher(disabled: true)]"}),
--   t({"", "\t) {"}),
--   t({"", "\t\tsh \"mvn clean install\""}),
--   t({"", "\t\tjacoco buildOverBuild: true, changeBuildStatus: true, deltaBranchCoverage: '40', deltaClassCoverage: '40', deltaComplexityCoverage: '40', deltaInstructionCoverage: '40', deltaLineCoverage: '40', deltaMethodCoverage: '40', maximumMethodCoverage: '75', minimumMethodCoverage: '50'"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("triggering-and-passing-params-between-jobs-build-jobs1", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tbuild job: 'build_step_child_job1',"}),
--   t({"", "\t\t\t\t\tparameters: [[$class: \"StringParameterValue\", name: \"deployEnv\", value: \"development env\"]]"}),
--   t({"", "\t\t\t\t/*"}),
--   t({"", "\t\t\t\tbuild job: 'build_step_child_job1',"}),
--   t({"", "\t\t\t\t\tparameters: [string(name: 'deployEnv', value: 'development env')]"}),
--   t({"", "\t\t\t\t*/"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),


-- s("triggering-and-passing-params-between-jobs-build-jobs2", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tparameters {"}),
--   t({"", "\t\tstring(name: 'deployEnv', description: 'deployment environment')"}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${params.deployEnv}\""}),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${deployEnv}\""}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),


-- s("triggering-and-passing-params-between-jobs-build-jobs3", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tdef buildJobReturnValue = build job: 'build_step_child_job1',"}),
--   t({"", "\t\t\t\t\t\tparameters: [[$class: \"StringParameterValue\", name: \"deployEnv\", value: \"development env\"]],"}),
--   t({"", "\t\t\t\t\t\tpropagate: true"}),
--   t({"", "\t\t\t\t\techo \"buildJobReturnValue.result: ${buildJobReturnValue.result}\""}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("triggering-and-passing-params-between-jobs-build-jobs4", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tparameters {"}),
--   t({"", "\t\tstring(name: 'deployEnv', description: 'deployment environment')"}),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${params.deployEnv}\""}),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${deployEnv}\""}),
--   t({"", "\t\t\t\tscript {"}),
--   t({"", "\t\t\t\t\tcurrentBuild.result = 'FAILURE'"}),
--   t({"", "\t\t\t\t}"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),


-- s("triggering-and-passing-params-between-jobs-build-jobs5", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\tbuild job: 'build_step_child_job1',"}),
--   t({"", "\t\t\t\t\tparameters: [[$class: 'StringParameterValue', name: 'deployEnv', value: 'development env']], "}),
--   t({"", "\t\t\t\t\tquietPeriod: 5,"}),
--   t({"", "\t\t\t\t\twait: true"}),
--   t({"", "\t\t\t\tbuild job: 'build_step_child_job2',"}),
--   t({"", "\t\t\t\t\tparameters: [[$class: 'StringParameterValue', name: 'deployEnv', value: 'development env']], "}),
--   t({"", "\t\t\t\t\tquietPeriod: 5,"}),
--   t({"", "\t\t\t\t\twait: true"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("triggering-and-passing-params-between-jobs-build-jobs6", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tparameters {"}),
--   t({"", "\t\tstring(name: '"}), i(1, "deployEnv"), t({"', description: '"}), i(2, "deployment environment"), t("')"),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${params."}), i(1), t("}\""),
--   t({"", "\t\t\t\techo \"child job 1 input param deployEnv: ${"}), i(1), t("}\""),
--   t({"", "\t\t\t\tsleep time: 5, unit: 'SECONDS'"}),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),

-- s("triggering-and-passing-params-between-jobs-build-jobs7", {
--   t("pipeline {"),
--   t({"", "\tagent any"}),
--   t({"", "\tparameters {"}),
--   t({"", "\t\tstring(name: '"}), i(1, "deployEnv"), t("')"),
--   t({"", "\t}"}),
--   t({"", "\tstages {"}),
--   t({"", "\t\tstage('Build') {"}),
--   t({"", "\t\t\tsteps {"}),
--   t({"", "\t\t\t\techo \"child job 2 input param deployEnv: ${params."}), i(1), t("}\""),
--   t({"", "\t\t\t\techo \"child job 2 input param deployEnv: ${"}), i(1), t("}\""),
--   t({"", "\t\t\t}"}),
--   t({"", "\t\t}"}),
--   t({"", "\t}"}),
--   t("}"),
-- }),


-- s("pipeline-output-shell-command", {
--   t("stage('Build') {"),
--   t({"", "\t// first shell step"}),
--   t({"", "\tdef shellOutputRaw = sh(script: \""}), i(1, "ls -al"), t("\", returnStdout: true)"),
--   t({"", "\tdef shellOutput = shellOutputRaw.trim()"}),
--   t({"", "\techo \"this is shellOutput: ${shellOutput}\""}),
--   t({"", "\t// second shell step"}),
--   t({"", "\tdef shellReturnStatus = sh(script: \""}), i(2, "ls -al"), t("\", returnStatus: true)"),
--   t({"", "\techo \"this is shellReturnStatus: ${shellReturnStatus}\""}),
--   t({"", "\t// third shell step"}),
--   t({"", "\tshellReturnStatus = sh(script: \""}), i(3, "exit 1"), t("\", returnStatus: true)"),
--   t({"", "\techo \"this is shellReturnStatus: ${shellReturnStatus}\""}),
--   t({"", "\t// if you want to fail the build based on shell exit status"}),
--   t({"", "\t// if (shellReturnStatus == 1)"}),
--   t({"", "\t// \tcurrentBuild.result = 'FAILURE'"}),
--   t({"", "\t// fourth shell step - NOTE: cannot use returnStdout and returnStatus together"}),
--   t({"", "\t// so you must handle output and status separately"}),
--   t({"", "\tdef returnValueRaw = sh(script: \""}), i(4, "ls -al"), t("\", returnStdout: true)"),
--   t({"", "\tdef returnValue = returnValueRaw.trim()"}),
--   t({"", "\techo \"this is returnValue: ${returnValue}\""}),
--   t("}")
-- }),


-- s("multi-select-parameter", {
--   t("properties([parameters([new ExtendedChoiceParameterDefinition("),
--   t({"", "\t\"color_of_car\", "}),
--   t({"", "\t\"PT_CHECKBOX\", "}),
--   t({"", "\t\"red,blue,yellow,green\", "}),
--   t({"", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"redDesc,blueDesc,yellowDesc,greenDesc\", "}),
--   t({"", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\t\"\",", "\tfalse,", "\tfalse, "}),
--   t({"", "\t4, "}),
--   t({"", "\t\"multiCheckboxDesc\", "}),
--   t({"", "\t\"-\"})])])"}),
--   t(""),
--   t("echo \"Selected ${params.color_of_car}\"")
-- }),


-- s("lockable-step-build-jobs1", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resource1'"}),
--     t({"", "\tlock('resource1') {"}),
--     t({"", "\t\techo 'After locking resource1'"}),
--     t({"", "\t\tsleep 5"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--   s("lockable-step-build-jobs2", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resource1'"}),
--     t({"", "\tlock('resource1') {"}),
--     t({"", "\t\techo 'After locking resource1'"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),


--   s("lockable-step-build-jobs3", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resource2'"}),
--     t({"", "\tlock('resource2') {"}),
--     t({"", "\t\techo 'After locking resource2'"}),
--     t({"", "\t\tsleep 5"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--   s("lockable-step-build-jobs4", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resources_2_3'"}),
--     t({"", "\tlock(label: 'resources_2_3') {"}),
--     t({"", "\t\techo 'After locking resources_2_3'"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--   s("lockable-step-build-jobs5", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resources_2_3'"}),
--     t({"", "\tlock(label: 'resources_2_3', quantity: 1) {"}),
--     t({"", "\t\techo 'After locking resources_2_3'"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--    s("lockable-step-build-jobs6", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resource1'"}),
--     t({"", "\tlock('resource1') {"}),
--     t({"", "\t\techo 'After locking resource1'"}),
--     t({"", "\t\tsleep 5"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--   s("lockable-step-build-jobs7", {
--     t("stage('Build') {"),
--     t({"", "\techo 'Before locking resource1'"}),
--     t({"", "\tlock(resource: 'resource1', inversePrecedence: true) {"}),
--     t({"", "\t\techo 'After locking resource1'"}),
--     t({"", "\t\tsleep 5"}),
--     t({"", "\t}"}),
--     t({"", "\techo 'After lock block'"}),
--     t("}"),
--   }),

--   s("stage-env-vars", {
--     t("stage('Build'){"),
--     t({"", "\tenv.ENV_VAR1 = 'JOHN'"}),
--     t({"", "\tdef NOT_ENV_VAR1 = 'SMITH'"}),
--     t({"", "\tsh 'echo ENV_VAR1 : $ENV_VAR1'"}),
--     t({"", "\techo \"NOT_ENV_VAR1 : ${NOT_ENV_VAR1}\""}),
--     t({"", "\tsh 'echo NOT_ENV_VAR1 : $NOT_ENV_VAR1'"}),
--     t({"", "\twithEnv(['ENV_VAR2=Groovy', 'MVN_VERSION=mvn --version']) {"}),
--     t({"", "\t\tsh 'echo ENV_VAR2 : $ENV_VAR2'"}),
--     t({"", "\t\tsh '$MVN_VERSION'"}),
--     t({"", "\t\tsh 'printenv'"}),
--     t({"", "\t}"}),
--     t({"", "\tsh 'echo ENV_VAR2 : $ENV_VAR2' //should show nothing"}),
--     t({"", "\tsh 'echo MVN_VERSION : $MVN_VERSION' //should show nothing"}),
--     t("}"),
--   }),


--   s({ trig = "groovy.class", name = "Groovy Script Class" }, {
--   t("class "), i(1, "ScriptClazz"), t(" extends Script {"),
--   t({"", "\tdef run() {"}),
--   t({"", "\t\tprintln '"}), i(2, "Groovy world!"), t("'"),
--   t({"", "\t}"}),
--   t({"", "\tstatic void main(String[] args) {"}),
--   t({"", "\t\tInvokerHelper.runScript("}), rep(1), t(", args)"),
--   t({"", "\t}"}),
--   t("}"),
--   i(0),
-- }),

-- s({ trig = "groovy.person", name = "Groovy Person Constructor Class" }, {
--   t("class "), i(1, "PersonConstructor"), t(" {"),
--   t({"", "\tString name"}),
--   t({"", "\tInteger age"}),
--   t({"", ""}),
--   t({"", "\t"}), i(2, "PersonConstructor"), t("(name, age) { //Constructor declaration"),
--   t({"", "\t\tthis.name = name"}),
--   t({"", "\t\tthis.age = age"}),
--   t({"", "\t}"}),
--   t("}"),
--   t({"", ""}),
--   t("def person1 = new "), rep(1), t("('"), i(3, "Marie"), t("', "), i(4, "1"), t(") //Constructor invocation, classic Java way"),
--   t({"", "def person2 = ['"}), rep(3), t("', "), rep(4), t("] as "), rep(1), t(" //Constructor usage, using coercion with as keyword"),
--   t({"", ""}),
--   rep(1), t(" person3 = ['"), rep(3), t("', "), rep(4), t("] //Constructor usage, using coercion in assignment"),
--   i(0),
-- }),


-- s({ trig = "groovy.personNoCtor", name = "Groovy Class Without Constructor" }, {
--   t("class "), i(1, "PersonWithoutConstructor"), t(" { //No constructor declared"),
--   t({"", "\tString name"}),
--   t({"", "\tInteger age"}),
--   t({"", "}"}),
--   t({"", ""}),
--   t("def pwc1 = new "), rep(1), t("() //No parameters given in the instantiation"),
--   t({"", "def pwc2 = new "}), rep(1), t("(name: '"), i(2, "Marie"), t("') //name parameter given"),
--   t({"", "def pwc3 = new "}), rep(1), t("(age: "), i(3, "1"), t(") //age parameter given"),
--   t({"", "def pwc4 = new "}), rep(1), t("(name: '"), rep(2), t("', age: "), rep(3), t(") //name and age parameters given"),
--   i(0)
-- }),

-- s({ trig = "groovy.mapFunc", name = "Groovy Function with Map Args" }, {
--   t("def "), i(1, "foo"), t("(Map args) { "),
--   t('"${args.'), i(2, "name"), t("}: ${args."), i(3, "age"), t("}"),
--   t({"", "}"}),
--   t({"", ""}),
--   t(""), rep(1), t("(name: '"), i(4, "Marie"), t("', age: "), i(5, "1"), t(")"),
--   i(0)
-- }),

-- s({ trig = "groovy.method.simple", name = "Groovy Method - No Params" }, {
--   t("def "), i(1, "someMethod"), t("() { "), i(2, "'method called'"), t(" }"),
--   i(0)
-- }),

-- s({ trig = "groovy.method.return", name = "Groovy Method - Explicit Return Type" }, {
--   t(""), i(1, "String"), t(" "), i(2, "anotherMethod"), t("() { "),
--   i(3, "'another method called'"), t(" }"),
--   i(0)
-- }),

-- s({ trig = "groovy.method.param", name = "Groovy Method - Untyped Param" }, {
--   t("def "), i(1, "thirdMethod"), t("("), i(2, "param1"), t(") { "),
--   t('"$'), rep(2), t(' passed" }'),
--   i(0)
-- }),

-- s({ trig = "groovy.method.static", name = "Groovy Static Method - With Param" }, {
--   t("static "), i(1, "String"), t(" "), i(2, "fourthMethod"), t("("), i(3, "String param1"), t(") { "),
--   t('"$'), i(4, "param1"), t(' passed" }'),
--   i(0)
-- }),

-- s({ trig = "groovy.main", name = "Groovy Main Class", wordTrig = true }, {
--   t("class "), i(1, "Main"), t(" {\n"),
--   t("\n  static void main(String... args) {\n"),
--   t("    println '"), i(2, "Groovy world!"), t("'\n"),
--   t("  }\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.iface-ext", name = "Groovy Interface Extending Interface", wordTrig = true }, {
--   t("interface "), i(1, "ExtendedGreeter"), t(" extends "), i(2, "Greeter"), t(" {\n"),
--   t("  void "), i(3, "sayBye"), t("("), i(4, "String name"), t(")\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.impl-class", name = "Groovy Class Implements Interface", wordTrig = true }, {
--   t("class "), i(1, "SystemGreeter"), t(" implements "), i(2, "Greeter"), t(" {\n"),
--   t("  void "), i(3, "greet"), t("("), i(4, "String name"), t(") {\n"),
--   t('    println "Hello $'), rep(4), t('"\n'),
--   t("  }\n"),
--   t("}\n\n"),
--   t("def "), i(5, "greeter"), t(" = new "), rep(1), t("()\n"),
--   t("assert "), rep(5), t(" instanceof "), rep(2), t("\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.interface", name = "Groovy Interface", wordTrig = true }, {
--   t("interface "), i(1, "Greeter"), t(" {\n"),
--   t("  void "), i(2, "greet"), t("("), i(3, "String name"), t(")\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.innerclass", name = "Groovy Inner Class", wordTrig = true }, {
--   t("class "), i(1, "Outer"), t(" {\n"),
--   t("  private String "), i(2, "privateStr"), t("\n\n"),
--   t("  def "), i(3, "callInnerMethod"), t("() {\n"),
--   t("    new "), i(4, "Inner"), t("()."), i(5, "method"), t("()\n"),
--   t("  }\n\n"),
--   t("  class "), rep(4), t(" {\n"),
--   t("    def "), rep(5), t("() {\n"),
--   t("      println \"${"), rep(2), t("}.\"\n"),
--   t("    }\n"),
--   t("  }\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.classfields", name = "Groovy Class with Fields", wordTrig = true }, {
--   t("class "), i(1, "Data"), t(" {\n\n"),
--   t("    private "), i(2, "int"), t(" "), i(3, "id"), t(" // a private field\n"),
--   t("    protected "), i(4, "String"), t(" "), i(5, "description"), t(" // a protected field\n"),
--   t("    public static final "), i(6, "boolean"), t(" "), i(7, "DEBUG"), t(" = "), i(8, "false"), t(" // a public static final field\n\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.student", name = "Groovy Student Class", wordTrig = true }, {
--   t("class "), i(1, "Student"), t(" { //class beginning, with the name Student\n\n"),
--   t("    "), i(2, "String"), t(" "), i(3, "name"), t(" //string field and property named name\n"),
--   t("    "), i(4, "Integer"), t(" "), i(5, "age"), t("\n\n"),
--   t("    def "), i(6, "increaseAge"), t("("), i(7, "Integer years"), t(") { //method definition\n"),
--   t("        this."), rep(5), t(" += "), rep(7), t("\n"),
--   t("    }\n\n"),
--   t("}"),
--   i(0)
-- }),


-- s({ trig = "groovy.outer3", name = "Groovy Outer3 class with Runnable Thread", wordTrig = true }, {
--   t("class "), i(1, "Outer3"), t(" {\n"),
--   t("    private String "), i(2, "privateStr"), t(" = '"), i(3, "some string"), t("'\n\n"),
--   t("    def startThread() {\n"),
--   t("        new Thread(new Runnable() { // comparing with the last example of previous section, the new Inner2() was replaced by new Runnable() along with all its implementation\n"),
--   t("            void run() {\n"),
--   t("                println \"${"), rep(2), t("}.\"\n"),
--   t("            }\n"),
--   t("        }).start() // the method start is invoked normally\n"),
--   t("    }\n"),
--   t("}\n"),
--   i(0)
-- }),

-- s({ trig = "groovy.abstract", name = "Groovy Abstract Class", wordTrig = true }, {
--   t("abstract class "), i(1, "Abstract"), t(" { //abstract classes must be declared with abstract keyword\n\n"),
--   t("    String "), i(2, "name"), t("\n\n"),
--   t("    abstract def "), i(3, "abstractMethod"), t("() //abstract methods must also be declared with abstract keyword\n\n"),
--   t("    def "), i(4, "concreteMethod"), t("() {\n"),
--   t("        println 'concrete'\n"),
--   t("    }\n\n"),
--   t("}\n"),
--   i(0)
-- })























































  
-- }
