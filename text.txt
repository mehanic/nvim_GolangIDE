" Optional: Specify the path to gopls if it's not in the default location
" Adjust path if needed
let g:goplements_gopls_path = '/home/mehanic/.gvm/pkgsets/go1.23.0/global/bin/gopls'



-- Убедимся, что nvim-cmp подключен и настроен
require('cmp')

-- Настройка LSP для Go с использованием gopls
local lspconfig = require('lspconfig')

-- Расширение возможностей LSP (например, для nvim-cmp)
local capabilities = require('cmp_nvim_lsp').default_capabilities()

lspconfig.gopls.setup({
  on_attach = function(client, bufnr)
    -- Выводим сообщение, когда LSP успешно подключается
    vim.notify("gopls attached", vim.log.levels.INFO)
  end,
  capabilities = capabilities,
  filetypes = { "go", "gomod", "gowork", "gotmpl" },
  root_dir = require('lspconfig.util').root_pattern("go.work", "go.mod", ".git"),
  settings = {
    gopls = {
      analyses = { unusedparams = true },
      staticcheck = true,
      hoverKind = "FullDocumentation", -- Полная документация при наведении
      completionDocumentation = true,  -- Описание при автодополнении
    },
  },
})

####and 

{
    "languageserver": {
      "python": {
        "command": "pyright-langserver",
        "args": ["--stdio"],
        "filetypes": ["python"]
      },
      "golang": {
        "command": "gopls",
        "rootPatterns": ["go.mod", ".git/"],
        "filetypes": ["go"]
      },
      "bash": {
        "command": "bash-language-server",
        "args": ["start"],
        "filetypes": ["sh", "bash"],
        "rootPatterns": [".git/"],
        "initializationOptions": {
          "shell": "bash"
        }
      }
    },
  
    "python.formatting.provider": "black",
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.autoComplete.addBrackets": true,
  
    "go.formatTool": "gopls",
    "go.lintTool": "golangci-lint",
  
    "suggest.noselect": false,
    "suggest.enablePreview": true,
  
    "bash.formatter": "shfmt"
  }
  
  
:CocInfo
## versions

vim version: NVIM v0.12.0-dev
node version: v22.14.0
coc.nvim version: 0.0.82-d2edf3f 2025-04-25 23:12:28 +0800
coc.nvim directory: /home/mehanic/.config/nvim/autoload/plugged/coc.nvim
term: xterm-256color
platform: linux

## Log of coc.nvim

2025-04-28T01:13:07.155 INFO (pid:2029409) [plugin] - coc.nvim initialized with node: v22.14.0 after 369
2025-04-28T01:29:58.492 INFO (pid:2029409) [attach] - receive notification: showInfo []



Ваш конфиг для **gopls** в Neovim с использованием `lspconfig` и **nvim-cmp** — это правильная и мощная настройка для работы с Go в Neovim. Давайте разберем, как это соединяется с другим конфигом, который вы привели (конфиг в формате JSON для **coc.nvim**).

### Примечания по конфигам:
- В первом примере вы используете **LSP-сервер** с **nvim-lspconfig**, что идеально подходит для настройки серверов LSP и интеграции с **nvim-cmp**.
- Во втором примере — конфигурация для **coc.nvim** в формате JSON, что больше подходит для использования с плагином **coc.nvim**, а не с LSP-сервером через `lspconfig`.

### Как они работают вместе?
1. **LSP через `lspconfig`**:
   - Это нативная настройка для работы с LSP-серверами в Neovim. Когда вы используете `lspconfig`, Neovim будет подключаться к **gopls** и работать с ним напрямую.
   - В конфиге вы правильно настраиваете **gopls** для работы с Go, что позволяет вам получить автодополнение, подсветку синтаксиса и другие возможности LSP.
   - Также используется **`cmp_nvim_lsp`** для интеграции с **nvim-cmp**, что позволяет автодополнению работать в стиле **nvim-cmp**.

2. **Конфиг для `coc.nvim`**:
   - Этот конфиг используется в плагине **coc.nvim**. Если вы используете **coc.nvim**, то настройки в формате JSON (например, для `gopls`, `pyright`, и других серверов) будут автоматически подхвачены при запуске `coc.nvim`.
   - Этот конфиг не имеет прямого отношения к вашему **`lspconfig`** и настройке **gopls** через `lspconfig`.

### Как объединить эти два конфигурационных подхода?
Вы не можете использовать оба конфигурационных подхода одновременно (и **`lspconfig`**, и **coc.nvim**), так как они работают по-разному. Вот несколько шагов, чтобы понять, какой из них вам использовать:

1. **Для использования с `lspconfig`**:
   - Убедитесь, что у вас установлен и настроен **gopls** в системе, а затем настроен сервер через `lspconfig`:
     ```lua
     require('cmp')
     local lspconfig = require('lspconfig')
     local capabilities = require('cmp_nvim_lsp').default_capabilities()
     
     lspconfig.gopls.setup({
       on_attach = function(client, bufnr)
         vim.notify("gopls attached", vim.log.levels.INFO)
       end,
       capabilities = capabilities,
       filetypes = { "go", "gomod", "gowork", "gotmpl" },
       root_dir = require('lspconfig.util').root_pattern("go.work", "go.mod", ".git"),
       settings = {
         gopls = {
           analyses = { unusedparams = true },
           staticcheck = true,
           hoverKind = "FullDocumentation",
           completionDocumentation = true,
         },
       },
     })
     ```
     - В этом случае **gopls** будет работать как LSP-сервер для Go в Neovim, а **nvim-cmp** будет использовать автодополнение.

2. **Для использования с `coc.nvim`**:
   - Если вы хотите использовать **coc.nvim**, вы должны установить **coc.nvim** и настроить его для работы с Go, Python и другими языками, как указано в вашем конфиге JSON.
   - Убедитесь, что **coc.nvim** работает, и для Go установлены правильные языковые серверы и инструменты для линтинга.

### Как выбрать между `lspconfig` и `coc.nvim`?
- **lspconfig** лучше подходит для тех, кто предпочитает настраивать Neovim с нуля и использовать внутреннюю поддержку LSP. Если вы используете **`nvim-cmp`**, это будет хорошим вариантом для вас.
- **coc.nvim** предлагает более простую настройку и мощные возможности, так как он предоставляет множество расширений из коробки и хорошую интеграцию с автодополнением, линтерами и форматтерами.

### Резюме:
- Если вы хотите использовать **lspconfig** для настройки **gopls** и интеграции с **nvim-cmp**, не используйте **coc.nvim** для тех же серверов.
- Если вы хотите использовать **coc.nvim**, то ваш конфиг **coc.nvim** для Go (и других языков) в JSON-формате будет работать с сервером **gopls**, линтерами и другими инструментами.

Таким образом, нужно выбрать один подход: либо **lspconfig** с интеграцией **nvim-cmp**, либо **coc.nvim**. Выбор зависит от ваших предпочтений и потребностей.